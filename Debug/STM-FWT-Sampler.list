
STM-FWT-Sampler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000554c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005750  08005750  00020474  2**0
                  CONTENTS
  4 .ARM          00000008  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005758  08005758  00020474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000474  20000000  08005760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000474  08005bd4  00020474  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  08005bd4  000206d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e12  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003225  00000000  00000000  000342b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  000374e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  00037f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254c7  00000000  00000000  000388f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149a1  00000000  00000000  0005ddb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9aff  00000000  00000000  00072758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  0013c257  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec0  00000000  00000000  0013c32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000090c8  00000000  00000000  0013e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000474 	.word	0x20000474
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080056bc 	.word	0x080056bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000478 	.word	0x20000478
 80001c4:	080056bc 	.word	0x080056bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004c0:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004c2:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_CRC_Init+0x18>)
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <MX_CRC_Init+0x1c>)
 80004c6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004c8:	f000 fd2a 	bl	8000f20 <HAL_CRC_Init>
 80004cc:	b900      	cbnz	r0, 80004d0 <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004ce:	bd08      	pop	{r3, pc}
    Error_Handler();
 80004d0:	f000 f9c8 	bl	8000864 <Error_Handler>
}
 80004d4:	e7fb      	b.n	80004ce <MX_CRC_Init+0xe>
 80004d6:	bf00      	nop
 80004d8:	200004b8 	.word	0x200004b8
 80004dc:	40023000 	.word	0x40023000

080004e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80004e0:	6802      	ldr	r2, [r0, #0]
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_CRC_MspInit+0x28>)
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d000      	beq.n	80004ea <HAL_CRC_MspInit+0xa>
 80004e8:	4770      	bx	lr
{
 80004ea:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004ec:	2300      	movs	r3, #0
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <HAL_CRC_MspInit+0x2c>)
 80004f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80004f8:	631a      	str	r2, [r3, #48]	; 0x30
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000504:	b002      	add	sp, #8
 8000506:	4770      	bx	lr
 8000508:	40023000 	.word	0x40023000
 800050c:	40023800 	.word	0x40023800

08000510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000510:	b510      	push	{r4, lr}
 8000512:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000514:	2400      	movs	r4, #0
 8000516:	9401      	str	r4, [sp, #4]
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_DMA_Init+0x50>)
 800051a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000520:	631a      	str	r2, [r3, #48]	; 0x30
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800052c:	4622      	mov	r2, r4
 800052e:	4621      	mov	r1, r4
 8000530:	200e      	movs	r0, #14
 8000532:	f000 fc9d 	bl	8000e70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000536:	200e      	movs	r0, #14
 8000538:	f000 fcce 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800053c:	4622      	mov	r2, r4
 800053e:	4621      	mov	r1, r4
 8000540:	2010      	movs	r0, #16
 8000542:	f000 fc95 	bl	8000e70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000546:	2010      	movs	r0, #16
 8000548:	f000 fcc6 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800054c:	4622      	mov	r2, r4
 800054e:	4621      	mov	r1, r4
 8000550:	2011      	movs	r0, #17
 8000552:	f000 fc8d 	bl	8000e70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000556:	2011      	movs	r0, #17
 8000558:	f000 fcbe 	bl	8000ed8 <HAL_NVIC_EnableIRQ>

}
 800055c:	b002      	add	sp, #8
 800055e:	bd10      	pop	{r4, pc}
 8000560:	40023800 	.word	0x40023800

08000564 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000568:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	2400      	movs	r4, #0
 800056c:	9407      	str	r4, [sp, #28]
 800056e:	9408      	str	r4, [sp, #32]
 8000570:	9409      	str	r4, [sp, #36]	; 0x24
 8000572:	940a      	str	r4, [sp, #40]	; 0x28
 8000574:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000576:	9401      	str	r4, [sp, #4]
 8000578:	4b62      	ldr	r3, [pc, #392]	; (8000704 <MX_GPIO_Init+0x1a0>)
 800057a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800057c:	f042 0210 	orr.w	r2, r2, #16
 8000580:	631a      	str	r2, [r3, #48]	; 0x30
 8000582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000584:	f002 0210 	and.w	r2, r2, #16
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058c:	9402      	str	r4, [sp, #8]
 800058e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000590:	f042 0204 	orr.w	r2, r2, #4
 8000594:	631a      	str	r2, [r3, #48]	; 0x30
 8000596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000598:	f002 0204 	and.w	r2, r2, #4
 800059c:	9202      	str	r2, [sp, #8]
 800059e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a0:	9403      	str	r4, [sp, #12]
 80005a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005a8:	631a      	str	r2, [r3, #48]	; 0x30
 80005aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005b0:	9203      	str	r2, [sp, #12]
 80005b2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	9404      	str	r4, [sp, #16]
 80005b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b8:	f042 0201 	orr.w	r2, r2, #1
 80005bc:	631a      	str	r2, [r3, #48]	; 0x30
 80005be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c0:	f002 0201 	and.w	r2, r2, #1
 80005c4:	9204      	str	r2, [sp, #16]
 80005c6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	9405      	str	r4, [sp, #20]
 80005ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005cc:	f042 0202 	orr.w	r2, r2, #2
 80005d0:	631a      	str	r2, [r3, #48]	; 0x30
 80005d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d4:	f002 0202 	and.w	r2, r2, #2
 80005d8:	9205      	str	r2, [sp, #20]
 80005da:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005dc:	9406      	str	r4, [sp, #24]
 80005de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e0:	f042 0208 	orr.w	r2, r2, #8
 80005e4:	631a      	str	r2, [r3, #48]	; 0x30
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	f003 0308 	and.w	r3, r3, #8
 80005ec:	9306      	str	r3, [sp, #24]
 80005ee:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005f0:	4f45      	ldr	r7, [pc, #276]	; (8000708 <MX_GPIO_Init+0x1a4>)
 80005f2:	4622      	mov	r2, r4
 80005f4:	2108      	movs	r1, #8
 80005f6:	4638      	mov	r0, r7
 80005f8:	f000 fff2 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005fc:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800070c <MX_GPIO_Init+0x1a8>
 8000600:	2201      	movs	r2, #1
 8000602:	4611      	mov	r1, r2
 8000604:	4648      	mov	r0, r9
 8000606:	f000 ffeb 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800060a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8000710 <MX_GPIO_Init+0x1ac>
 800060e:	4622      	mov	r2, r4
 8000610:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000614:	4640      	mov	r0, r8
 8000616:	f000 ffe3 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6
                           PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800061a:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 800061e:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000620:	2603      	movs	r6, #3
 8000622:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000626:	a907      	add	r1, sp, #28
 8000628:	4638      	mov	r0, r7
 800062a:	f000 feef 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800062e:	2308      	movs	r3, #8
 8000630:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2501      	movs	r5, #1
 8000634:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800063a:	a907      	add	r1, sp, #28
 800063c:	4638      	mov	r0, r7
 800063e:	f000 fee5 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC2 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000642:	f643 73f6 	movw	r3, #16374	; 0x3ff6
 8000646:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000648:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	a907      	add	r1, sp, #28
 800064e:	4648      	mov	r0, r9
 8000650:	f000 fedc 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000654:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800065c:	a907      	add	r1, sp, #28
 800065e:	4648      	mov	r0, r9
 8000660:	f000 fed4 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000664:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000666:	f44f 1990 	mov.w	r9, #1179648	; 0x120000
 800066a:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000670:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8000714 <MX_GPIO_Init+0x1b0>
 8000674:	a907      	add	r1, sp, #28
 8000676:	4650      	mov	r0, sl
 8000678:	f000 fec8 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800067c:	f649 73f2 	movw	r3, #40946	; 0x9ff2
 8000680:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000682:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	a907      	add	r1, sp, #28
 8000688:	4650      	mov	r0, sl
 800068a:	f000 febf 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB13
                           PB14 PB15 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_13
 800068e:	f64e 33fb 	movw	r3, #60411	; 0xebfb
 8000692:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000694:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f50a 6a80 	add.w	sl, sl, #1024	; 0x400
 800069c:	a907      	add	r1, sp, #28
 800069e:	4650      	mov	r0, sl
 80006a0:	f000 feb4 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006a4:	2304      	movs	r3, #4
 80006a6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006ac:	a907      	add	r1, sp, #28
 80006ae:	4650      	mov	r0, sl
 80006b0:	f000 feac 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD0 PD1 PD2 PD3
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80006b4:	f640 73cf 	movw	r3, #4047	; 0xfcf
 80006b8:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ba:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006be:	a907      	add	r1, sp, #28
 80006c0:	4640      	mov	r0, r8
 80006c2:	f000 fea3 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006c6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006ca:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d2:	a907      	add	r1, sp, #28
 80006d4:	4640      	mov	r0, r8
 80006d6:	f000 fe99 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006da:	2320      	movs	r3, #32
 80006dc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006e2:	a907      	add	r1, sp, #28
 80006e4:	4640      	mov	r0, r8
 80006e6:	f000 fe91 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006ea:	2302      	movs	r3, #2
 80006ec:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ee:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006f4:	a907      	add	r1, sp, #28
 80006f6:	4638      	mov	r0, r7
 80006f8:	f000 fe88 	bl	800140c <HAL_GPIO_Init>

}
 80006fc:	b00c      	add	sp, #48	; 0x30
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40021000 	.word	0x40021000
 800070c:	40020800 	.word	0x40020800
 8000710:	40020c00 	.word	0x40020c00
 8000714:	40020000 	.word	0x40020000

08000718 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000718:	b508      	push	{r3, lr}
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800071a:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_I2S2_Init+0x34>)
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_I2S2_Init+0x38>)
 800071e:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000720:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000724:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_LSB;
 8000726:	2320      	movs	r3, #32
 8000728:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800072a:	2300      	movs	r3, #0
 800072c:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800072e:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000730:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000734:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8000736:	2208      	movs	r2, #8
 8000738:	6182      	str	r2, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800073a:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800073c:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800073e:	f000 ff5f 	bl	8001600 <HAL_I2S_Init>
 8000742:	b900      	cbnz	r0, 8000746 <MX_I2S2_Init+0x2e>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000744:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000746:	f000 f88d 	bl	8000864 <Error_Handler>
}
 800074a:	e7fb      	b.n	8000744 <MX_I2S2_Init+0x2c>
 800074c:	20000520 	.word	0x20000520
 8000750:	40003800 	.word	0x40003800

08000754 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000756:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	2300      	movs	r3, #0
 800075a:	9307      	str	r3, [sp, #28]
 800075c:	9308      	str	r3, [sp, #32]
 800075e:	9309      	str	r3, [sp, #36]	; 0x24
 8000760:	930a      	str	r3, [sp, #40]	; 0x28
 8000762:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000764:	9306      	str	r3, [sp, #24]
  if(i2sHandle->Instance==SPI2)
 8000766:	6802      	ldr	r2, [r0, #0]
 8000768:	4b38      	ldr	r3, [pc, #224]	; (800084c <HAL_I2S_MspInit+0xf8>)
 800076a:	429a      	cmp	r2, r3
 800076c:	d001      	beq.n	8000772 <HAL_I2S_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800076e:	b00d      	add	sp, #52	; 0x34
 8000770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000772:	4604      	mov	r4, r0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000774:	2301      	movs	r3, #1
 8000776:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000778:	23c0      	movs	r3, #192	; 0xc0
 800077a:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000780:	a803      	add	r0, sp, #12
 8000782:	f001 fe1d 	bl	80023c0 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	2800      	cmp	r0, #0
 8000788:	d159      	bne.n	800083e <HAL_I2S_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800078a:	2500      	movs	r5, #0
 800078c:	9500      	str	r5, [sp, #0]
 800078e:	4b30      	ldr	r3, [pc, #192]	; (8000850 <HAL_I2S_MspInit+0xfc>)
 8000790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000796:	641a      	str	r2, [r3, #64]	; 0x40
 8000798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800079a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800079e:	9200      	str	r2, [sp, #0]
 80007a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	9501      	str	r5, [sp, #4]
 80007a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a6:	f042 0204 	orr.w	r2, r2, #4
 80007aa:	631a      	str	r2, [r3, #48]	; 0x30
 80007ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ae:	f002 0204 	and.w	r2, r2, #4
 80007b2:	9201      	str	r2, [sp, #4]
 80007b4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	9502      	str	r5, [sp, #8]
 80007b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ba:	f042 0202 	orr.w	r2, r2, #2
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ca:	2308      	movs	r3, #8
 80007cc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2702      	movs	r7, #2
 80007d0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007d6:	2605      	movs	r6, #5
 80007d8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007da:	a907      	add	r1, sp, #28
 80007dc:	481d      	ldr	r0, [pc, #116]	; (8000854 <HAL_I2S_MspInit+0x100>)
 80007de:	f000 fe15 	bl	800140c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80007e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ee:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	a907      	add	r1, sp, #28
 80007f2:	4819      	ldr	r0, [pc, #100]	; (8000858 <HAL_I2S_MspInit+0x104>)
 80007f4:	f000 fe0a 	bl	800140c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80007f8:	4818      	ldr	r0, [pc, #96]	; (800085c <HAL_I2S_MspInit+0x108>)
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <HAL_I2S_MspInit+0x10c>)
 80007fc:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80007fe:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000800:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000802:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800080a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800080e:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081a:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800081c:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800081e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000820:	f000 fc0e 	bl	8001040 <HAL_DMA_Init>
 8000824:	b970      	cbnz	r0, 8000844 <HAL_I2S_MspInit+0xf0>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_I2S_MspInit+0x108>)
 8000828:	63e3      	str	r3, [r4, #60]	; 0x3c
 800082a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	4611      	mov	r1, r2
 8000830:	2024      	movs	r0, #36	; 0x24
 8000832:	f000 fb1d 	bl	8000e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000836:	2024      	movs	r0, #36	; 0x24
 8000838:	f000 fb4e 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
}
 800083c:	e797      	b.n	800076e <HAL_I2S_MspInit+0x1a>
      Error_Handler();
 800083e:	f000 f811 	bl	8000864 <Error_Handler>
 8000842:	e7a2      	b.n	800078a <HAL_I2S_MspInit+0x36>
      Error_Handler();
 8000844:	f000 f80e 	bl	8000864 <Error_Handler>
 8000848:	e7ed      	b.n	8000826 <HAL_I2S_MspInit+0xd2>
 800084a:	bf00      	nop
 800084c:	40003800 	.word	0x40003800
 8000850:	40023800 	.word	0x40023800
 8000854:	40020800 	.word	0x40020800
 8000858:	40020400 	.word	0x40020400
 800085c:	200004c0 	.word	0x200004c0
 8000860:	40026058 	.word	0x40026058

08000864 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000866:	e7fe      	b.n	8000866 <Error_Handler+0x2>

08000868 <SystemClock_Config>:
{
 8000868:	b500      	push	{lr}
 800086a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086c:	2230      	movs	r2, #48	; 0x30
 800086e:	2100      	movs	r1, #0
 8000870:	a808      	add	r0, sp, #32
 8000872:	f004 fe5f 	bl	8005534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000876:	2300      	movs	r3, #0
 8000878:	9303      	str	r3, [sp, #12]
 800087a:	9304      	str	r3, [sp, #16]
 800087c:	9305      	str	r3, [sp, #20]
 800087e:	9306      	str	r3, [sp, #24]
 8000880:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	4a21      	ldr	r2, [pc, #132]	; (800090c <SystemClock_Config+0xa4>)
 8000886:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000888:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800088c:	6411      	str	r1, [r2, #64]	; 0x40
 800088e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000890:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000894:	9201      	str	r2, [sp, #4]
 8000896:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	9302      	str	r3, [sp, #8]
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <SystemClock_Config+0xa8>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008c0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c2:	2208      	movs	r2, #8
 80008c4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c6:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80008ca:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008cc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008ce:	2307      	movs	r3, #7
 80008d0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	a808      	add	r0, sp, #32
 80008d4:	f001 fa3c 	bl	8001d50 <HAL_RCC_OscConfig>
 80008d8:	b998      	cbnz	r0, 8000902 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ea:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f2:	2105      	movs	r1, #5
 80008f4:	a803      	add	r0, sp, #12
 80008f6:	f001 fc8d 	bl	8002214 <HAL_RCC_ClockConfig>
 80008fa:	b920      	cbnz	r0, 8000906 <SystemClock_Config+0x9e>
}
 80008fc:	b015      	add	sp, #84	; 0x54
 80008fe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000902:	f7ff ffaf 	bl	8000864 <Error_Handler>
    Error_Handler();
 8000906:	f7ff ffad 	bl	8000864 <Error_Handler>
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b500      	push	{lr}
 8000916:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000918:	2100      	movs	r1, #0
 800091a:	9100      	str	r1, [sp, #0]
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_MspInit+0x3c>)
 800091e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000920:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000924:	645a      	str	r2, [r3, #68]	; 0x44
 8000926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000928:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800092c:	9200      	str	r2, [sp, #0]
 800092e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000930:	9101      	str	r1, [sp, #4]
 8000932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000934:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000938:	641a      	str	r2, [r3, #64]	; 0x40
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000944:	2007      	movs	r0, #7
 8000946:	f000 fa81 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	b003      	add	sp, #12
 800094c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000950:	40023800 	.word	0x40023800

08000954 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler>

08000956 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler>

08000958 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler>

0800095a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler>

0800095c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler>

0800095e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000966:	f000 fa4b 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096a:	bd08      	pop	{r3, pc}

0800096c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800096c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800096e:	4802      	ldr	r0, [pc, #8]	; (8000978 <DMA1_Stream3_IRQHandler+0xc>)
 8000970:	f000 fc5e 	bl	8001230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000974:	bd08      	pop	{r3, pc}
 8000976:	bf00      	nop
 8000978:	200004c0 	.word	0x200004c0

0800097c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800097c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800097e:	4802      	ldr	r0, [pc, #8]	; (8000988 <DMA1_Stream5_IRQHandler+0xc>)
 8000980:	f000 fc56 	bl	8001230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000984:	bd08      	pop	{r3, pc}
 8000986:	bf00      	nop
 8000988:	20000568 	.word	0x20000568

0800098c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800098c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800098e:	4802      	ldr	r0, [pc, #8]	; (8000998 <DMA1_Stream6_IRQHandler+0xc>)
 8000990:	f000 fc4e 	bl	8001230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000994:	bd08      	pop	{r3, pc}
 8000996:	bf00      	nop
 8000998:	200005c8 	.word	0x200005c8

0800099c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800099c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800099e:	4802      	ldr	r0, [pc, #8]	; (80009a8 <SPI2_IRQHandler+0xc>)
 80009a0:	f000 ff78 	bl	8001894 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80009a4:	bd08      	pop	{r3, pc}
 80009a6:	bf00      	nop
 80009a8:	20000520 	.word	0x20000520

080009ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009ae:	4802      	ldr	r0, [pc, #8]	; (80009b8 <USART2_IRQHandler+0xc>)
 80009b0:	f002 f844 	bl	8002a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009b4:	bd08      	pop	{r3, pc}
 80009b6:	bf00      	nop
 80009b8:	20000628 	.word	0x20000628

080009bc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80009bc:	2001      	movs	r0, #1
 80009be:	4770      	bx	lr

080009c0 <_kill>:

int _kill(int pid, int sig)
{
 80009c0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80009c2:	f004 fd85 	bl	80054d0 <__errno>
 80009c6:	2316      	movs	r3, #22
 80009c8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80009ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ce:	bd08      	pop	{r3, pc}

080009d0 <_exit>:

void _exit (int status)
{
 80009d0:	b508      	push	{r3, lr}
	_kill(status, -1);
 80009d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009d6:	f7ff fff3 	bl	80009c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009da:	e7fe      	b.n	80009da <_exit+0xa>

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b508      	push	{r3, lr}
 80009de:	4603      	mov	r3, r0
  extern uint8_t _eheap; /* Symbol defined in the linker script */
  const uint8_t *max_heap = (uint8_t*)&_eheap;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <_sbrk+0x34>)
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	b142      	cbz	r2, 80009f8 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <_sbrk+0x34>)
 80009e8:	6810      	ldr	r0, [r2, #0]
 80009ea:	4403      	add	r3, r0
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <_sbrk+0x38>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d806      	bhi.n	8000a00 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80009f2:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <_sbrk+0x34>)
 80009f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80009f6:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80009f8:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <_sbrk+0x34>)
 80009fa:	4907      	ldr	r1, [pc, #28]	; (8000a18 <_sbrk+0x3c>)
 80009fc:	6011      	str	r1, [r2, #0]
 80009fe:	e7f2      	b.n	80009e6 <_sbrk+0xa>
    errno = ENOMEM;
 8000a00:	f004 fd66 	bl	80054d0 <__errno>
 8000a04:	230c      	movs	r3, #12
 8000a06:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a0c:	e7f3      	b.n	80009f6 <_sbrk+0x1a>
 8000a0e:	bf00      	nop
 8000a10:	20000494 	.word	0x20000494
 8000a14:	20020000 	.word	0x20020000
 8000a18:	200006d8 	.word	0x200006d8

08000a1c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <SystemInit+0x10>)
 8000a1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000a22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a30:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a32:	480a      	ldr	r0, [pc, #40]	; (8000a5c <MX_USART2_UART_Init+0x2c>)
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_USART2_UART_Init+0x30>)
 8000a36:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 576000;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_USART2_UART_Init+0x34>)
 8000a3a:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	220c      	movs	r2, #12
 8000a46:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a48:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4c:	f001 fe98 	bl	8002780 <HAL_UART_Init>
 8000a50:	b900      	cbnz	r0, 8000a54 <MX_USART2_UART_Init+0x24>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a52:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a54:	f7ff ff06 	bl	8000864 <Error_Handler>
}
 8000a58:	e7fb      	b.n	8000a52 <MX_USART2_UART_Init+0x22>
 8000a5a:	bf00      	nop
 8000a5c:	20000628 	.word	0x20000628
 8000a60:	40004400 	.word	0x40004400
 8000a64:	0008ca00 	.word	0x0008ca00

08000a68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a68:	b530      	push	{r4, r5, lr}
 8000a6a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	9303      	str	r3, [sp, #12]
 8000a70:	9304      	str	r3, [sp, #16]
 8000a72:	9305      	str	r3, [sp, #20]
 8000a74:	9306      	str	r3, [sp, #24]
 8000a76:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000a78:	6802      	ldr	r2, [r0, #0]
 8000a7a:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <HAL_UART_MspInit+0xe0>)
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d001      	beq.n	8000a84 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a80:	b009      	add	sp, #36	; 0x24
 8000a82:	bd30      	pop	{r4, r5, pc}
 8000a84:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a86:	2500      	movs	r5, #0
 8000a88:	9501      	str	r5, [sp, #4]
 8000a8a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40
 8000a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a98:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000a9c:	9201      	str	r2, [sp, #4]
 8000a9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	9502      	str	r5, [sp, #8]
 8000aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aa4:	f042 0201 	orr.w	r2, r2, #1
 8000aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	a903      	add	r1, sp, #12
 8000ac8:	4820      	ldr	r0, [pc, #128]	; (8000b4c <HAL_UART_MspInit+0xe4>)
 8000aca:	f000 fc9f 	bl	800140c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ace:	4820      	ldr	r0, [pc, #128]	; (8000b50 <HAL_UART_MspInit+0xe8>)
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_UART_MspInit+0xec>)
 8000ad2:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ad4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ad8:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ada:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000adc:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae2:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ae4:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae6:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ae8:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aea:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aec:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000aee:	f000 faa7 	bl	8001040 <HAL_DMA_Init>
 8000af2:	bb18      	cbnz	r0, 8000b3c <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_MspInit+0xe8>)
 8000af6:	63a3      	str	r3, [r4, #56]	; 0x38
 8000af8:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000afa:	4817      	ldr	r0, [pc, #92]	; (8000b58 <HAL_UART_MspInit+0xf0>)
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0xf4>)
 8000afe:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000b00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b04:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b12:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b14:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b16:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b18:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b1a:	6203      	str	r3, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b1c:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b1e:	f000 fa8f 	bl	8001040 <HAL_DMA_Init>
 8000b22:	b970      	cbnz	r0, 8000b42 <HAL_UART_MspInit+0xda>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_UART_MspInit+0xf0>)
 8000b26:	6363      	str	r3, [r4, #52]	; 0x34
 8000b28:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	2026      	movs	r0, #38	; 0x26
 8000b30:	f000 f99e 	bl	8000e70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b34:	2026      	movs	r0, #38	; 0x26
 8000b36:	f000 f9cf 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
}
 8000b3a:	e7a1      	b.n	8000a80 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8000b3c:	f7ff fe92 	bl	8000864 <Error_Handler>
 8000b40:	e7d8      	b.n	8000af4 <HAL_UART_MspInit+0x8c>
      Error_Handler();
 8000b42:	f7ff fe8f 	bl	8000864 <Error_Handler>
 8000b46:	e7ed      	b.n	8000b24 <HAL_UART_MspInit+0xbc>
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	20000568 	.word	0x20000568
 8000b54:	40026088 	.word	0x40026088
 8000b58:	200005c8 	.word	0x200005c8
 8000b5c:	400260a0 	.word	0x400260a0

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ff47 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f004 fca5 	bl	80054dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f000 f829 	bl	8000be8 <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b98:	10010000 	.word	0x10010000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000474 	.word	0x20000474
  ldr r2, =_sidata
 8000ba4:	08005760 	.word	0x08005760
  ldr r2, =_sbss
 8000ba8:	20000474 	.word	0x20000474
  ldr r4, =_ebss
 8000bac:	200006d4 	.word	0x200006d4

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <_Z8PDMToPCMPtS_>:
uint16_t* obuffer = nullptr;

uint8_t dummy = 0;

uint8_t PDMToPCM(uint16_t* pdmBuff, uint16_t* pcmBuff)
{
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
	uint16_t input[INPUT_SIZE/2];

	for(int index = 0; index < INPUT_SIZE/2; ++index)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2bff      	cmp	r3, #255	; 0xff
 8000bbe:	dc08      	bgt.n	8000bd2 <_Z8PDMToPCMPtS_+0x1e>
	{
		input[index] = HTONS(pdmBuff[index]);
 8000bc0:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 8000bc4:	0222      	lsls	r2, r4, #8
 8000bc6:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8000bca:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
	for(int index = 0; index < INPUT_SIZE/2; ++index)
 8000bce:	3301      	adds	r3, #1
 8000bd0:	e7f4      	b.n	8000bbc <_Z8PDMToPCMPtS_+0x8>
	}

	return PDM_Filter(input, pcmBuff, &PDM1_filter_handler);
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <_Z8PDMToPCMPtS_+0x30>)
 8000bd4:	4668      	mov	r0, sp
 8000bd6:	f003 ff93 	bl	8004b00 <PDM_Filter>
}
 8000bda:	b2c0      	uxtb	r0, r0
 8000bdc:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	bf00      	nop
 8000be4:	20000678 	.word	0x20000678

08000be8 <main>:

int main(void)
{
 8000be8:	b508      	push	{r3, lr}
	/* FPU initialization */
	SCB->CPACR |= ((3 << 10*2) | (3 << 11*2));
 8000bea:	4a2b      	ldr	r2, [pc, #172]	; (8000c98 <main+0xb0>)
 8000bec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	ibuffer = new uint16_t[isize];
 8000bf8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bfc:	f003 ffda 	bl	8004bb4 <_Znaj>
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <main+0xb4>)
 8000c02:	6018      	str	r0, [r3, #0]
	obuffer = new uint16_t[osize];
 8000c04:	2080      	movs	r0, #128	; 0x80
 8000c06:	f003 ffd5 	bl	8004bb4 <_Znaj>
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <main+0xb8>)
 8000c0c:	6018      	str	r0, [r3, #0]

	for (size_t i = 0; i < osize; ++i) obuffer[i] = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2b3f      	cmp	r3, #63	; 0x3f
 8000c12:	d806      	bhi.n	8000c22 <main+0x3a>
 8000c14:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <main+0xb8>)
 8000c16:	6812      	ldr	r2, [r2, #0]
 8000c18:	2100      	movs	r1, #0
 8000c1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	e7f6      	b.n	8000c10 <main+0x28>
	for (size_t i = 0; i < isize; ++i) ibuffer[i] = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c28:	d206      	bcs.n	8000c38 <main+0x50>
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <main+0xb4>)
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c34:	3301      	adds	r3, #1
 8000c36:	e7f5      	b.n	8000c24 <main+0x3c>

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c38:	f000 f8c8 	bl	8000dcc <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000c3c:	f7ff fe14 	bl	8000868 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c40:	f7ff fc90 	bl	8000564 <MX_GPIO_Init>
	MX_DMA_Init();
 8000c44:	f7ff fc64 	bl	8000510 <MX_DMA_Init>
	MX_I2S2_Init();
 8000c48:	f7ff fd66 	bl	8000718 <MX_I2S2_Init>
	MX_USART2_UART_Init();
 8000c4c:	f7ff fef0 	bl	8000a30 <MX_USART2_UART_Init>
	MX_CRC_Init();
 8000c50:	f7ff fc36 	bl	80004c0 <MX_CRC_Init>
	MX_PDM2PCM_Init();
 8000c54:	f002 f86a 	bl	8002d2c <MX_PDM2PCM_Init>

	HAL_Delay(1000);
 8000c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5c:	f000 f8e2 	bl	8000e24 <HAL_Delay>
	HAL_I2S_Receive_DMA(&hi2s2, ibuffer, isize);
 8000c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <main+0xb4>)
 8000c66:	6819      	ldr	r1, [r3, #0]
 8000c68:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <main+0xbc>)
 8000c6a:	f000 fd95 	bl	8001798 <HAL_I2S_Receive_DMA>

	HAL_UART_Receive_IT(&huart2, &dummy, 1);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <main+0xc0>)
 8000c72:	480e      	ldr	r0, [pc, #56]	; (8000cac <main+0xc4>)
 8000c74:	f002 f83d 	bl	8002cf2 <HAL_UART_Receive_IT>
 8000c78:	e009      	b.n	8000c8e <main+0xa6>

	while (1) if (doReq)
	{
		HAL_Delay(1000);
 8000c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7e:	f000 f8d1 	bl	8000e24 <HAL_Delay>

		doReq = 0;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <main+0xc8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
		doSend = 4;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <main+0xcc>)
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	601a      	str	r2, [r3, #0]
	while (1) if (doReq)
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <main+0xc8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0fb      	beq.n	8000c8e <main+0xa6>
 8000c96:	e7f0      	b.n	8000c7a <main+0x92>
 8000c98:	e000ed00 	.word	0xe000ed00
 8000c9c:	200004a4 	.word	0x200004a4
 8000ca0:	200004a8 	.word	0x200004a8
 8000ca4:	20000520 	.word	0x20000520
 8000ca8:	200004a0 	.word	0x200004a0
 8000cac:	20000628 	.word	0x20000628
 8000cb0:	20000498 	.word	0x20000498
 8000cb4:	2000049c 	.word	0x2000049c

08000cb8 <HAL_I2S_RxHalfCpltCallback>:
	}
}

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cb8:	b508      	push	{r3, lr}
	PDMToPCM(ibuffer, obuffer);
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_I2S_RxHalfCpltCallback+0x30>)
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	f7ff ff77 	bl	8000bb4 <_Z8PDMToPCMPtS_>

	if (doSend)
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_I2S_RxHalfCpltCallback+0x34>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	b903      	cbnz	r3, 8000cce <HAL_I2S_RxHalfCpltCallback+0x16>
	{
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) obuffer, osize*2);
		--doSend;
	}
}
 8000ccc:	bd08      	pop	{r3, pc}
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) obuffer, osize*2);
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000cd6:	f001 fd83 	bl	80027e0 <HAL_UART_Transmit_DMA>
		--doSend;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_I2S_RxHalfCpltCallback+0x34>)
 8000cdc:	6813      	ldr	r3, [r2, #0]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6013      	str	r3, [r2, #0]
}
 8000ce2:	e7f3      	b.n	8000ccc <HAL_I2S_RxHalfCpltCallback+0x14>
 8000ce4:	200004a8 	.word	0x200004a8
 8000ce8:	200004a4 	.word	0x200004a4
 8000cec:	2000049c 	.word	0x2000049c
 8000cf0:	20000628 	.word	0x20000628

08000cf4 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cf4:	b508      	push	{r3, lr}
	PDMToPCM(ibuffer + isize/2, obuffer);
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_I2S_RxCpltCallback+0x30>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_I2S_RxCpltCallback+0x34>)
 8000cfc:	6819      	ldr	r1, [r3, #0]
 8000cfe:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8000d02:	f7ff ff57 	bl	8000bb4 <_Z8PDMToPCMPtS_>

	if (doSend)
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_I2S_RxCpltCallback+0x38>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b903      	cbnz	r3, 8000d0e <HAL_I2S_RxCpltCallback+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) obuffer, osize*2);
		--doSend;
	}
}
 8000d0c:	bd08      	pop	{r3, pc}
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) obuffer, osize*2);
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_I2S_RxCpltCallback+0x34>)
 8000d12:	6819      	ldr	r1, [r3, #0]
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_I2S_RxCpltCallback+0x3c>)
 8000d16:	f001 fd63 	bl	80027e0 <HAL_UART_Transmit_DMA>
		--doSend;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_I2S_RxCpltCallback+0x38>)
 8000d1c:	6813      	ldr	r3, [r2, #0]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	e7f3      	b.n	8000d0c <HAL_I2S_RxCpltCallback+0x18>
 8000d24:	200004a4 	.word	0x200004a4
 8000d28:	200004a8 	.word	0x200004a8
 8000d2c:	2000049c 	.word	0x2000049c
 8000d30:	20000628 	.word	0x20000628

08000d34 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d34:	b510      	push	{r4, lr}
 8000d36:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000d38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <HAL_UART_RxCpltCallback+0x28>)
 8000d3e:	f000 fc55 	bl	80015ec <HAL_GPIO_TogglePin>

	HAL_UART_Receive_IT(huart, &dummy, 1);
 8000d42:	2201      	movs	r2, #1
 8000d44:	4906      	ldr	r1, [pc, #24]	; (8000d60 <HAL_UART_RxCpltCallback+0x2c>)
 8000d46:	4620      	mov	r0, r4
 8000d48:	f001 ffd3 	bl	8002cf2 <HAL_UART_Receive_IT>

	if (!doSend) doReq = 1;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_UART_RxCpltCallback+0x30>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	b913      	cbnz	r3, 8000d58 <HAL_UART_RxCpltCallback+0x24>
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_UART_RxCpltCallback+0x34>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bd10      	pop	{r4, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40020c00 	.word	0x40020c00
 8000d60:	200004a0 	.word	0x200004a0
 8000d64:	2000049c 	.word	0x2000049c
 8000d68:	20000498 	.word	0x20000498

08000d6c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d6c:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000d6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d72:	4802      	ldr	r0, [pc, #8]	; (8000d7c <HAL_UART_TxCpltCallback+0x10>)
 8000d74:	f000 fc3a 	bl	80015ec <HAL_GPIO_TogglePin>
}
 8000d78:	bd08      	pop	{r3, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b510      	push	{r4, lr}
 8000d82:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_InitTick+0x40>)
 8000d86:	7818      	ldrb	r0, [r3, #0]
 8000d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <HAL_InitTick+0x44>)
 8000d92:	6810      	ldr	r0, [r2, #0]
 8000d94:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d98:	f000 f8ac 	bl	8000ef4 <HAL_SYSTICK_Config>
 8000d9c:	b968      	cbnz	r0, 8000dba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	2c0f      	cmp	r4, #15
 8000da0:	d901      	bls.n	8000da6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000da2:	2001      	movs	r0, #1
 8000da4:	e00a      	b.n	8000dbc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da6:	2200      	movs	r2, #0
 8000da8:	4621      	mov	r1, r4
 8000daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dae:	f000 f85f 	bl	8000e70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_InitTick+0x48>)
 8000db4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2000      	movs	r0, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
}
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000404 	.word	0x20000404
 8000dc4:	20000400 	.word	0x20000400
 8000dc8:	20000408 	.word	0x20000408

08000dcc <HAL_Init>:
{
 8000dcc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x30>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dd6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dde:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000de6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f82f 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff ffc6 	bl	8000d80 <HAL_InitTick>
  HAL_MspInit();
 8000df4:	f7ff fd8e 	bl	8000914 <HAL_MspInit>
}
 8000df8:	2000      	movs	r0, #0
 8000dfa:	bd08      	pop	{r3, pc}
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_IncTick+0x10>)
 8000e02:	6811      	ldr	r1, [r2, #0]
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_IncTick+0x14>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	440b      	add	r3, r1
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000066c 	.word	0x2000066c
 8000e14:	20000404 	.word	0x20000404

08000e18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e18:	4b01      	ldr	r3, [pc, #4]	; (8000e20 <HAL_GetTick+0x8>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	2000066c 	.word	0x2000066c

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b538      	push	{r3, r4, r5, lr}
 8000e26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff fff6 	bl	8000e18 <HAL_GetTick>
 8000e2c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000e32:	d002      	beq.n	8000e3a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <HAL_Delay+0x24>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	f7ff ffed 	bl	8000e18 <HAL_GetTick>
 8000e3e:	1b40      	subs	r0, r0, r5
 8000e40:	42a0      	cmp	r0, r4
 8000e42:	d3fa      	bcc.n	8000e3a <HAL_Delay+0x16>
  {
  }
}
 8000e44:	bd38      	pop	{r3, r4, r5, pc}
 8000e46:	bf00      	nop
 8000e48:	20000404 	.word	0x20000404

08000e4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	0200      	lsls	r0, r0, #8
 8000e5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000e68:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e70:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_NVIC_SetPriority+0x60>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7a:	f1c3 0407 	rsb	r4, r3, #7
 8000e7e:	2c04      	cmp	r4, #4
 8000e80:	bf28      	it	cs
 8000e82:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e84:	1d1d      	adds	r5, r3, #4
 8000e86:	2d06      	cmp	r5, #6
 8000e88:	d918      	bls.n	8000ebc <HAL_NVIC_SetPriority+0x4c>
 8000e8a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000e90:	fa05 f404 	lsl.w	r4, r5, r4
 8000e94:	ea21 0104 	bic.w	r1, r1, r4
 8000e98:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9a:	fa05 f303 	lsl.w	r3, r5, r3
 8000e9e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	db0b      	blt.n	8000ec0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	0109      	lsls	r1, r1, #4
 8000eaa:	b2c9      	uxtb	r1, r1
 8000eac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000eb0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000eb4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000eb8:	bc30      	pop	{r4, r5}
 8000eba:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e7e5      	b.n	8000e8c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	f000 000f 	and.w	r0, r0, #15
 8000ec4:	0109      	lsls	r1, r1, #4
 8000ec6:	b2c9      	uxtb	r1, r1
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <HAL_NVIC_SetPriority+0x64>)
 8000eca:	5419      	strb	r1, [r3, r0]
 8000ecc:	e7f4      	b.n	8000eb8 <HAL_NVIC_SetPriority+0x48>
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	e000ed14 	.word	0xe000ed14

08000ed8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	db07      	blt.n	8000eec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000edc:	f000 021f 	and.w	r2, r0, #31
 8000ee0:	0940      	lsrs	r0, r0, #5
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	4a02      	ldr	r2, [pc, #8]	; (8000ef0 <HAL_NVIC_EnableIRQ+0x18>)
 8000ee8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000efa:	d20a      	bcs.n	8000f12 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_SYSTICK_Config+0x24>)
 8000efe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_SYSTICK_Config+0x28>)
 8000f02:	21f0      	movs	r1, #240	; 0xf0
 8000f04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	2000      	movs	r0, #0
 8000f0a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f20:	b158      	cbz	r0, 8000f3a <HAL_CRC_Init+0x1a>
{
 8000f22:	b510      	push	{r4, lr}
 8000f24:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f26:	7943      	ldrb	r3, [r0, #5]
 8000f28:	b11b      	cbz	r3, 8000f32 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8000f2e:	2000      	movs	r0, #0
}
 8000f30:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8000f32:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8000f34:	f7ff fad4 	bl	80004e0 <HAL_CRC_MspInit>
 8000f38:	e7f7      	b.n	8000f2a <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8000f3a:	2001      	movs	r0, #1
}
 8000f3c:	4770      	bx	lr

08000f3e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f3e:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000f40:	6805      	ldr	r5, [r0, #0]
 8000f42:	682c      	ldr	r4, [r5, #0]
 8000f44:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000f48:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000f4a:	6804      	ldr	r4, [r0, #0]
 8000f4c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f4e:	6883      	ldr	r3, [r0, #8]
 8000f50:	2b40      	cmp	r3, #64	; 0x40
 8000f52:	d005      	beq.n	8000f60 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000f54:	6803      	ldr	r3, [r0, #0]
 8000f56:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000f58:	6803      	ldr	r3, [r0, #0]
 8000f5a:	60da      	str	r2, [r3, #12]
  }
}
 8000f5c:	bc30      	pop	{r4, r5}
 8000f5e:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000f60:	6803      	ldr	r3, [r0, #0]
 8000f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000f64:	6803      	ldr	r3, [r0, #0]
 8000f66:	60d9      	str	r1, [r3, #12]
 8000f68:	e7f8      	b.n	8000f5c <DMA_SetConfig+0x1e>
	...

08000f6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f6e:	6803      	ldr	r3, [r0, #0]
 8000f70:	b2d9      	uxtb	r1, r3
 8000f72:	3910      	subs	r1, #16
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <DMA_CalcBaseAndBitshift+0x3c>)
 8000f76:	fba2 4201 	umull	r4, r2, r2, r1
 8000f7a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	; (8000fac <DMA_CalcBaseAndBitshift+0x40>)
 8000f7e:	5ca2      	ldrb	r2, [r4, r2]
 8000f80:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000f82:	295f      	cmp	r1, #95	; 0x5f
 8000f84:	d909      	bls.n	8000f9a <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f8a:	f023 0303 	bic.w	r3, r3, #3
 8000f8e:	3304      	adds	r3, #4
 8000f90:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000f92:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f98:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f9e:	f023 0303 	bic.w	r3, r3, #3
 8000fa2:	6583      	str	r3, [r0, #88]	; 0x58
 8000fa4:	e7f5      	b.n	8000f92 <DMA_CalcBaseAndBitshift+0x26>
 8000fa6:	bf00      	nop
 8000fa8:	aaaaaaab 	.word	0xaaaaaaab
 8000fac:	08005724 	.word	0x08005724

08000fb0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000fb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000fb2:	6982      	ldr	r2, [r0, #24]
 8000fb4:	b992      	cbnz	r2, 8000fdc <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d00a      	beq.n	8000fd0 <DMA_CheckFifoParam+0x20>
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d002      	beq.n	8000fc4 <DMA_CheckFifoParam+0x14>
 8000fbe:	b10b      	cbz	r3, 8000fc4 <DMA_CheckFifoParam+0x14>
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000fc6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000fca:	d128      	bne.n	800101e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000fcc:	2000      	movs	r0, #0
 8000fce:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000fd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000fd6:	d024      	beq.n	8001022 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000fd8:	2000      	movs	r0, #0
 8000fda:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000fdc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000fe0:	d009      	beq.n	8000ff6 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d925      	bls.n	8001032 <DMA_CheckFifoParam+0x82>
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d125      	bne.n	8001036 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000fec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000ff0:	d123      	bne.n	800103a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	4770      	bx	lr
    switch (tmp)
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d803      	bhi.n	8001002 <DMA_CheckFifoParam+0x52>
 8000ffa:	e8df f003 	tbb	[pc, r3]
 8000ffe:	0414      	.short	0x0414
 8001000:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001002:	2000      	movs	r0, #0
 8001004:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001006:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001008:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800100c:	d10d      	bne.n	800102a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800100e:	2000      	movs	r0, #0
 8001010:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001012:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001014:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001018:	d009      	beq.n	800102e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800101a:	2000      	movs	r0, #0
 800101c:	4770      	bx	lr
        status = HAL_ERROR;
 800101e:	2001      	movs	r0, #1
 8001020:	4770      	bx	lr
        status = HAL_ERROR;
 8001022:	2001      	movs	r0, #1
 8001024:	4770      	bx	lr
      status = HAL_ERROR;
 8001026:	2001      	movs	r0, #1
 8001028:	4770      	bx	lr
        status = HAL_ERROR;
 800102a:	2001      	movs	r0, #1
 800102c:	4770      	bx	lr
        status = HAL_ERROR;
 800102e:	2001      	movs	r0, #1
 8001030:	4770      	bx	lr
      status = HAL_ERROR;
 8001032:	2001      	movs	r0, #1
 8001034:	4770      	bx	lr
    switch (tmp)
 8001036:	2000      	movs	r0, #0
 8001038:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800103a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800103c:	4770      	bx	lr
	...

08001040 <HAL_DMA_Init>:
{
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff fee8 	bl	8000e18 <HAL_GetTick>
  if(hdma == NULL)
 8001048:	2c00      	cmp	r4, #0
 800104a:	d05b      	beq.n	8001104 <HAL_DMA_Init+0xc4>
 800104c:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800104e:	2302      	movs	r3, #2
 8001050:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001054:	2300      	movs	r3, #0
 8001056:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800105a:	6822      	ldr	r2, [r4, #0]
 800105c:	6813      	ldr	r3, [r2, #0]
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	f012 0f01 	tst.w	r2, #1
 800106c:	d00a      	beq.n	8001084 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800106e:	f7ff fed3 	bl	8000e18 <HAL_GetTick>
 8001072:	1b43      	subs	r3, r0, r5
 8001074:	2b05      	cmp	r3, #5
 8001076:	d9f5      	bls.n	8001064 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001078:	2320      	movs	r3, #32
 800107a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800107c:	2003      	movs	r0, #3
 800107e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001082:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001084:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001086:	4820      	ldr	r0, [pc, #128]	; (8001108 <HAL_DMA_Init+0xc8>)
 8001088:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800108a:	6861      	ldr	r1, [r4, #4]
 800108c:	68a2      	ldr	r2, [r4, #8]
 800108e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001090:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001092:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001094:	6921      	ldr	r1, [r4, #16]
 8001096:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001098:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109c:	69a1      	ldr	r1, [r4, #24]
 800109e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a0:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a4:	6a21      	ldr	r1, [r4, #32]
 80010a6:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a8:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010ac:	2904      	cmp	r1, #4
 80010ae:	d01e      	beq.n	80010ee <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80010b0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80010b2:	6826      	ldr	r6, [r4, #0]
 80010b4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010b6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80010ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010bc:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d107      	bne.n	80010d2 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80010c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010c4:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010c8:	b11b      	cbz	r3, 80010d2 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff ff70 	bl	8000fb0 <DMA_CheckFifoParam>
 80010d0:	b990      	cbnz	r0, 80010f8 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80010d2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff ff49 	bl	8000f6c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010dc:	233f      	movs	r3, #63	; 0x3f
 80010de:	4093      	lsls	r3, r2
 80010e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e2:	2000      	movs	r0, #0
 80010e4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80010e6:	2301      	movs	r3, #1
 80010e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80010ec:	e7c9      	b.n	8001082 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80010f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80010f2:	4301      	orrs	r1, r0
 80010f4:	430a      	orrs	r2, r1
 80010f6:	e7db      	b.n	80010b0 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010f8:	2340      	movs	r3, #64	; 0x40
 80010fa:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80010fc:	2001      	movs	r0, #1
 80010fe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001102:	e7be      	b.n	8001082 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001104:	2001      	movs	r0, #1
 8001106:	e7bc      	b.n	8001082 <HAL_DMA_Init+0x42>
 8001108:	f010803f 	.word	0xf010803f

0800110c <HAL_DMA_Start_IT>:
{
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001110:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001112:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001116:	2801      	cmp	r0, #1
 8001118:	d02b      	beq.n	8001172 <HAL_DMA_Start_IT+0x66>
 800111a:	2001      	movs	r0, #1
 800111c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001120:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001124:	b2c0      	uxtb	r0, r0
 8001126:	2801      	cmp	r0, #1
 8001128:	d004      	beq.n	8001134 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800112a:	2300      	movs	r3, #0
 800112c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001130:	2002      	movs	r0, #2
}
 8001132:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001134:	2002      	movs	r0, #2
 8001136:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800113a:	2000      	movs	r0, #0
 800113c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff fefd 	bl	8000f3e <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001144:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001146:	233f      	movs	r3, #63	; 0x3f
 8001148:	4093      	lsls	r3, r2
 800114a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800114c:	6822      	ldr	r2, [r4, #0]
 800114e:	6813      	ldr	r3, [r2, #0]
 8001150:	f043 0316 	orr.w	r3, r3, #22
 8001154:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001158:	b123      	cbz	r3, 8001164 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800115a:	6822      	ldr	r2, [r4, #0]
 800115c:	6813      	ldr	r3, [r2, #0]
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001164:	6822      	ldr	r2, [r4, #0]
 8001166:	6813      	ldr	r3, [r2, #0]
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800116e:	2000      	movs	r0, #0
 8001170:	e7df      	b.n	8001132 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001172:	2002      	movs	r0, #2
 8001174:	e7dd      	b.n	8001132 <HAL_DMA_Start_IT+0x26>

08001176 <HAL_DMA_Abort>:
{
 8001176:	b570      	push	{r4, r5, r6, lr}
 8001178:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800117a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff fe4c 	bl	8000e18 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001180:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d006      	beq.n	8001198 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800118e:	2300      	movs	r3, #0
 8001190:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001194:	2001      	movs	r0, #1
}
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800119a:	6822      	ldr	r2, [r4, #0]
 800119c:	6813      	ldr	r3, [r2, #0]
 800119e:	f023 0316 	bic.w	r3, r3, #22
 80011a2:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a4:	6822      	ldr	r2, [r4, #0]
 80011a6:	6953      	ldr	r3, [r2, #20]
 80011a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011ac:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011b0:	b1e3      	cbz	r3, 80011ec <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011b2:	6822      	ldr	r2, [r4, #0]
 80011b4:	6813      	ldr	r3, [r2, #0]
 80011b6:	f023 0308 	bic.w	r3, r3, #8
 80011ba:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80011bc:	6822      	ldr	r2, [r4, #0]
 80011be:	6813      	ldr	r3, [r2, #0]
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f013 0f01 	tst.w	r3, #1
 80011ce:	d011      	beq.n	80011f4 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011d0:	f7ff fe22 	bl	8000e18 <HAL_GetTick>
 80011d4:	1b43      	subs	r3, r0, r5
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d9f5      	bls.n	80011c6 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011da:	2320      	movs	r3, #32
 80011dc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011de:	2003      	movs	r0, #3
 80011e0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80011e4:	2300      	movs	r3, #0
 80011e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80011ea:	e7d4      	b.n	8001196 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1df      	bne.n	80011b2 <HAL_DMA_Abort+0x3c>
 80011f2:	e7e3      	b.n	80011bc <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011f6:	233f      	movs	r3, #63	; 0x3f
 80011f8:	4093      	lsls	r3, r2
 80011fa:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80011fc:	2301      	movs	r3, #1
 80011fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001202:	2000      	movs	r0, #0
 8001204:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8001208:	e7c5      	b.n	8001196 <HAL_DMA_Abort+0x20>

0800120a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d003      	beq.n	800121c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001218:	2001      	movs	r0, #1
 800121a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800121c:	2305      	movs	r3, #5
 800121e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001222:	6802      	ldr	r2, [r0, #0]
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800122c:	2000      	movs	r0, #0
}
 800122e:	4770      	bx	lr

08001230 <HAL_DMA_IRQHandler>:
{
 8001230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001232:	b083      	sub	sp, #12
 8001234:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800123a:	4b72      	ldr	r3, [pc, #456]	; (8001404 <HAL_DMA_IRQHandler+0x1d4>)
 800123c:	681d      	ldr	r5, [r3, #0]
 800123e:	4b72      	ldr	r3, [pc, #456]	; (8001408 <HAL_DMA_IRQHandler+0x1d8>)
 8001240:	fba3 3505 	umull	r3, r5, r3, r5
 8001244:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001246:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001248:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800124a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800124c:	2308      	movs	r3, #8
 800124e:	4093      	lsls	r3, r2
 8001250:	4233      	tst	r3, r6
 8001252:	d010      	beq.n	8001276 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001254:	6803      	ldr	r3, [r0, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	f012 0f04 	tst.w	r2, #4
 800125c:	d00b      	beq.n	8001276 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	f022 0204 	bic.w	r2, r2, #4
 8001264:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001266:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001268:	2308      	movs	r3, #8
 800126a:	4093      	lsls	r3, r2
 800126c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800126e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001276:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001278:	2301      	movs	r3, #1
 800127a:	4093      	lsls	r3, r2
 800127c:	4233      	tst	r3, r6
 800127e:	d009      	beq.n	8001294 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001280:	6822      	ldr	r2, [r4, #0]
 8001282:	6952      	ldr	r2, [r2, #20]
 8001284:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001288:	d004      	beq.n	8001294 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800128a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800128c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001294:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001296:	2304      	movs	r3, #4
 8001298:	4093      	lsls	r3, r2
 800129a:	4233      	tst	r3, r6
 800129c:	d009      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800129e:	6822      	ldr	r2, [r4, #0]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	f012 0f02 	tst.w	r2, #2
 80012a6:	d004      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012a8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012b4:	2310      	movs	r3, #16
 80012b6:	4093      	lsls	r3, r2
 80012b8:	4233      	tst	r3, r6
 80012ba:	d024      	beq.n	8001306 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012bc:	6822      	ldr	r2, [r4, #0]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	f012 0f08 	tst.w	r2, #8
 80012c4:	d01f      	beq.n	8001306 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012c6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80012d0:	d00d      	beq.n	80012ee <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80012d8:	d104      	bne.n	80012e4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80012da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012dc:	b19b      	cbz	r3, 8001306 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80012de:	4620      	mov	r0, r4
 80012e0:	4798      	blx	r3
 80012e2:	e010      	b.n	8001306 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012e6:	b173      	cbz	r3, 8001306 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80012e8:	4620      	mov	r0, r4
 80012ea:	4798      	blx	r3
 80012ec:	e00b      	b.n	8001306 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80012f4:	d103      	bne.n	80012fe <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f022 0208 	bic.w	r2, r2, #8
 80012fc:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80012fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001300:	b10b      	cbz	r3, 8001306 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001302:	4620      	mov	r0, r4
 8001304:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001306:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001308:	2320      	movs	r3, #32
 800130a:	4093      	lsls	r3, r2
 800130c:	4233      	tst	r3, r6
 800130e:	d055      	beq.n	80013bc <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001310:	6822      	ldr	r2, [r4, #0]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	f012 0f10 	tst.w	r2, #16
 8001318:	d050      	beq.n	80013bc <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800131a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800131c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b05      	cmp	r3, #5
 8001324:	d00e      	beq.n	8001344 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800132e:	d033      	beq.n	8001398 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001336:	d12a      	bne.n	800138e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001338:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800133a:	2b00      	cmp	r3, #0
 800133c:	d03e      	beq.n	80013bc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800133e:	4620      	mov	r0, r4
 8001340:	4798      	blx	r3
 8001342:	e03b      	b.n	80013bc <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001344:	6822      	ldr	r2, [r4, #0]
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f023 0316 	bic.w	r3, r3, #22
 800134c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800134e:	6822      	ldr	r2, [r4, #0]
 8001350:	6953      	ldr	r3, [r2, #20]
 8001352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001356:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001358:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800135a:	b1a3      	cbz	r3, 8001386 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800135c:	6822      	ldr	r2, [r4, #0]
 800135e:	6813      	ldr	r3, [r2, #0]
 8001360:	f023 0308 	bic.w	r3, r3, #8
 8001364:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001366:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001368:	233f      	movs	r3, #63	; 0x3f
 800136a:	4093      	lsls	r3, r2
 800136c:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800136e:	2301      	movs	r3, #1
 8001370:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001374:	2300      	movs	r3, #0
 8001376:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800137a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800137c:	2b00      	cmp	r3, #0
 800137e:	d03f      	beq.n	8001400 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001380:	4620      	mov	r0, r4
 8001382:	4798      	blx	r3
        return;
 8001384:	e03c      	b.n	8001400 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001386:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e7      	bne.n	800135c <HAL_DMA_IRQHandler+0x12c>
 800138c:	e7eb      	b.n	8001366 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800138e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001390:	b1a3      	cbz	r3, 80013bc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001392:	4620      	mov	r0, r4
 8001394:	4798      	blx	r3
 8001396:	e011      	b.n	80013bc <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800139e:	d109      	bne.n	80013b4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	f022 0210 	bic.w	r2, r2, #16
 80013a6:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80013a8:	2301      	movs	r3, #1
 80013aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80013ae:	2300      	movs	r3, #0
 80013b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80013b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013b6:	b10b      	cbz	r3, 80013bc <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80013b8:	4620      	mov	r0, r4
 80013ba:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013be:	b1fb      	cbz	r3, 8001400 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013c2:	f013 0f01 	tst.w	r3, #1
 80013c6:	d017      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80013c8:	2305      	movs	r3, #5
 80013ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	6813      	ldr	r3, [r2, #0]
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80013d8:	9b01      	ldr	r3, [sp, #4]
 80013da:	3301      	adds	r3, #1
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	42ab      	cmp	r3, r5
 80013e0:	d804      	bhi.n	80013ec <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f013 0f01 	tst.w	r3, #1
 80013ea:	d1f5      	bne.n	80013d8 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80013f2:	2300      	movs	r3, #0
 80013f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80013f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013fa:	b10b      	cbz	r3, 8001400 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80013fc:	4620      	mov	r0, r4
 80013fe:	4798      	blx	r3
}
 8001400:	b003      	add	sp, #12
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001404:	20000400 	.word	0x20000400
 8001408:	1b4e81b5 	.word	0x1b4e81b5

0800140c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140c:	2300      	movs	r3, #0
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f200 80dd 	bhi.w	80015ce <HAL_GPIO_Init+0x1c2>
{
 8001414:	b4f0      	push	{r4, r5, r6, r7}
 8001416:	b082      	sub	sp, #8
 8001418:	e05d      	b.n	80014d6 <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800141c:	005f      	lsls	r7, r3, #1
 800141e:	2403      	movs	r4, #3
 8001420:	40bc      	lsls	r4, r7
 8001422:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001426:	68cc      	ldr	r4, [r1, #12]
 8001428:	40bc      	lsls	r4, r7
 800142a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800142c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001430:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001434:	684c      	ldr	r4, [r1, #4]
 8001436:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800143a:	409a      	lsls	r2, r3
 800143c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800143e:	6042      	str	r2, [r0, #4]
 8001440:	e057      	b.n	80014f2 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001442:	08dc      	lsrs	r4, r3, #3
 8001444:	3408      	adds	r4, #8
 8001446:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144a:	f003 0207 	and.w	r2, r3, #7
 800144e:	0096      	lsls	r6, r2, #2
 8001450:	220f      	movs	r2, #15
 8001452:	40b2      	lsls	r2, r6
 8001454:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001458:	690a      	ldr	r2, [r1, #16]
 800145a:	40b2      	lsls	r2, r6
 800145c:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 800145e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001462:	e05a      	b.n	800151a <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001464:	2207      	movs	r2, #7
 8001466:	e000      	b.n	800146a <HAL_GPIO_Init+0x5e>
 8001468:	2200      	movs	r2, #0
 800146a:	40b2      	lsls	r2, r6
 800146c:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800146e:	3402      	adds	r4, #2
 8001470:	4e57      	ldr	r6, [pc, #348]	; (80015d0 <HAL_GPIO_Init+0x1c4>)
 8001472:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001476:	4a57      	ldr	r2, [pc, #348]	; (80015d4 <HAL_GPIO_Init+0x1c8>)
 8001478:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800147a:	43ea      	mvns	r2, r5
 800147c:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001480:	684f      	ldr	r7, [r1, #4]
 8001482:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001486:	d001      	beq.n	800148c <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8001488:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800148c:	4c51      	ldr	r4, [pc, #324]	; (80015d4 <HAL_GPIO_Init+0x1c8>)
 800148e:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001490:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001492:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001496:	684f      	ldr	r7, [r1, #4]
 8001498:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800149c:	d001      	beq.n	80014a2 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 800149e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80014a2:	4c4c      	ldr	r4, [pc, #304]	; (80015d4 <HAL_GPIO_Init+0x1c8>)
 80014a4:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a6:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ac:	684f      	ldr	r7, [r1, #4]
 80014ae:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80014b2:	d001      	beq.n	80014b8 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80014b4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80014b8:	4c46      	ldr	r4, [pc, #280]	; (80015d4 <HAL_GPIO_Init+0x1c8>)
 80014ba:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80014bc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80014be:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c0:	684e      	ldr	r6, [r1, #4]
 80014c2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80014c6:	d001      	beq.n	80014cc <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80014c8:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80014cc:	4c41      	ldr	r4, [pc, #260]	; (80015d4 <HAL_GPIO_Init+0x1c8>)
 80014ce:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d0:	3301      	adds	r3, #1
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	d878      	bhi.n	80015c8 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 80014d6:	2201      	movs	r2, #1
 80014d8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	680c      	ldr	r4, [r1, #0]
 80014dc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80014e0:	ea32 0404 	bics.w	r4, r2, r4
 80014e4:	d1f4      	bne.n	80014d0 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e6:	684c      	ldr	r4, [r1, #4]
 80014e8:	f004 0403 	and.w	r4, r4, #3
 80014ec:	3c01      	subs	r4, #1
 80014ee:	2c01      	cmp	r4, #1
 80014f0:	d993      	bls.n	800141a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f2:	684a      	ldr	r2, [r1, #4]
 80014f4:	f002 0203 	and.w	r2, r2, #3
 80014f8:	2a03      	cmp	r2, #3
 80014fa:	d009      	beq.n	8001510 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 80014fc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fe:	005e      	lsls	r6, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	40b2      	lsls	r2, r6
 8001504:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001508:	688a      	ldr	r2, [r1, #8]
 800150a:	40b2      	lsls	r2, r6
 800150c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800150e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001510:	684a      	ldr	r2, [r1, #4]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	2a02      	cmp	r2, #2
 8001518:	d093      	beq.n	8001442 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 800151a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151c:	005e      	lsls	r6, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	40b2      	lsls	r2, r6
 8001522:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001526:	684a      	ldr	r2, [r1, #4]
 8001528:	f002 0203 	and.w	r2, r2, #3
 800152c:	40b2      	lsls	r2, r6
 800152e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001530:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001532:	684a      	ldr	r2, [r1, #4]
 8001534:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001538:	d0ca      	beq.n	80014d0 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2200      	movs	r2, #0
 800153c:	9201      	str	r2, [sp, #4]
 800153e:	4a26      	ldr	r2, [pc, #152]	; (80015d8 <HAL_GPIO_Init+0x1cc>)
 8001540:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001542:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001546:	6454      	str	r4, [r2, #68]	; 0x44
 8001548:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800154a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800154e:	9201      	str	r2, [sp, #4]
 8001550:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001552:	089c      	lsrs	r4, r3, #2
 8001554:	1ca6      	adds	r6, r4, #2
 8001556:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_GPIO_Init+0x1c4>)
 8001558:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	0096      	lsls	r6, r2, #2
 8001562:	220f      	movs	r2, #15
 8001564:	40b2      	lsls	r2, r6
 8001566:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800156a:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <HAL_GPIO_Init+0x1d0>)
 800156c:	4290      	cmp	r0, r2
 800156e:	f43f af7b 	beq.w	8001468 <HAL_GPIO_Init+0x5c>
 8001572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001576:	4290      	cmp	r0, r2
 8001578:	d01a      	beq.n	80015b0 <HAL_GPIO_Init+0x1a4>
 800157a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800157e:	4290      	cmp	r0, r2
 8001580:	d018      	beq.n	80015b4 <HAL_GPIO_Init+0x1a8>
 8001582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001586:	4290      	cmp	r0, r2
 8001588:	d016      	beq.n	80015b8 <HAL_GPIO_Init+0x1ac>
 800158a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800158e:	4290      	cmp	r0, r2
 8001590:	d014      	beq.n	80015bc <HAL_GPIO_Init+0x1b0>
 8001592:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001596:	4290      	cmp	r0, r2
 8001598:	d012      	beq.n	80015c0 <HAL_GPIO_Init+0x1b4>
 800159a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800159e:	4290      	cmp	r0, r2
 80015a0:	d010      	beq.n	80015c4 <HAL_GPIO_Init+0x1b8>
 80015a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015a6:	4290      	cmp	r0, r2
 80015a8:	f43f af5c 	beq.w	8001464 <HAL_GPIO_Init+0x58>
 80015ac:	2208      	movs	r2, #8
 80015ae:	e75c      	b.n	800146a <HAL_GPIO_Init+0x5e>
 80015b0:	2201      	movs	r2, #1
 80015b2:	e75a      	b.n	800146a <HAL_GPIO_Init+0x5e>
 80015b4:	2202      	movs	r2, #2
 80015b6:	e758      	b.n	800146a <HAL_GPIO_Init+0x5e>
 80015b8:	2203      	movs	r2, #3
 80015ba:	e756      	b.n	800146a <HAL_GPIO_Init+0x5e>
 80015bc:	2204      	movs	r2, #4
 80015be:	e754      	b.n	800146a <HAL_GPIO_Init+0x5e>
 80015c0:	2205      	movs	r2, #5
 80015c2:	e752      	b.n	800146a <HAL_GPIO_Init+0x5e>
 80015c4:	2206      	movs	r2, #6
 80015c6:	e750      	b.n	800146a <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 80015c8:	b002      	add	sp, #8
 80015ca:	bcf0      	pop	{r4, r5, r6, r7}
 80015cc:	4770      	bx	lr
 80015ce:	4770      	bx	lr
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40013c00 	.word	0x40013c00
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e0:	b10a      	cbz	r2, 80015e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e2:	6181      	str	r1, [r0, #24]
 80015e4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015e6:	0409      	lsls	r1, r1, #16
 80015e8:	6181      	str	r1, [r0, #24]
  }
}
 80015ea:	4770      	bx	lr

080015ec <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015ec:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ee:	ea01 0203 	and.w	r2, r1, r3
 80015f2:	ea21 0103 	bic.w	r1, r1, r3
 80015f6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80015fa:	6181      	str	r1, [r0, #24]
}
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001600:	2800      	cmp	r0, #0
 8001602:	f000 80bd 	beq.w	8001780 <HAL_I2S_Init+0x180>
{
 8001606:	b570      	push	{r4, r5, r6, lr}
 8001608:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800160a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800160e:	2b00      	cmp	r3, #0
 8001610:	d051      	beq.n	80016b6 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001612:	2202      	movs	r2, #2
 8001614:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001618:	6821      	ldr	r1, [r4, #0]
 800161a:	69cb      	ldr	r3, [r1, #28]
 800161c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001620:	f023 030f 	bic.w	r3, r3, #15
 8001624:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800162a:	6963      	ldr	r3, [r4, #20]
 800162c:	4293      	cmp	r3, r2
 800162e:	d063      	beq.n	80016f8 <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001630:	68e3      	ldr	r3, [r4, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d146      	bne.n	80016c4 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001636:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001638:	68a3      	ldr	r3, [r4, #8]
 800163a:	2b20      	cmp	r3, #32
 800163c:	d800      	bhi.n	8001640 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800163e:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001640:	2001      	movs	r0, #1
 8001642:	f000 ff67 	bl	8002514 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001646:	6923      	ldr	r3, [r4, #16]
 8001648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164c:	d03c      	beq.n	80016c8 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800164e:	fbb0 f0f5 	udiv	r0, r0, r5
 8001652:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001656:	0043      	lsls	r3, r0, #1
 8001658:	6960      	ldr	r0, [r4, #20]
 800165a:	fbb3 f3f0 	udiv	r3, r3, r0
 800165e:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001660:	4a48      	ldr	r2, [pc, #288]	; (8001784 <HAL_I2S_Init+0x184>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001666:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800166a:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 800166e:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001670:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001672:	1e9a      	subs	r2, r3, #2
 8001674:	2afd      	cmp	r2, #253	; 0xfd
 8001676:	d841      	bhi.n	80016fc <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001678:	6922      	ldr	r2, [r4, #16]
 800167a:	430a      	orrs	r2, r1
 800167c:	6821      	ldr	r1, [r4, #0]
 800167e:	4313      	orrs	r3, r2
 8001680:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001682:	6821      	ldr	r1, [r4, #0]
 8001684:	69cb      	ldr	r3, [r1, #28]
 8001686:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800168a:	f023 030f 	bic.w	r3, r3, #15
 800168e:	6862      	ldr	r2, [r4, #4]
 8001690:	68a0      	ldr	r0, [r4, #8]
 8001692:	4302      	orrs	r2, r0
 8001694:	68e0      	ldr	r0, [r4, #12]
 8001696:	4302      	orrs	r2, r0
 8001698:	69a0      	ldr	r0, [r4, #24]
 800169a:	4302      	orrs	r2, r0
 800169c:	4313      	orrs	r3, r2
 800169e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016a2:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80016a4:	6a23      	ldr	r3, [r4, #32]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d02e      	beq.n	8001708 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80016aa:	2000      	movs	r0, #0
 80016ac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 80016b4:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->Lock = HAL_UNLOCKED;
 80016b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80016ba:	4b33      	ldr	r3, [pc, #204]	; (8001788 <HAL_I2S_Init+0x188>)
 80016bc:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 80016be:	f7ff f849 	bl	8000754 <HAL_I2S_MspInit>
 80016c2:	e7a6      	b.n	8001612 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 80016c4:	2520      	movs	r5, #32
 80016c6:	e7b7      	b.n	8001638 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80016c8:	68e3      	ldr	r3, [r4, #12]
 80016ca:	b153      	cbz	r3, 80016e2 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016cc:	00ad      	lsls	r5, r5, #2
 80016ce:	fbb0 f0f5 	udiv	r0, r0, r5
 80016d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016d6:	0043      	lsls	r3, r0, #1
 80016d8:	6960      	ldr	r0, [r4, #20]
 80016da:	fbb3 f3f0 	udiv	r3, r3, r0
 80016de:	3305      	adds	r3, #5
 80016e0:	e7be      	b.n	8001660 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016e2:	00ed      	lsls	r5, r5, #3
 80016e4:	fbb0 f0f5 	udiv	r0, r0, r5
 80016e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016ec:	0043      	lsls	r3, r0, #1
 80016ee:	6960      	ldr	r0, [r4, #20]
 80016f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80016f4:	3305      	adds	r3, #5
 80016f6:	e7b3      	b.n	8001660 <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 80016f8:	2100      	movs	r1, #0
 80016fa:	e7ba      	b.n	8001672 <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8001704:	2001      	movs	r0, #1
 8001706:	e7d5      	b.n	80016b4 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_I2S_Init+0x18c>)
 800170a:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800170c:	6822      	ldr	r2, [r4, #0]
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_I2S_Init+0x190>)
 8001710:	429a      	cmp	r2, r3
 8001712:	d01f      	beq.n	8001754 <HAL_I2S_Init+0x154>
 8001714:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001718:	69d3      	ldr	r3, [r2, #28]
 800171a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800171e:	f023 030f 	bic.w	r3, r3, #15
 8001722:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001724:	6822      	ldr	r2, [r4, #0]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_I2S_Init+0x190>)
 8001728:	429a      	cmp	r2, r3
 800172a:	d015      	beq.n	8001758 <HAL_I2S_Init+0x158>
 800172c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001730:	2202      	movs	r2, #2
 8001732:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001734:	6822      	ldr	r2, [r4, #0]
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_I2S_Init+0x190>)
 8001738:	429a      	cmp	r2, r3
 800173a:	d010      	beq.n	800175e <HAL_I2S_Init+0x15e>
 800173c:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8001740:	69eb      	ldr	r3, [r5, #28]
 8001742:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001744:	6862      	ldr	r2, [r4, #4]
 8001746:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800174a:	d00a      	beq.n	8001762 <HAL_I2S_Init+0x162>
 800174c:	b9b2      	cbnz	r2, 800177c <HAL_I2S_Init+0x17c>
      tmp = I2S_MODE_SLAVE_RX;
 800174e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001752:	e008      	b.n	8001766 <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001754:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_I2S_Init+0x194>)
 8001756:	e7df      	b.n	8001718 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001758:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800175c:	e7e8      	b.n	8001730 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800175e:	4d0d      	ldr	r5, [pc, #52]	; (8001794 <HAL_I2S_Init+0x194>)
 8001760:	e7ee      	b.n	8001740 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8001762:	f44f 7080 	mov.w	r0, #256	; 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 8001766:	8926      	ldrh	r6, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 8001768:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 800176a:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800176c:	4330      	orrs	r0, r6
 800176e:	4301      	orrs	r1, r0
 8001770:	430a      	orrs	r2, r1
 8001772:	4313      	orrs	r3, r2
 8001774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001778:	61eb      	str	r3, [r5, #28]
 800177a:	e796      	b.n	80016aa <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 800177c:	2000      	movs	r0, #0
 800177e:	e7f2      	b.n	8001766 <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 8001780:	2001      	movs	r0, #1
}
 8001782:	4770      	bx	lr
 8001784:	cccccccd 	.word	0xcccccccd
 8001788:	0800193f 	.word	0x0800193f
 800178c:	08001b79 	.word	0x08001b79
 8001790:	40003800 	.word	0x40003800
 8001794:	40003400 	.word	0x40003400

08001798 <HAL_I2S_Receive_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001798:	2900      	cmp	r1, #0
 800179a:	d06d      	beq.n	8001878 <HAL_I2S_Receive_DMA+0xe0>
{
 800179c:	b530      	push	{r4, r5, lr}
 800179e:	b083      	sub	sp, #12
 80017a0:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d06a      	beq.n	800187c <HAL_I2S_Receive_DMA+0xe4>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80017a6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d068      	beq.n	8001882 <HAL_I2S_Receive_DMA+0xea>
 80017b0:	2301      	movs	r3, #1
 80017b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80017b6:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 80017ba:	b2ed      	uxtb	r5, r5
 80017bc:	429d      	cmp	r5, r3
 80017be:	d110      	bne.n	80017e2 <HAL_I2S_Receive_DMA+0x4a>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80017c0:	2304      	movs	r3, #4
 80017c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80017ca:	62e1      	str	r1, [r4, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d009      	beq.n	80017ec <HAL_I2S_Receive_DMA+0x54>
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d007      	beq.n	80017ec <HAL_I2S_Receive_DMA+0x54>
    hi2s->RxXferSize = (Size << 1U);
    hi2s->RxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->RxXferSize = Size;
 80017dc:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80017de:	8662      	strh	r2, [r4, #50]	; 0x32
 80017e0:	e008      	b.n	80017f4 <HAL_I2S_Receive_DMA+0x5c>
    __HAL_UNLOCK(hi2s);
 80017e2:	2300      	movs	r3, #0
 80017e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 80017e8:	2002      	movs	r0, #2
 80017ea:	e048      	b.n	800187e <HAL_I2S_Receive_DMA+0xe6>
    hi2s->RxXferSize = (Size << 1U);
 80017ec:	0052      	lsls	r2, r2, #1
 80017ee:	b292      	uxth	r2, r2
 80017f0:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80017f2:	8662      	strh	r2, [r4, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80017f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017f6:	4a24      	ldr	r2, [pc, #144]	; (8001888 <HAL_I2S_Receive_DMA+0xf0>)
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80017fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017fc:	4a23      	ldr	r2, [pc, #140]	; (800188c <HAL_I2S_Receive_DMA+0xf4>)
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001800:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001802:	4a23      	ldr	r2, [pc, #140]	; (8001890 <HAL_I2S_Receive_DMA+0xf8>)
 8001804:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001806:	6821      	ldr	r1, [r4, #0]
 8001808:	69cb      	ldr	r3, [r1, #28]
 800180a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800180e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001812:	d01d      	beq.n	8001850 <HAL_I2S_Receive_DMA+0xb8>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
                                 hi2s->RxXferSize))
 8001814:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001816:	b29b      	uxth	r3, r3
 8001818:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800181a:	310c      	adds	r1, #12
 800181c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800181e:	f7ff fc75 	bl	800110c <HAL_DMA_Start_IT>
 8001822:	b9e8      	cbnz	r0, 8001860 <HAL_I2S_Receive_DMA+0xc8>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800182c:	d103      	bne.n	8001836 <HAL_I2S_Receive_DMA+0x9e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001834:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	f012 0f01 	tst.w	r2, #1
 800183e:	d103      	bne.n	8001848 <HAL_I2S_Receive_DMA+0xb0>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001848:	2300      	movs	r3, #0
 800184a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 800184e:	e016      	b.n	800187e <HAL_I2S_Receive_DMA+0xe6>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001850:	2300      	movs	r3, #0
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	68cb      	ldr	r3, [r1, #12]
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	688b      	ldr	r3, [r1, #8]
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	9b01      	ldr	r3, [sp, #4]
 800185e:	e7d9      	b.n	8001814 <HAL_I2S_Receive_DMA+0x7c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001860:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001868:	2301      	movs	r3, #1
 800186a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 800186e:	2300      	movs	r3, #0
 8001870:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001874:	4628      	mov	r0, r5
 8001876:	e002      	b.n	800187e <HAL_I2S_Receive_DMA+0xe6>
    return  HAL_ERROR;
 8001878:	2001      	movs	r0, #1
}
 800187a:	4770      	bx	lr
    return  HAL_ERROR;
 800187c:	2001      	movs	r0, #1
}
 800187e:	b003      	add	sp, #12
 8001880:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hi2s);
 8001882:	2002      	movs	r0, #2
 8001884:	e7fb      	b.n	800187e <HAL_I2S_Receive_DMA+0xe6>
 8001886:	bf00      	nop
 8001888:	080018d7 	.word	0x080018d7
 800188c:	08001919 	.word	0x08001919
 8001890:	08001a0f 	.word	0x08001a0f

08001894 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001894:	b508      	push	{r3, lr}
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8001896:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001898:	4798      	blx	r3
}
 800189a:	bd08      	pop	{r3, pc}

0800189c <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800189c:	4770      	bx	lr

0800189e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800189e:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80018a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80018a2:	6803      	ldr	r3, [r0, #0]
 80018a4:	8812      	ldrh	r2, [r2, #0]
 80018a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80018a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018aa:	3302      	adds	r3, #2
 80018ac:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 80018ae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80018b8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b103      	cbz	r3, 80018c0 <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018be:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018c0:	6802      	ldr	r2, [r0, #0]
 80018c2:	6853      	ldr	r3, [r2, #4]
 80018c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80018c8:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80018d0:	f7ff ffe4 	bl	800189c <HAL_I2S_TxCpltCallback>
}
 80018d4:	e7f3      	b.n	80018be <I2S_Transmit_IT+0x20>

080018d6 <I2S_DMARxHalfCplt>:
{
 80018d6:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80018d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80018da:	f7ff f9ed 	bl	8000cb8 <HAL_I2S_RxHalfCpltCallback>
}
 80018de:	bd08      	pop	{r3, pc}

080018e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80018e0:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80018e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80018ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80018ec:	3302      	adds	r3, #2
 80018ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80018f0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80018fa:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	b103      	cbz	r3, 8001902 <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001900:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001902:	6802      	ldr	r2, [r0, #0]
 8001904:	6853      	ldr	r3, [r2, #4]
 8001906:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800190a:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800190c:	2301      	movs	r3, #1
 800190e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001912:	f7ff f9ef 	bl	8000cf4 <HAL_I2S_RxCpltCallback>
}
 8001916:	e7f3      	b.n	8001900 <I2S_Receive_IT+0x20>

08001918 <I2S_DMARxCplt>:
{
 8001918:	b508      	push	{r3, lr}
 800191a:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800191c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	b94b      	cbnz	r3, 8001936 <I2S_DMARxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001922:	6802      	ldr	r2, [r0, #0]
 8001924:	6853      	ldr	r3, [r2, #4]
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6053      	str	r3, [r2, #4]
    hi2s->RxXferCount = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001930:	2301      	movs	r3, #1
 8001932:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8001936:	f7ff f9dd 	bl	8000cf4 <HAL_I2S_RxCpltCallback>
}
 800193a:	bd08      	pop	{r3, pc}

0800193c <HAL_I2S_ErrorCallback>:
}
 800193c:	4770      	bx	lr

0800193e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800193e:	b510      	push	{r4, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001944:	6802      	ldr	r2, [r0, #0]
 8001946:	6893      	ldr	r3, [r2, #8]
 8001948:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800194a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b04      	cmp	r3, #4
 8001952:	d006      	beq.n	8001962 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001954:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b03      	cmp	r3, #3
 800195c:	d02c      	beq.n	80019b8 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800195e:	b004      	add	sp, #16
 8001960:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001962:	9b03      	ldr	r3, [sp, #12]
 8001964:	f013 0f01 	tst.w	r3, #1
 8001968:	d003      	beq.n	8001972 <I2S_IRQHandler+0x34>
 800196a:	6853      	ldr	r3, [r2, #4]
 800196c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001970:	d11f      	bne.n	80019b2 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001972:	9b03      	ldr	r3, [sp, #12]
 8001974:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001978:	d0ec      	beq.n	8001954 <I2S_IRQHandler+0x16>
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	f012 0f20 	tst.w	r2, #32
 8001982:	d0e7      	beq.n	8001954 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800198a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800198c:	2300      	movs	r3, #0
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	9201      	str	r2, [sp, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800199c:	2301      	movs	r3, #1
 800199e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80019a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7ff ffc6 	bl	800193c <HAL_I2S_ErrorCallback>
 80019b0:	e7d0      	b.n	8001954 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 80019b2:	f7ff ff95 	bl	80018e0 <I2S_Receive_IT>
 80019b6:	e7dc      	b.n	8001972 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80019b8:	9b03      	ldr	r3, [sp, #12]
 80019ba:	f013 0f02 	tst.w	r3, #2
 80019be:	d004      	beq.n	80019ca <I2S_IRQHandler+0x8c>
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019c8:	d11d      	bne.n	8001a06 <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019ca:	9b03      	ldr	r3, [sp, #12]
 80019cc:	f013 0f08 	tst.w	r3, #8
 80019d0:	d0c5      	beq.n	800195e <I2S_IRQHandler+0x20>
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	f012 0f20 	tst.w	r2, #32
 80019da:	d0c0      	beq.n	800195e <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019e2:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80019e4:	2300      	movs	r3, #0
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80019f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff ff9c 	bl	800193c <HAL_I2S_ErrorCallback>
}
 8001a04:	e7ab      	b.n	800195e <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff ff49 	bl	800189e <I2S_Transmit_IT>
 8001a0c:	e7dd      	b.n	80019ca <I2S_IRQHandler+0x8c>

08001a0e <I2S_DMAError>:
{
 8001a0e:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001a10:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001a12:	6802      	ldr	r2, [r0, #0]
 8001a14:	6853      	ldr	r3, [r2, #4]
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001a20:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001a28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8001a30:	f7ff ff84 	bl	800193c <HAL_I2S_ErrorCallback>
}
 8001a34:	bd08      	pop	{r3, pc}

08001a36 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001a36:	4770      	bx	lr

08001a38 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001a38:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001a3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a3c:	1c9a      	adds	r2, r3, #2
 8001a3e:	6242      	str	r2, [r0, #36]	; 0x24
 8001a40:	6802      	ldr	r2, [r0, #0]
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001a46:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a50:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b93b      	cbnz	r3, 8001a66 <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a56:	6802      	ldr	r2, [r0, #0]
 8001a58:	6853      	ldr	r3, [r2, #4]
 8001a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a5e:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001a60:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	b103      	cbz	r3, 8001a68 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a66:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001a6e:	f7ff ffe2 	bl	8001a36 <HAL_I2SEx_TxRxCpltCallback>
}
 8001a72:	e7f8      	b.n	8001a66 <I2SEx_TxISR_I2S+0x2e>

08001a74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001a74:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001a76:	6802      	ldr	r2, [r0, #0]
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <I2SEx_RxISR_I2SExt+0x5c>)
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d01c      	beq.n	8001ab8 <I2SEx_RxISR_I2SExt+0x44>
 8001a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a86:	1c99      	adds	r1, r3, #2
 8001a88:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001a8a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001a8c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001a96:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b963      	cbnz	r3, 8001ab6 <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a9c:	6802      	ldr	r2, [r0, #0]
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <I2SEx_RxISR_I2SExt+0x5c>)
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d00c      	beq.n	8001abe <I2SEx_RxISR_I2SExt+0x4a>
 8001aa4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001aa8:	6853      	ldr	r3, [r2, #4]
 8001aaa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001aae:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8001ab0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b12b      	cbz	r3, 8001ac2 <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ab6:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001ab8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001abc:	e7e1      	b.n	8001a82 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <I2SEx_RxISR_I2SExt+0x60>)
 8001ac0:	e7f2      	b.n	8001aa8 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ac8:	f7ff ffb5 	bl	8001a36 <HAL_I2SEx_TxRxCpltCallback>
}
 8001acc:	e7f3      	b.n	8001ab6 <I2SEx_RxISR_I2SExt+0x42>
 8001ace:	bf00      	nop
 8001ad0:	40003800 	.word	0x40003800
 8001ad4:	40003400 	.word	0x40003400

08001ad8 <I2SEx_TxISR_I2SExt>:
{
 8001ad8:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001ada:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001adc:	1c9a      	adds	r2, r3, #2
 8001ade:	6242      	str	r2, [r0, #36]	; 0x24
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	6801      	ldr	r1, [r0, #0]
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <I2SEx_TxISR_I2SExt+0x5c>)
 8001ae6:	4299      	cmp	r1, r3
 8001ae8:	d018      	beq.n	8001b1c <I2SEx_TxISR_I2SExt+0x44>
 8001aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aee:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001af0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001afa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	b963      	cbnz	r3, 8001b1a <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b00:	6802      	ldr	r2, [r0, #0]
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <I2SEx_TxISR_I2SExt+0x5c>)
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d00c      	beq.n	8001b22 <I2SEx_TxISR_I2SExt+0x4a>
 8001b08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b0c:	6853      	ldr	r3, [r2, #4]
 8001b0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b12:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8001b14:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	b12b      	cbz	r3, 8001b26 <I2SEx_TxISR_I2SExt+0x4e>
}
 8001b1a:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001b1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001b20:	e7e5      	b.n	8001aee <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <I2SEx_TxISR_I2SExt+0x60>)
 8001b24:	e7f2      	b.n	8001b0c <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001b2c:	f7ff ff83 	bl	8001a36 <HAL_I2SEx_TxRxCpltCallback>
}
 8001b30:	e7f3      	b.n	8001b1a <I2SEx_TxISR_I2SExt+0x42>
 8001b32:	bf00      	nop
 8001b34:	40003800 	.word	0x40003800
 8001b38:	40003400 	.word	0x40003400

08001b3c <I2SEx_RxISR_I2S>:
{
 8001b3c:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001b3e:	6803      	ldr	r3, [r0, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b44:	1c99      	adds	r1, r3, #2
 8001b46:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001b48:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001b4a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001b54:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	b93b      	cbnz	r3, 8001b6a <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b5a:	6802      	ldr	r2, [r0, #0]
 8001b5c:	6853      	ldr	r3, [r2, #4]
 8001b5e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001b62:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001b64:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b103      	cbz	r3, 8001b6c <I2SEx_RxISR_I2S+0x30>
}
 8001b6a:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001b72:	f7ff ff60 	bl	8001a36 <HAL_I2SEx_TxRxCpltCallback>
}
 8001b76:	e7f8      	b.n	8001b6a <I2SEx_RxISR_I2S+0x2e>

08001b78 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001b78:	b510      	push	{r4, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001b7e:	6803      	ldr	r3, [r0, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001b84:	4a70      	ldr	r2, [pc, #448]	; (8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d06f      	beq.n	8001c6a <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8001b8a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b8e:	6891      	ldr	r1, [r2, #8]
 8001b90:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001b96:	6853      	ldr	r3, [r2, #4]
 8001b98:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b9a:	6863      	ldr	r3, [r4, #4]
 8001b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d170      	bne.n	8001c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ba6:	9b05      	ldr	r3, [sp, #20]
 8001ba8:	f013 0f02 	tst.w	r3, #2
 8001bac:	d003      	beq.n	8001bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 8001bae:	9b03      	ldr	r3, [sp, #12]
 8001bb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001bb4:	d15c      	bne.n	8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001bb6:	9b04      	ldr	r3, [sp, #16]
 8001bb8:	f013 0f01 	tst.w	r3, #1
 8001bbc:	d003      	beq.n	8001bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 8001bbe:	9b02      	ldr	r3, [sp, #8]
 8001bc0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001bc4:	d158      	bne.n	8001c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001bc6:	9b04      	ldr	r3, [sp, #16]
 8001bc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001bcc:	d024      	beq.n	8001c18 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 8001bce:	9b02      	ldr	r3, [sp, #8]
 8001bd0:	f013 0f20 	tst.w	r3, #32
 8001bd4:	d020      	beq.n	8001c18 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bd6:	6822      	ldr	r2, [r4, #0]
 8001bd8:	4b5b      	ldr	r3, [pc, #364]	; (8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d050      	beq.n	8001c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8001bde:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001be2:	6853      	ldr	r3, [r2, #4]
 8001be4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001be8:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	6853      	ldr	r3, [r2, #4]
 8001bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001bf2:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	9200      	str	r2, [sp, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff fe92 	bl	800193c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c18:	9b05      	ldr	r3, [sp, #20]
 8001c1a:	f013 0f08 	tst.w	r3, #8
 8001c1e:	d022      	beq.n	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001c20:	9b03      	ldr	r3, [sp, #12]
 8001c22:	f013 0f20 	tst.w	r3, #32
 8001c26:	d01e      	beq.n	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c28:	6822      	ldr	r2, [r4, #0]
 8001c2a:	6853      	ldr	r3, [r2, #4]
 8001c2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c30:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c32:	6822      	ldr	r2, [r4, #0]
 8001c34:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d024      	beq.n	8001c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001c3a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c3e:	6853      	ldr	r3, [r2, #4]
 8001c40:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001c44:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c46:	2300      	movs	r3, #0
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7ff fe6b 	bl	800193c <HAL_I2S_ErrorCallback>
}
 8001c66:	b006      	add	sp, #24
 8001c68:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c6a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001c6e:	e78e      	b.n	8001b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8001c70:	4620      	mov	r0, r4
 8001c72:	f7ff fee1 	bl	8001a38 <I2SEx_TxISR_I2S>
 8001c76:	e79e      	b.n	8001bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7ff fefb 	bl	8001a74 <I2SEx_RxISR_I2SExt>
 8001c7e:	e7a2      	b.n	8001bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001c82:	e7ae      	b.n	8001be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c84:	4a31      	ldr	r2, [pc, #196]	; (8001d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001c86:	e7da      	b.n	8001c3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001c88:	9b04      	ldr	r3, [sp, #16]
 8001c8a:	f013 0f02 	tst.w	r3, #2
 8001c8e:	d003      	beq.n	8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8001c90:	9b02      	ldr	r3, [sp, #8]
 8001c92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c96:	d14a      	bne.n	8001d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001c98:	9b05      	ldr	r3, [sp, #20]
 8001c9a:	f013 0f01 	tst.w	r3, #1
 8001c9e:	d003      	beq.n	8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8001ca0:	9b03      	ldr	r3, [sp, #12]
 8001ca2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ca6:	d146      	bne.n	8001d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ca8:	9b05      	ldr	r3, [sp, #20]
 8001caa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cae:	d01c      	beq.n	8001cea <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8001cb0:	9b03      	ldr	r3, [sp, #12]
 8001cb2:	f013 0f20 	tst.w	r3, #32
 8001cb6:	d018      	beq.n	8001cea <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	6853      	ldr	r3, [r2, #4]
 8001cbc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001cc0:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cc2:	6822      	ldr	r2, [r4, #0]
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d039      	beq.n	8001d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8001cca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cce:	6853      	ldr	r3, [r2, #4]
 8001cd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cd4:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fe29 	bl	800193c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cea:	9b04      	ldr	r3, [sp, #16]
 8001cec:	f013 0f08 	tst.w	r3, #8
 8001cf0:	d0b9      	beq.n	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001cf2:	9b02      	ldr	r3, [sp, #8]
 8001cf4:	f013 0f20 	tst.w	r3, #32
 8001cf8:	d0b5      	beq.n	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cfa:	6822      	ldr	r2, [r4, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d01f      	beq.n	8001d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001d02:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d06:	6853      	ldr	r3, [r2, #4]
 8001d08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d0c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	6853      	ldr	r3, [r2, #4]
 8001d12:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001d16:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff fe08 	bl	800193c <HAL_I2S_ErrorCallback>
}
 8001d2c:	e79b      	b.n	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff fed2 	bl	8001ad8 <I2SEx_TxISR_I2SExt>
 8001d34:	e7b0      	b.n	8001c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff ff00 	bl	8001b3c <I2SEx_RxISR_I2S>
 8001d3c:	e7b4      	b.n	8001ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d3e:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001d40:	e7c5      	b.n	8001cce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d42:	4a02      	ldr	r2, [pc, #8]	; (8001d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001d44:	e7df      	b.n	8001d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8001d46:	bf00      	nop
 8001d48:	40003800 	.word	0x40003800
 8001d4c:	40003400 	.word	0x40003400

08001d50 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d50:	2800      	cmp	r0, #0
 8001d52:	f000 81df 	beq.w	8002114 <HAL_RCC_OscConfig+0x3c4>
{
 8001d56:	b570      	push	{r4, r5, r6, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5c:	6803      	ldr	r3, [r0, #0]
 8001d5e:	f013 0f01 	tst.w	r3, #1
 8001d62:	d03b      	beq.n	8001ddc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d64:	4ba6      	ldr	r3, [pc, #664]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d02c      	beq.n	8001dca <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d70:	4ba3      	ldr	r3, [pc, #652]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d021      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	6863      	ldr	r3, [r4, #4]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d82:	d04f      	beq.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d88:	d052      	beq.n	8001e30 <HAL_RCC_OscConfig+0xe0>
 8001d8a:	4b9d      	ldr	r3, [pc, #628]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d9a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d9c:	6863      	ldr	r3, [r4, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d050      	beq.n	8001e44 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff f839 	bl	8000e18 <HAL_GetTick>
 8001da6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da8:	4b95      	ldr	r3, [pc, #596]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001db0:	d114      	bne.n	8001ddc <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db2:	f7ff f831 	bl	8000e18 <HAL_GetTick>
 8001db6:	1b40      	subs	r0, r0, r5
 8001db8:	2864      	cmp	r0, #100	; 0x64
 8001dba:	d9f5      	bls.n	8001da8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	e1b0      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc0:	4b8f      	ldr	r3, [pc, #572]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dc8:	d0d8      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dca:	4b8d      	ldr	r3, [pc, #564]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001dd2:	d003      	beq.n	8001ddc <HAL_RCC_OscConfig+0x8c>
 8001dd4:	6863      	ldr	r3, [r4, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 819e 	beq.w	8002118 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	f013 0f02 	tst.w	r3, #2
 8001de2:	d054      	beq.n	8001e8e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001de4:	4b86      	ldr	r3, [pc, #536]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f013 0f0c 	tst.w	r3, #12
 8001dec:	d03e      	beq.n	8001e6c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dee:	4b84      	ldr	r3, [pc, #528]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d033      	beq.n	8001e62 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dfa:	68e3      	ldr	r3, [r4, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d067      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	4b80      	ldr	r3, [pc, #512]	; (8002004 <HAL_RCC_OscConfig+0x2b4>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff f807 	bl	8000e18 <HAL_GetTick>
 8001e0a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	4b7c      	ldr	r3, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f013 0f02 	tst.w	r3, #2
 8001e14:	d153      	bne.n	8001ebe <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7fe ffff 	bl	8000e18 <HAL_GetTick>
 8001e1a:	1b40      	subs	r0, r0, r5
 8001e1c:	2802      	cmp	r0, #2
 8001e1e:	d9f5      	bls.n	8001e0c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001e20:	2003      	movs	r0, #3
 8001e22:	e17e      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e24:	4a76      	ldr	r2, [pc, #472]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001e26:	6813      	ldr	r3, [r2, #0]
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e7b5      	b.n	8001d9c <HAL_RCC_OscConfig+0x4c>
 8001e30:	4b73      	ldr	r3, [pc, #460]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e7ab      	b.n	8001d9c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001e44:	f7fe ffe8 	bl	8000e18 <HAL_GetTick>
 8001e48:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e52:	d0c3      	beq.n	8001ddc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e54:	f7fe ffe0 	bl	8000e18 <HAL_GetTick>
 8001e58:	1b40      	subs	r0, r0, r5
 8001e5a:	2864      	cmp	r0, #100	; 0x64
 8001e5c:	d9f5      	bls.n	8001e4a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001e5e:	2003      	movs	r0, #3
 8001e60:	e15f      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e62:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e6a:	d1c6      	bne.n	8001dfa <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6c:	4b64      	ldr	r3, [pc, #400]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f013 0f02 	tst.w	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_OscConfig+0x12e>
 8001e76:	68e3      	ldr	r3, [r4, #12]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	f040 814f 	bne.w	800211c <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	4a60      	ldr	r2, [pc, #384]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001e80:	6813      	ldr	r3, [r2, #0]
 8001e82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e86:	6921      	ldr	r1, [r4, #16]
 8001e88:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e8c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	f013 0f08 	tst.w	r3, #8
 8001e94:	d040      	beq.n	8001f18 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e96:	6963      	ldr	r3, [r4, #20]
 8001e98:	b363      	cbz	r3, 8001ef4 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9a:	4b5b      	ldr	r3, [pc, #364]	; (8002008 <HAL_RCC_OscConfig+0x2b8>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea0:	f7fe ffba 	bl	8000e18 <HAL_GetTick>
 8001ea4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	4b56      	ldr	r3, [pc, #344]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eaa:	f013 0f02 	tst.w	r3, #2
 8001eae:	d133      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7fe ffb2 	bl	8000e18 <HAL_GetTick>
 8001eb4:	1b40      	subs	r0, r0, r5
 8001eb6:	2802      	cmp	r0, #2
 8001eb8:	d9f5      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8001eba:	2003      	movs	r0, #3
 8001ebc:	e131      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4a50      	ldr	r2, [pc, #320]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001ec0:	6813      	ldr	r3, [r2, #0]
 8001ec2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ec6:	6921      	ldr	r1, [r4, #16]
 8001ec8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e7de      	b.n	8001e8e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_RCC_OscConfig+0x2b4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ed6:	f7fe ff9f 	bl	8000e18 <HAL_GetTick>
 8001eda:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001edc:	4b48      	ldr	r3, [pc, #288]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f013 0f02 	tst.w	r3, #2
 8001ee4:	d0d3      	beq.n	8001e8e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7fe ff97 	bl	8000e18 <HAL_GetTick>
 8001eea:	1b40      	subs	r0, r0, r5
 8001eec:	2802      	cmp	r0, #2
 8001eee:	d9f5      	bls.n	8001edc <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	e116      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef4:	4b44      	ldr	r3, [pc, #272]	; (8002008 <HAL_RCC_OscConfig+0x2b8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7fe ff8d 	bl	8000e18 <HAL_GetTick>
 8001efe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f04:	f013 0f02 	tst.w	r3, #2
 8001f08:	d006      	beq.n	8001f18 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0a:	f7fe ff85 	bl	8000e18 <HAL_GetTick>
 8001f0e:	1b40      	subs	r0, r0, r5
 8001f10:	2802      	cmp	r0, #2
 8001f12:	d9f5      	bls.n	8001f00 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8001f14:	2003      	movs	r0, #3
 8001f16:	e104      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	f013 0f04 	tst.w	r3, #4
 8001f1e:	d078      	beq.n	8002012 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f20:	4b37      	ldr	r3, [pc, #220]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001f28:	d10d      	bne.n	8001f46 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f42:	2501      	movs	r5, #1
 8001f44:	e000      	b.n	8001f48 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_RCC_OscConfig+0x2bc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f50:	d021      	beq.n	8001f96 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f52:	68a3      	ldr	r3, [r4, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d032      	beq.n	8001fbe <HAL_RCC_OscConfig+0x26e>
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d036      	beq.n	8001fca <HAL_RCC_OscConfig+0x27a>
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	671a      	str	r2, [r3, #112]	; 0x70
 8001f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f68:	f022 0204 	bic.w	r2, r2, #4
 8001f6c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6e:	68a3      	ldr	r3, [r4, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d034      	beq.n	8001fde <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7fe ff50 	bl	8000e18 <HAL_GetTick>
 8001f78:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	f013 0f02 	tst.w	r3, #2
 8001f82:	d145      	bne.n	8002010 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7fe ff48 	bl	8000e18 <HAL_GetTick>
 8001f88:	1b80      	subs	r0, r0, r6
 8001f8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f8e:	4298      	cmp	r0, r3
 8001f90:	d9f3      	bls.n	8001f7a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001f92:	2003      	movs	r0, #3
 8001f94:	e0c5      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_RCC_OscConfig+0x2bc>)
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001fa0:	f7fe ff3a 	bl	8000e18 <HAL_GetTick>
 8001fa4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCC_OscConfig+0x2bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fae:	d1d0      	bne.n	8001f52 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe ff32 	bl	8000e18 <HAL_GetTick>
 8001fb4:	1b80      	subs	r0, r0, r6
 8001fb6:	2802      	cmp	r0, #2
 8001fb8:	d9f5      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001fba:	2003      	movs	r0, #3
 8001fbc:	e0b1      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001fc0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc8:	e7d1      	b.n	8001f6e <HAL_RCC_OscConfig+0x21e>
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fce:	f042 0204 	orr.w	r2, r2, #4
 8001fd2:	671a      	str	r2, [r3, #112]	; 0x70
 8001fd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	671a      	str	r2, [r3, #112]	; 0x70
 8001fdc:	e7c7      	b.n	8001f6e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7fe ff1b 	bl	8000e18 <HAL_GetTick>
 8001fe2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_OscConfig+0x2b0>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	f013 0f02 	tst.w	r3, #2
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7fe ff13 	bl	8000e18 <HAL_GetTick>
 8001ff2:	1b80      	subs	r0, r0, r6
 8001ff4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ff8:	4298      	cmp	r0, r3
 8001ffa:	d9f3      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	e090      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
 8002000:	40023800 	.word	0x40023800
 8002004:	42470000 	.word	0x42470000
 8002008:	42470e80 	.word	0x42470e80
 800200c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002010:	b9ed      	cbnz	r5, 800204e <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002012:	69a3      	ldr	r3, [r4, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 8083 	beq.w	8002120 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800201a:	4a49      	ldr	r2, [pc, #292]	; (8002140 <HAL_RCC_OscConfig+0x3f0>)
 800201c:	6892      	ldr	r2, [r2, #8]
 800201e:	f002 020c 	and.w	r2, r2, #12
 8002022:	2a08      	cmp	r2, #8
 8002024:	d051      	beq.n	80020ca <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002026:	2b02      	cmp	r3, #2
 8002028:	d017      	beq.n	800205a <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_OscConfig+0x3f4>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe fef2 	bl	8000e18 <HAL_GetTick>
 8002034:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	4b42      	ldr	r3, [pc, #264]	; (8002140 <HAL_RCC_OscConfig+0x3f0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800203e:	d042      	beq.n	80020c6 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002040:	f7fe feea 	bl	8000e18 <HAL_GetTick>
 8002044:	1b00      	subs	r0, r0, r4
 8002046:	2802      	cmp	r0, #2
 8002048:	d9f5      	bls.n	8002036 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800204a:	2003      	movs	r0, #3
 800204c:	e069      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800204e:	4a3c      	ldr	r2, [pc, #240]	; (8002140 <HAL_RCC_OscConfig+0x3f0>)
 8002050:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	e7db      	b.n	8002012 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <HAL_RCC_OscConfig+0x3f4>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002060:	f7fe feda 	bl	8000e18 <HAL_GetTick>
 8002064:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	4b36      	ldr	r3, [pc, #216]	; (8002140 <HAL_RCC_OscConfig+0x3f0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800206e:	d006      	beq.n	800207e <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002070:	f7fe fed2 	bl	8000e18 <HAL_GetTick>
 8002074:	1b40      	subs	r0, r0, r5
 8002076:	2802      	cmp	r0, #2
 8002078:	d9f5      	bls.n	8002066 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 800207a:	2003      	movs	r0, #3
 800207c:	e051      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207e:	69e3      	ldr	r3, [r4, #28]
 8002080:	6a22      	ldr	r2, [r4, #32]
 8002082:	4313      	orrs	r3, r2
 8002084:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002086:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800208a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800208c:	0852      	lsrs	r2, r2, #1
 800208e:	3a01      	subs	r2, #1
 8002090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002094:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002096:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800209a:	4a29      	ldr	r2, [pc, #164]	; (8002140 <HAL_RCC_OscConfig+0x3f0>)
 800209c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_OscConfig+0x3f4>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020a4:	f7fe feb8 	bl	8000e18 <HAL_GetTick>
 80020a8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCC_OscConfig+0x3f0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe feb0 	bl	8000e18 <HAL_GetTick>
 80020b8:	1b00      	subs	r0, r0, r4
 80020ba:	2802      	cmp	r0, #2
 80020bc:	d9f5      	bls.n	80020aa <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80020be:	2003      	movs	r0, #3
 80020c0:	e02f      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80020c2:	2000      	movs	r0, #0
 80020c4:	e02d      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
 80020c6:	2000      	movs	r0, #0
 80020c8:	e02b      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d02b      	beq.n	8002126 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_RCC_OscConfig+0x3f0>)
 80020d0:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80020d6:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d8:	4291      	cmp	r1, r2
 80020da:	d126      	bne.n	800212a <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e0:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	428a      	cmp	r2, r1
 80020e4:	d123      	bne.n	800212e <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80020ec:	401a      	ands	r2, r3
 80020ee:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80020f2:	d11e      	bne.n	8002132 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80020f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80020fa:	0852      	lsrs	r2, r2, #1
 80020fc:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020fe:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002102:	d118      	bne.n	8002136 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002104:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002108:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800210a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800210e:	d114      	bne.n	800213a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8002110:	2000      	movs	r0, #0
 8002112:	e006      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8002114:	2001      	movs	r0, #1
}
 8002116:	4770      	bx	lr
        return HAL_ERROR;
 8002118:	2001      	movs	r0, #1
 800211a:	e002      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 800211c:	2001      	movs	r0, #1
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8002120:	2000      	movs	r0, #0
}
 8002122:	b002      	add	sp, #8
 8002124:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002126:	2001      	movs	r0, #1
 8002128:	e7fb      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 800212a:	2001      	movs	r0, #1
 800212c:	e7f9      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
 800212e:	2001      	movs	r0, #1
 8002130:	e7f7      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
 8002132:	2001      	movs	r0, #1
 8002134:	e7f5      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
 8002136:	2001      	movs	r0, #1
 8002138:	e7f3      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
 800213a:	2001      	movs	r0, #1
 800213c:	e7f1      	b.n	8002122 <HAL_RCC_OscConfig+0x3d2>
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	42470060 	.word	0x42470060

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800214a:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc0>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d053      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0xb6>
 8002156:	2b08      	cmp	r3, #8
 8002158:	d153      	bne.n	8002202 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc0>)
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002168:	d028      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216a:	4b27      	ldr	r3, [pc, #156]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc0>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002172:	0158      	lsls	r0, r3, #5
 8002174:	2100      	movs	r1, #0
 8002176:	1ac0      	subs	r0, r0, r3
 8002178:	f161 0100 	sbc.w	r1, r1, #0
 800217c:	018e      	lsls	r6, r1, #6
 800217e:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8002182:	0187      	lsls	r7, r0, #6
 8002184:	1a3c      	subs	r4, r7, r0
 8002186:	eb66 0501 	sbc.w	r5, r6, r1
 800218a:	00e9      	lsls	r1, r5, #3
 800218c:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002190:	00e0      	lsls	r0, r4, #3
 8002192:	18c0      	adds	r0, r0, r3
 8002194:	f141 0100 	adc.w	r1, r1, #0
 8002198:	024b      	lsls	r3, r1, #9
 800219a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800219e:	0244      	lsls	r4, r0, #9
 80021a0:	4620      	mov	r0, r4
 80021a2:	4619      	mov	r1, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	f7fe f80f 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80021b6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80021ba:	e023      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80021c4:	015c      	lsls	r4, r3, #5
 80021c6:	2500      	movs	r5, #0
 80021c8:	1ae4      	subs	r4, r4, r3
 80021ca:	f165 0500 	sbc.w	r5, r5, #0
 80021ce:	01ae      	lsls	r6, r5, #6
 80021d0:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80021d4:	01a7      	lsls	r7, r4, #6
 80021d6:	1b38      	subs	r0, r7, r4
 80021d8:	eb66 0105 	sbc.w	r1, r6, r5
 80021dc:	00cc      	lsls	r4, r1, #3
 80021de:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80021e2:	00c5      	lsls	r5, r0, #3
 80021e4:	18e8      	adds	r0, r5, r3
 80021e6:	f144 0100 	adc.w	r1, r4, #0
 80021ea:	028b      	lsls	r3, r1, #10
 80021ec:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80021f0:	0284      	lsls	r4, r0, #10
 80021f2:	4620      	mov	r0, r4
 80021f4:	4619      	mov	r1, r3
 80021f6:	2300      	movs	r3, #0
 80021f8:	f7fd ffe6 	bl	80001c8 <__aeabi_uldivmod>
 80021fc:	e7d5      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 80021fe:	4803      	ldr	r0, [pc, #12]	; (800220c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002200:	e000      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002202:	4803      	ldr	r0, [pc, #12]	; (8002210 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	007a1200 	.word	0x007a1200
 8002210:	00f42400 	.word	0x00f42400

08002214 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002214:	2800      	cmp	r0, #0
 8002216:	f000 809b 	beq.w	8002350 <HAL_RCC_ClockConfig+0x13c>
{
 800221a:	b570      	push	{r4, r5, r6, lr}
 800221c:	460d      	mov	r5, r1
 800221e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <HAL_RCC_ClockConfig+0x14c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	428b      	cmp	r3, r1
 800222a:	d208      	bcs.n	800223e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222c:	b2cb      	uxtb	r3, r1
 800222e:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_RCC_ClockConfig+0x14c>)
 8002230:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	428b      	cmp	r3, r1
 800223a:	f040 808b 	bne.w	8002354 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	f013 0f02 	tst.w	r3, #2
 8002244:	d017      	beq.n	8002276 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002246:	f013 0f04 	tst.w	r3, #4
 800224a:	d004      	beq.n	8002256 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4a45      	ldr	r2, [pc, #276]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 800224e:	6893      	ldr	r3, [r2, #8]
 8002250:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002254:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	f013 0f08 	tst.w	r3, #8
 800225c:	d004      	beq.n	8002268 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225e:	4a41      	ldr	r2, [pc, #260]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 8002260:	6893      	ldr	r3, [r2, #8]
 8002262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002266:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4a3e      	ldr	r2, [pc, #248]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 800226a:	6893      	ldr	r3, [r2, #8]
 800226c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002270:	68a1      	ldr	r1, [r4, #8]
 8002272:	430b      	orrs	r3, r1
 8002274:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	f013 0f01 	tst.w	r3, #1
 800227c:	d032      	beq.n	80022e4 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	6863      	ldr	r3, [r4, #4]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d021      	beq.n	80022c8 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002284:	1e9a      	subs	r2, r3, #2
 8002286:	2a01      	cmp	r2, #1
 8002288:	d925      	bls.n	80022d6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	4a36      	ldr	r2, [pc, #216]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	f012 0f02 	tst.w	r2, #2
 8002292:	d061      	beq.n	8002358 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002294:	4933      	ldr	r1, [pc, #204]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 8002296:	688a      	ldr	r2, [r1, #8]
 8002298:	f022 0203 	bic.w	r2, r2, #3
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80022a0:	f7fe fdba 	bl	8000e18 <HAL_GetTick>
 80022a4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	6862      	ldr	r2, [r4, #4]
 80022b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022b4:	d016      	beq.n	80022e4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b6:	f7fe fdaf 	bl	8000e18 <HAL_GetTick>
 80022ba:	1b80      	subs	r0, r0, r6
 80022bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80022c0:	4298      	cmp	r0, r3
 80022c2:	d9f0      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80022c4:	2003      	movs	r0, #3
 80022c6:	e042      	b.n	800234e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c8:	4a26      	ldr	r2, [pc, #152]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80022d0:	d1e0      	bne.n	8002294 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80022d2:	2001      	movs	r0, #1
 80022d4:	e03b      	b.n	800234e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4a23      	ldr	r2, [pc, #140]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80022de:	d1d9      	bne.n	8002294 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80022e0:	2001      	movs	r0, #1
 80022e2:	e034      	b.n	800234e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_RCC_ClockConfig+0x14c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	42ab      	cmp	r3, r5
 80022ee:	d907      	bls.n	8002300 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f0:	b2ea      	uxtb	r2, r5
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_ClockConfig+0x14c>)
 80022f4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	42ab      	cmp	r3, r5
 80022fe:	d12d      	bne.n	800235c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	f013 0f04 	tst.w	r3, #4
 8002306:	d006      	beq.n	8002316 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4a16      	ldr	r2, [pc, #88]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 800230a:	6893      	ldr	r3, [r2, #8]
 800230c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002310:	68e1      	ldr	r1, [r4, #12]
 8002312:	430b      	orrs	r3, r1
 8002314:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	f013 0f08 	tst.w	r3, #8
 800231c:	d007      	beq.n	800232e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231e:	4a11      	ldr	r2, [pc, #68]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 8002320:	6893      	ldr	r3, [r2, #8]
 8002322:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002326:	6921      	ldr	r1, [r4, #16]
 8002328:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800232c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800232e:	f7ff ff0b 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <HAL_RCC_ClockConfig+0x150>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800233a:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <HAL_RCC_ClockConfig+0x154>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	40d8      	lsrs	r0, r3
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x158>)
 8002342:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_RCC_ClockConfig+0x15c>)
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	f7fe fd1a 	bl	8000d80 <HAL_InitTick>
  return HAL_OK;
 800234c:	2000      	movs	r0, #0
}
 800234e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002350:	2001      	movs	r0, #1
}
 8002352:	4770      	bx	lr
      return HAL_ERROR;
 8002354:	2001      	movs	r0, #1
 8002356:	e7fa      	b.n	800234e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002358:	2001      	movs	r0, #1
 800235a:	e7f8      	b.n	800234e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800235c:	2001      	movs	r0, #1
 800235e:	e7f6      	b.n	800234e <HAL_RCC_ClockConfig+0x13a>
 8002360:	40023c00 	.word	0x40023c00
 8002364:	40023800 	.word	0x40023800
 8002368:	0800570c 	.word	0x0800570c
 800236c:	20000400 	.word	0x20000400
 8002370:	20000408 	.word	0x20000408

08002374 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002374:	4b01      	ldr	r3, [pc, #4]	; (800237c <HAL_RCC_GetHCLKFreq+0x8>)
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000400 	.word	0x20000400

08002380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002380:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002382:	f7ff fff7 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800238e:	4a03      	ldr	r2, [pc, #12]	; (800239c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
}
 8002392:	40d8      	lsrs	r0, r3
 8002394:	bd08      	pop	{r3, pc}
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	0800571c 	.word	0x0800571c

080023a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023a2:	f7ff ffe7 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80023ae:	4a03      	ldr	r2, [pc, #12]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80023b2:	40d8      	lsrs	r0, r3
 80023b4:	bd08      	pop	{r3, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	0800571c 	.word	0x0800571c

080023c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023c0:	b530      	push	{r4, r5, lr}
 80023c2:	b083      	sub	sp, #12
 80023c4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80023c6:	6803      	ldr	r3, [r0, #0]
 80023c8:	f013 0f05 	tst.w	r3, #5
 80023cc:	d106      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	f013 0f02 	tst.w	r3, #2
 80023d4:	d12e      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80023d6:	2000      	movs	r0, #0
}
 80023d8:	b003      	add	sp, #12
 80023da:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80023dc:	4b49      	ldr	r3, [pc, #292]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80023e2:	f7fe fd19 	bl	8000e18 <HAL_GetTick>
 80023e6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023e8:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80023f0:	d006      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023f2:	f7fe fd11 	bl	8000e18 <HAL_GetTick>
 80023f6:	1b43      	subs	r3, r0, r5
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d9f5      	bls.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 80023fc:	2003      	movs	r0, #3
 80023fe:	e7eb      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002400:	6862      	ldr	r2, [r4, #4]
 8002402:	68a3      	ldr	r3, [r4, #8]
 8002404:	071b      	lsls	r3, r3, #28
 8002406:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800240a:	4a3f      	ldr	r2, [pc, #252]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800240c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002410:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002416:	f7fe fcff 	bl	8000e18 <HAL_GetTick>
 800241a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800241c:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002424:	d1d3      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002426:	f7fe fcf7 	bl	8000e18 <HAL_GetTick>
 800242a:	1b43      	subs	r3, r0, r5
 800242c:	2b02      	cmp	r3, #2
 800242e:	d9f5      	bls.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002430:	2003      	movs	r0, #3
 8002432:	e7d1      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002434:	2300      	movs	r3, #0
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800243a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800243c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800244c:	4a2f      	ldr	r2, [pc, #188]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002456:	f7fe fcdf 	bl	8000e18 <HAL_GetTick>
 800245a:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002464:	d106      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002466:	f7fe fcd7 	bl	8000e18 <HAL_GetTick>
 800246a:	1b43      	subs	r3, r0, r5
 800246c:	2b02      	cmp	r3, #2
 800246e:	d9f5      	bls.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8002470:	2003      	movs	r0, #3
 8002472:	e7b1      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002478:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800247c:	d012      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800247e:	68e2      	ldr	r2, [r4, #12]
 8002480:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002484:	429a      	cmp	r2, r3
 8002486:	d00d      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800248a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800248c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002490:	491f      	ldr	r1, [pc, #124]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002492:	2001      	movs	r0, #1
 8002494:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002496:	2000      	movs	r0, #0
 8002498:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 800249a:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	f013 0f01 	tst.w	r3, #1
 80024a2:	d113      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a4:	68e3      	ldr	r3, [r4, #12]
 80024a6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80024aa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80024ae:	d01e      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80024b0:	4a15      	ldr	r2, [pc, #84]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80024b2:	6893      	ldr	r3, [r2, #8]
 80024b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024b8:	6093      	str	r3, [r2, #8]
 80024ba:	4913      	ldr	r1, [pc, #76]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80024bc:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80024be:	68e2      	ldr	r2, [r4, #12]
 80024c0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80024c4:	4313      	orrs	r3, r2
 80024c6:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 80024c8:	2000      	movs	r0, #0
 80024ca:	e785      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 80024cc:	f7fe fca4 	bl	8000e18 <HAL_GetTick>
 80024d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	f013 0f02 	tst.w	r3, #2
 80024da:	d1e3      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe fc9c 	bl	8000e18 <HAL_GetTick>
 80024e0:	1b40      	subs	r0, r0, r5
 80024e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80024e6:	4298      	cmp	r0, r3
 80024e8:	d9f3      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x112>
            return HAL_TIMEOUT;
 80024ea:	2003      	movs	r0, #3
 80024ec:	e774      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ee:	4906      	ldr	r1, [pc, #24]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80024f0:	688a      	ldr	r2, [r1, #8]
 80024f2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80024f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80024fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
 8002502:	e7da      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002504:	42470068 	.word	0x42470068
 8002508:	40023800 	.word	0x40023800
 800250c:	40007000 	.word	0x40007000
 8002510:	42470e40 	.word	0x42470e40

08002514 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002514:	2801      	cmp	r0, #1
 8002516:	d001      	beq.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8002518:	2000      	movs	r0, #0
 800251a:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800251e:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8002520:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8002524:	d003      	beq.n	800252e <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
 8002526:	2b01      	cmp	r3, #1
 8002528:	d123      	bne.n	8002572 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800252a:	4814      	ldr	r0, [pc, #80]	; (800257c <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 800252c:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002536:	d014      	beq.n	8002562 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002540:	480f      	ldr	r0, [pc, #60]	; (8002580 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 8002542:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002546:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002548:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800254c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002550:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002554:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002558:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800255c:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8002560:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800256a:	4806      	ldr	r0, [pc, #24]	; (8002584 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 800256c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002570:	e7e9      	b.n	8002546 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002572:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	00bb8000 	.word	0x00bb8000
 8002580:	007a1200 	.word	0x007a1200
 8002584:	00f42400 	.word	0x00f42400

08002588 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002588:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258a:	f102 030c 	add.w	r3, r2, #12
 800258e:	e853 3f00 	ldrex	r3, [r3]
 8002592:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002596:	320c      	adds	r2, #12
 8002598:	e842 3100 	strex	r1, r3, [r2]
 800259c:	2900      	cmp	r1, #0
 800259e:	d1f3      	bne.n	8002588 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025a0:	2320      	movs	r3, #32
 80025a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80025a6:	4770      	bx	lr

080025a8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025aa:	f102 030c 	add.w	r3, r2, #12
 80025ae:	e853 3f00 	ldrex	r3, [r3]
 80025b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b6:	320c      	adds	r2, #12
 80025b8:	e842 3100 	strex	r1, r3, [r2]
 80025bc:	2900      	cmp	r1, #0
 80025be:	d1f3      	bne.n	80025a8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c2:	f102 0314 	add.w	r3, r2, #20
 80025c6:	e853 3f00 	ldrex	r3, [r3]
 80025ca:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ce:	3214      	adds	r2, #20
 80025d0:	e842 3100 	strex	r1, r3, [r2]
 80025d4:	2900      	cmp	r1, #0
 80025d6:	d1f3      	bne.n	80025c0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d005      	beq.n	80025ea <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025de:	2320      	movs	r3, #32
 80025e0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e4:	2300      	movs	r3, #0
 80025e6:	6303      	str	r3, [r0, #48]	; 0x30
}
 80025e8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ec:	f102 030c 	add.w	r3, r2, #12
 80025f0:	e853 3f00 	ldrex	r3, [r3]
 80025f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	320c      	adds	r2, #12
 80025fa:	e842 3100 	strex	r1, r3, [r2]
 80025fe:	2900      	cmp	r1, #0
 8002600:	d1f3      	bne.n	80025ea <UART_EndRxTransfer+0x42>
 8002602:	e7ec      	b.n	80025de <UART_EndRxTransfer+0x36>

08002604 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002604:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b21      	cmp	r3, #33	; 0x21
 800260c:	d001      	beq.n	8002612 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800260e:	2002      	movs	r0, #2
  }
}
 8002610:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002612:	6883      	ldr	r3, [r0, #8]
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002618:	d017      	beq.n	800264a <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800261a:	6a03      	ldr	r3, [r0, #32]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	6202      	str	r2, [r0, #32]
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	6803      	ldr	r3, [r0, #0]
 8002624:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002626:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29b      	uxth	r3, r3
 800262e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002630:	b94b      	cbnz	r3, 8002646 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002632:	6802      	ldr	r2, [r0, #0]
 8002634:	68d3      	ldr	r3, [r2, #12]
 8002636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800263a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800263c:	6802      	ldr	r2, [r0, #0]
 800263e:	68d3      	ldr	r3, [r2, #12]
 8002640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002644:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002646:	2000      	movs	r0, #0
 8002648:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800264a:	6903      	ldr	r3, [r0, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e4      	bne.n	800261a <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002650:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	6802      	ldr	r2, [r0, #0]
 8002656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265a:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800265c:	6a03      	ldr	r3, [r0, #32]
 800265e:	3302      	adds	r3, #2
 8002660:	6203      	str	r3, [r0, #32]
 8002662:	e7e0      	b.n	8002626 <UART_Transmit_IT+0x22>

08002664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002668:	6802      	ldr	r2, [r0, #0]
 800266a:	6913      	ldr	r3, [r2, #16]
 800266c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002670:	68c1      	ldr	r1, [r0, #12]
 8002672:	430b      	orrs	r3, r1
 8002674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002676:	6883      	ldr	r3, [r0, #8]
 8002678:	6902      	ldr	r2, [r0, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	6942      	ldr	r2, [r0, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	69c2      	ldr	r2, [r0, #28]
 8002682:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002684:	6801      	ldr	r1, [r0, #0]
 8002686:	68cb      	ldr	r3, [r1, #12]
 8002688:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800268c:	f023 030c 	bic.w	r3, r3, #12
 8002690:	4313      	orrs	r3, r2
 8002692:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002694:	6802      	ldr	r2, [r0, #0]
 8002696:	6953      	ldr	r3, [r2, #20]
 8002698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269c:	6981      	ldr	r1, [r0, #24]
 800269e:	430b      	orrs	r3, r1
 80026a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	4a34      	ldr	r2, [pc, #208]	; (8002778 <UART_SetConfig+0x114>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d006      	beq.n	80026b8 <UART_SetConfig+0x54>
 80026aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d002      	beq.n	80026b8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026b2:	f7ff fe65 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 80026b6:	e001      	b.n	80026bc <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80026b8:	f7ff fe72 	bl	80023a0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026bc:	69e3      	ldr	r3, [r4, #28]
 80026be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c2:	d02a      	beq.n	800271a <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c4:	2600      	movs	r6, #0
 80026c6:	1805      	adds	r5, r0, r0
 80026c8:	eb46 0106 	adc.w	r1, r6, r6
 80026cc:	182d      	adds	r5, r5, r0
 80026ce:	eb46 0101 	adc.w	r1, r6, r1
 80026d2:	00cb      	lsls	r3, r1, #3
 80026d4:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80026d8:	00ea      	lsls	r2, r5, #3
 80026da:	4615      	mov	r5, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	6863      	ldr	r3, [r4, #4]
 80026e0:	009a      	lsls	r2, r3, #2
 80026e2:	0f9b      	lsrs	r3, r3, #30
 80026e4:	1828      	adds	r0, r5, r0
 80026e6:	eb46 0101 	adc.w	r1, r6, r1
 80026ea:	f7fd fd6d 	bl	80001c8 <__aeabi_uldivmod>
 80026ee:	4d23      	ldr	r5, [pc, #140]	; (800277c <UART_SetConfig+0x118>)
 80026f0:	fba5 3200 	umull	r3, r2, r5, r0
 80026f4:	0951      	lsrs	r1, r2, #5
 80026f6:	2364      	movs	r3, #100	; 0x64
 80026f8:	fb03 0311 	mls	r3, r3, r1, r0
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	3332      	adds	r3, #50	; 0x32
 8002700:	fba5 2303 	umull	r2, r3, r5, r3
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800270a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	6821      	ldr	r1, [r4, #0]
 8002714:	4413      	add	r3, r2
 8002716:	608b      	str	r3, [r1, #8]
  }
}
 8002718:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800271a:	2600      	movs	r6, #0
 800271c:	1805      	adds	r5, r0, r0
 800271e:	eb46 0106 	adc.w	r1, r6, r6
 8002722:	182d      	adds	r5, r5, r0
 8002724:	eb46 0101 	adc.w	r1, r6, r1
 8002728:	00cb      	lsls	r3, r1, #3
 800272a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800272e:	00ea      	lsls	r2, r5, #3
 8002730:	4615      	mov	r5, r2
 8002732:	4619      	mov	r1, r3
 8002734:	6862      	ldr	r2, [r4, #4]
 8002736:	4633      	mov	r3, r6
 8002738:	1892      	adds	r2, r2, r2
 800273a:	eb46 0303 	adc.w	r3, r6, r3
 800273e:	1828      	adds	r0, r5, r0
 8002740:	eb46 0101 	adc.w	r1, r6, r1
 8002744:	f7fd fd40 	bl	80001c8 <__aeabi_uldivmod>
 8002748:	4d0c      	ldr	r5, [pc, #48]	; (800277c <UART_SetConfig+0x118>)
 800274a:	fba5 3200 	umull	r3, r2, r5, r0
 800274e:	0951      	lsrs	r1, r2, #5
 8002750:	2364      	movs	r3, #100	; 0x64
 8002752:	fb03 0311 	mls	r3, r3, r1, r0
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	3332      	adds	r3, #50	; 0x32
 800275a:	fba5 2303 	umull	r2, r3, r5, r3
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	005a      	lsls	r2, r3, #1
 8002762:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002766:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	6821      	ldr	r1, [r4, #0]
 8002770:	4413      	add	r3, r2
 8002772:	608b      	str	r3, [r1, #8]
 8002774:	e7d0      	b.n	8002718 <UART_SetConfig+0xb4>
 8002776:	bf00      	nop
 8002778:	40011000 	.word	0x40011000
 800277c:	51eb851f 	.word	0x51eb851f

08002780 <HAL_UART_Init>:
  if (huart == NULL)
 8002780:	b358      	cbz	r0, 80027da <HAL_UART_Init+0x5a>
{
 8002782:	b510      	push	{r4, lr}
 8002784:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002786:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800278a:	b30b      	cbz	r3, 80027d0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800278c:	2324      	movs	r3, #36	; 0x24
 800278e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002792:	6822      	ldr	r2, [r4, #0]
 8002794:	68d3      	ldr	r3, [r2, #12]
 8002796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800279a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff ff61 	bl	8002664 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a2:	6822      	ldr	r2, [r4, #0]
 80027a4:	6913      	ldr	r3, [r2, #16]
 80027a6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80027aa:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ac:	6822      	ldr	r2, [r4, #0]
 80027ae:	6953      	ldr	r3, [r2, #20]
 80027b0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80027b4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80027b6:	6822      	ldr	r2, [r4, #0]
 80027b8:	68d3      	ldr	r3, [r2, #12]
 80027ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027be:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c0:	2000      	movs	r0, #0
 80027c2:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027c4:	2320      	movs	r3, #32
 80027c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80027ce:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80027d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80027d4:	f7fe f948 	bl	8000a68 <HAL_UART_MspInit>
 80027d8:	e7d8      	b.n	800278c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80027da:	2001      	movs	r0, #1
}
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_UART_Transmit_DMA>:
{
 80027e0:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80027e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d138      	bne.n	800285e <HAL_UART_Transmit_DMA+0x7e>
 80027ec:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80027ee:	2900      	cmp	r1, #0
 80027f0:	d037      	beq.n	8002862 <HAL_UART_Transmit_DMA+0x82>
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	d037      	beq.n	8002866 <HAL_UART_Transmit_DMA+0x86>
    __HAL_LOCK(huart);
 80027f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d035      	beq.n	800286a <HAL_UART_Transmit_DMA+0x8a>
 80027fe:	2301      	movs	r3, #1
 8002800:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 8002804:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8002806:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8002808:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280a:	2500      	movs	r5, #0
 800280c:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800280e:	2321      	movs	r3, #33	; 0x21
 8002810:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002814:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002816:	4816      	ldr	r0, [pc, #88]	; (8002870 <HAL_UART_Transmit_DMA+0x90>)
 8002818:	63d8      	str	r0, [r3, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800281a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800281c:	4815      	ldr	r0, [pc, #84]	; (8002874 <HAL_UART_Transmit_DMA+0x94>)
 800281e:	6418      	str	r0, [r3, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002822:	4815      	ldr	r0, [pc, #84]	; (8002878 <HAL_UART_Transmit_DMA+0x98>)
 8002824:	64d8      	str	r0, [r3, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 8002826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002828:	651d      	str	r5, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800282a:	6820      	ldr	r0, [r4, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	1d02      	adds	r2, r0, #4
 8002830:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002832:	f7fe fc6b 	bl	800110c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800283c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800283e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002842:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002844:	f102 0314 	add.w	r3, r2, #20
 8002848:	e853 3f00 	ldrex	r3, [r3]
 800284c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002850:	3214      	adds	r2, #20
 8002852:	e842 3100 	strex	r1, r3, [r2]
 8002856:	2900      	cmp	r1, #0
 8002858:	d1f3      	bne.n	8002842 <HAL_UART_Transmit_DMA+0x62>
    return HAL_OK;
 800285a:	2000      	movs	r0, #0
 800285c:	e000      	b.n	8002860 <HAL_UART_Transmit_DMA+0x80>
    return HAL_BUSY;
 800285e:	2002      	movs	r0, #2
}
 8002860:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002862:	2001      	movs	r0, #1
 8002864:	e7fc      	b.n	8002860 <HAL_UART_Transmit_DMA+0x80>
 8002866:	2001      	movs	r0, #1
 8002868:	e7fa      	b.n	8002860 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 800286a:	2002      	movs	r0, #2
 800286c:	e7f8      	b.n	8002860 <HAL_UART_Transmit_DMA+0x80>
 800286e:	bf00      	nop
 8002870:	0800287d 	.word	0x0800287d
 8002874:	080028e5 	.word	0x080028e5
 8002878:	080028f1 	.word	0x080028f1

0800287c <UART_DMATransmitCplt>:
{
 800287c:	b508      	push	{r3, lr}
 800287e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002880:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f413 7f80 	tst.w	r3, #256	; 0x100
 800288a:	d11a      	bne.n	80028c2 <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 800288c:	2300      	movs	r3, #0
 800288e:	84c3      	strh	r3, [r0, #38]	; 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002890:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002892:	f102 0314 	add.w	r3, r2, #20
 8002896:	e853 3f00 	ldrex	r3, [r3]
 800289a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289e:	3214      	adds	r2, #20
 80028a0:	e842 3100 	strex	r1, r3, [r2]
 80028a4:	2900      	cmp	r1, #0
 80028a6:	d1f3      	bne.n	8002890 <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028a8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	f102 030c 	add.w	r3, r2, #12
 80028ae:	e853 3f00 	ldrex	r3, [r3]
 80028b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	320c      	adds	r2, #12
 80028b8:	e842 3100 	strex	r1, r3, [r2]
 80028bc:	2900      	cmp	r1, #0
 80028be:	d1f3      	bne.n	80028a8 <UART_DMATransmitCplt+0x2c>
}
 80028c0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80028c2:	f7fe fa53 	bl	8000d6c <HAL_UART_TxCpltCallback>
}
 80028c6:	e7fb      	b.n	80028c0 <UART_DMATransmitCplt+0x44>

080028c8 <UART_EndTransmit_IT>:
{
 80028c8:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028ca:	6801      	ldr	r1, [r0, #0]
 80028cc:	68ca      	ldr	r2, [r1, #12]
 80028ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d2:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80028d4:	2220      	movs	r2, #32
 80028d6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80028da:	f7fe fa47 	bl	8000d6c <HAL_UART_TxCpltCallback>
}
 80028de:	2000      	movs	r0, #0
 80028e0:	bd08      	pop	{r3, pc}

080028e2 <HAL_UART_TxHalfCpltCallback>:
}
 80028e2:	4770      	bx	lr

080028e4 <UART_DMATxHalfCplt>:
{
 80028e4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80028e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80028e8:	f7ff fffb 	bl	80028e2 <HAL_UART_TxHalfCpltCallback>
}
 80028ec:	bd08      	pop	{r3, pc}

080028ee <HAL_UART_ErrorCallback>:
}
 80028ee:	4770      	bx	lr

080028f0 <UART_DMAError>:
{
 80028f0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80028f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b21      	cmp	r3, #33	; 0x21
 8002900:	d010      	beq.n	8002924 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800290a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b22      	cmp	r3, #34	; 0x22
 8002912:	d011      	beq.n	8002938 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002916:	f043 0310 	orr.w	r3, r3, #16
 800291a:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800291c:	4620      	mov	r0, r4
 800291e:	f7ff ffe6 	bl	80028ee <HAL_UART_ErrorCallback>
}
 8002922:	bd10      	pop	{r4, pc}
 8002924:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002928:	2a00      	cmp	r2, #0
 800292a:	d0ea      	beq.n	8002902 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800292c:	2300      	movs	r3, #0
 800292e:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002930:	4620      	mov	r0, r4
 8002932:	f7ff fe29 	bl	8002588 <UART_EndTxTransfer>
 8002936:	e7e4      	b.n	8002902 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002938:	2a00      	cmp	r2, #0
 800293a:	d0eb      	beq.n	8002914 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800293c:	2300      	movs	r3, #0
 800293e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002940:	4620      	mov	r0, r4
 8002942:	f7ff fe31 	bl	80025a8 <UART_EndRxTransfer>
 8002946:	e7e5      	b.n	8002914 <UART_DMAError+0x24>

08002948 <UART_DMAAbortOnError>:
{
 8002948:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800294a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800294c:	2300      	movs	r3, #0
 800294e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002950:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002952:	f7ff ffcc 	bl	80028ee <HAL_UART_ErrorCallback>
}
 8002956:	bd08      	pop	{r3, pc}

08002958 <HAL_UARTEx_RxEventCallback>:
}
 8002958:	4770      	bx	lr

0800295a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800295a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b22      	cmp	r3, #34	; 0x22
 8002962:	d167      	bne.n	8002a34 <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002964:	6883      	ldr	r3, [r0, #8]
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296a:	d04d      	beq.n	8002a08 <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800296c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002972:	d004      	beq.n	800297e <UART_Receive_IT+0x24>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d154      	bne.n	8002a22 <UART_Receive_IT+0xc8>
 8002978:	6903      	ldr	r3, [r0, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d151      	bne.n	8002a22 <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800297e:	6803      	ldr	r3, [r0, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002984:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002986:	3301      	adds	r3, #1
 8002988:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800298a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29b      	uxth	r3, r3
 8002992:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002994:	2b00      	cmp	r3, #0
 8002996:	d14f      	bne.n	8002a38 <UART_Receive_IT+0xde>
{
 8002998:	b500      	push	{lr}
 800299a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800299c:	6802      	ldr	r2, [r0, #0]
 800299e:	68d3      	ldr	r3, [r2, #12]
 80029a0:	f023 0320 	bic.w	r3, r3, #32
 80029a4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029a6:	6802      	ldr	r2, [r0, #0]
 80029a8:	68d3      	ldr	r3, [r2, #12]
 80029aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ae:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029b0:	6802      	ldr	r2, [r0, #0]
 80029b2:	6953      	ldr	r3, [r2, #20]
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80029ba:	2320      	movs	r3, #32
 80029bc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d133      	bne.n	8002a2e <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c6:	2300      	movs	r3, #0
 80029c8:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029cc:	f102 030c 	add.w	r3, r2, #12
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d8:	320c      	adds	r2, #12
 80029da:	e842 3100 	strex	r1, r3, [r2]
 80029de:	2900      	cmp	r1, #0
 80029e0:	d1f3      	bne.n	80029ca <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029e2:	6803      	ldr	r3, [r0, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	f012 0f10 	tst.w	r2, #16
 80029ea:	d006      	beq.n	80029fa <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ec:	2200      	movs	r2, #0
 80029ee:	9201      	str	r2, [sp, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	9201      	str	r2, [sp, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029fa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80029fc:	f7ff ffac 	bl	8002958 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8002a00:	2000      	movs	r0, #0
}
 8002a02:	b003      	add	sp, #12
 8002a04:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a08:	6902      	ldr	r2, [r0, #16]
 8002a0a:	2a00      	cmp	r2, #0
 8002a0c:	d1ae      	bne.n	800296c <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a0e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a10:	6803      	ldr	r3, [r0, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a18:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002a1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	6283      	str	r3, [r0, #40]	; 0x28
 8002a20:	e7b3      	b.n	800298a <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a22:	6803      	ldr	r3, [r0, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2a:	7013      	strb	r3, [r2, #0]
 8002a2c:	e7aa      	b.n	8002984 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8002a2e:	f7fe f981 	bl	8000d34 <HAL_UART_RxCpltCallback>
 8002a32:	e7e5      	b.n	8002a00 <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 8002a34:	2002      	movs	r0, #2
 8002a36:	4770      	bx	lr
    return HAL_OK;
 8002a38:	2000      	movs	r0, #0
}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_UART_IRQHandler>:
{
 8002a3c:	b530      	push	{r4, r5, lr}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a42:	6802      	ldr	r2, [r0, #0]
 8002a44:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a46:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a48:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8002a4a:	f013 050f 	ands.w	r5, r3, #15
 8002a4e:	d105      	bne.n	8002a5c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a50:	f013 0f20 	tst.w	r3, #32
 8002a54:	d002      	beq.n	8002a5c <HAL_UART_IRQHandler+0x20>
 8002a56:	f010 0f20 	tst.w	r0, #32
 8002a5a:	d119      	bne.n	8002a90 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a5c:	b12d      	cbz	r5, 8002a6a <HAL_UART_IRQHandler+0x2e>
 8002a5e:	f011 0101 	ands.w	r1, r1, #1
 8002a62:	d119      	bne.n	8002a98 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a64:	f410 7f90 	tst.w	r0, #288	; 0x120
 8002a68:	d116      	bne.n	8002a98 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002a6c:	2901      	cmp	r1, #1
 8002a6e:	d07d      	beq.n	8002b6c <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a74:	d003      	beq.n	8002a7e <HAL_UART_IRQHandler+0x42>
 8002a76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a7a:	f040 8115 	bne.w	8002ca8 <HAL_UART_IRQHandler+0x26c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a82:	d003      	beq.n	8002a8c <HAL_UART_IRQHandler+0x50>
 8002a84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a88:	f040 8112 	bne.w	8002cb0 <HAL_UART_IRQHandler+0x274>
}
 8002a8c:	b003      	add	sp, #12
 8002a8e:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff ff62 	bl	800295a <UART_Receive_IT>
      return;
 8002a96:	e7f9      	b.n	8002a8c <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a98:	f013 0f01 	tst.w	r3, #1
 8002a9c:	d006      	beq.n	8002aac <HAL_UART_IRQHandler+0x70>
 8002a9e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002aa2:	d003      	beq.n	8002aac <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aa4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aac:	f013 0f04 	tst.w	r3, #4
 8002ab0:	d004      	beq.n	8002abc <HAL_UART_IRQHandler+0x80>
 8002ab2:	b119      	cbz	r1, 8002abc <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ab4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ab6:	f042 0202 	orr.w	r2, r2, #2
 8002aba:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002abc:	f013 0f02 	tst.w	r3, #2
 8002ac0:	d004      	beq.n	8002acc <HAL_UART_IRQHandler+0x90>
 8002ac2:	b119      	cbz	r1, 8002acc <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ac4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ac6:	f042 0204 	orr.w	r2, r2, #4
 8002aca:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002acc:	f013 0f08 	tst.w	r3, #8
 8002ad0:	d007      	beq.n	8002ae2 <HAL_UART_IRQHandler+0xa6>
 8002ad2:	f010 0f20 	tst.w	r0, #32
 8002ad6:	d100      	bne.n	8002ada <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ad8:	b119      	cbz	r1, 8002ae2 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ada:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002adc:	f042 0208 	orr.w	r2, r2, #8
 8002ae0:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ae2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ae4:	2a00      	cmp	r2, #0
 8002ae6:	d0d1      	beq.n	8002a8c <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ae8:	f013 0f20 	tst.w	r3, #32
 8002aec:	d002      	beq.n	8002af4 <HAL_UART_IRQHandler+0xb8>
 8002aee:	f010 0f20 	tst.w	r0, #32
 8002af2:	d129      	bne.n	8002b48 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002afc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002afe:	f012 0f08 	tst.w	r2, #8
 8002b02:	d100      	bne.n	8002b06 <HAL_UART_IRQHandler+0xca>
 8002b04:	b363      	cbz	r3, 8002b60 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7ff fd4e 	bl	80025a8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b14:	d020      	beq.n	8002b58 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b16:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	f102 0314 	add.w	r3, r2, #20
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	3214      	adds	r2, #20
 8002b26:	e842 3100 	strex	r1, r3, [r2]
 8002b2a:	2900      	cmp	r1, #0
 8002b2c:	d1f3      	bne.n	8002b16 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 8002b2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b30:	b173      	cbz	r3, 8002b50 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b32:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <HAL_UART_IRQHandler+0x27c>)
 8002b34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002b38:	f7fe fb67 	bl	800120a <HAL_DMA_Abort_IT>
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	d0a5      	beq.n	8002a8c <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002b42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002b44:	4798      	blx	r3
 8002b46:	e7a1      	b.n	8002a8c <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7ff ff06 	bl	800295a <UART_Receive_IT>
 8002b4e:	e7d1      	b.n	8002af4 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7ff fecc 	bl	80028ee <HAL_UART_ErrorCallback>
 8002b56:	e799      	b.n	8002a8c <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7ff fec8 	bl	80028ee <HAL_UART_ErrorCallback>
 8002b5e:	e795      	b.n	8002a8c <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8002b60:	4620      	mov	r0, r4
 8002b62:	f7ff fec4 	bl	80028ee <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8002b6a:	e78f      	b.n	8002a8c <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b6c:	f013 0f10 	tst.w	r3, #16
 8002b70:	f43f af7e 	beq.w	8002a70 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b74:	f010 0f10 	tst.w	r0, #16
 8002b78:	f43f af7a 	beq.w	8002a70 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	6813      	ldr	r3, [r2, #0]
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	6853      	ldr	r3, [r2, #4]
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8a:	6953      	ldr	r3, [r2, #20]
 8002b8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b90:	d050      	beq.n	8002c34 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b94:	6813      	ldr	r3, [r2, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f43f af76 	beq.w	8002a8c <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ba0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002ba2:	4299      	cmp	r1, r3
 8002ba4:	f67f af72 	bls.w	8002a8c <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8002ba8:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002baa:	69d3      	ldr	r3, [r2, #28]
 8002bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb0:	d037      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1e6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	f102 030c 	add.w	r3, r2, #12
 8002bb8:	e853 3f00 	ldrex	r3, [r3]
 8002bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	320c      	adds	r2, #12
 8002bc2:	e842 3100 	strex	r1, r3, [r2]
 8002bc6:	2900      	cmp	r1, #0
 8002bc8:	d1f3      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	f102 0314 	add.w	r3, r2, #20
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	3214      	adds	r2, #20
 8002bda:	e842 3100 	strex	r1, r3, [r2]
 8002bde:	2900      	cmp	r1, #0
 8002be0:	d1f3      	bne.n	8002bca <HAL_UART_IRQHandler+0x18e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	f102 0314 	add.w	r3, r2, #20
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	3214      	adds	r2, #20
 8002bf2:	e842 3100 	strex	r1, r3, [r2]
 8002bf6:	2900      	cmp	r1, #0
 8002bf8:	d1f3      	bne.n	8002be2 <HAL_UART_IRQHandler+0x1a6>
          huart->RxState = HAL_UART_STATE_READY;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c00:	2300      	movs	r3, #0
 8002c02:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c04:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c06:	f102 030c 	add.w	r3, r2, #12
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c12:	320c      	adds	r2, #12
 8002c14:	e842 3100 	strex	r1, r3, [r2]
 8002c18:	2900      	cmp	r1, #0
 8002c1a:	d1f3      	bne.n	8002c04 <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c1c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c1e:	f7fe faaa 	bl	8001176 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c22:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002c24:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	1ac9      	subs	r1, r1, r3
 8002c2a:	b289      	uxth	r1, r1
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff fe93 	bl	8002958 <HAL_UARTEx_RxEventCallback>
      return;
 8002c32:	e72b      	b.n	8002a8c <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c34:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002c36:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	1ac9      	subs	r1, r1, r3
 8002c3c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002c3e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f43f af22 	beq.w	8002a8c <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 8002c48:	2900      	cmp	r1, #0
 8002c4a:	f43f af1f 	beq.w	8002a8c <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c4e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	f102 030c 	add.w	r3, r2, #12
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5c:	320c      	adds	r2, #12
 8002c5e:	e842 3000 	strex	r0, r3, [r2]
 8002c62:	2800      	cmp	r0, #0
 8002c64:	d1f3      	bne.n	8002c4e <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c66:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	f102 0314 	add.w	r3, r2, #20
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	3214      	adds	r2, #20
 8002c76:	e842 3000 	strex	r0, r3, [r2]
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d1f3      	bne.n	8002c66 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8002c7e:	2320      	movs	r3, #32
 8002c80:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c84:	2300      	movs	r3, #0
 8002c86:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c88:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	f102 030c 	add.w	r3, r2, #12
 8002c8e:	e853 3f00 	ldrex	r3, [r3]
 8002c92:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	320c      	adds	r2, #12
 8002c98:	e842 3000 	strex	r0, r3, [r2]
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d1f3      	bne.n	8002c88 <HAL_UART_IRQHandler+0x24c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f7ff fe59 	bl	8002958 <HAL_UARTEx_RxEventCallback>
      return;
 8002ca6:	e6f1      	b.n	8002a8c <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7ff fcab 	bl	8002604 <UART_Transmit_IT>
    return;
 8002cae:	e6ed      	b.n	8002a8c <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f7ff fe09 	bl	80028c8 <UART_EndTransmit_IT>
    return;
 8002cb6:	e6e9      	b.n	8002a8c <HAL_UART_IRQHandler+0x50>
 8002cb8:	08002949 	.word	0x08002949

08002cbc <UART_Start_Receive_IT>:
{
 8002cbc:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8002cbe:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cc0:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002cc2:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cc8:	2222      	movs	r2, #34	; 0x22
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8002cce:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	68ca      	ldr	r2, [r1, #12]
 8002cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cda:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	694a      	ldr	r2, [r1, #20]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68d3      	ldr	r3, [r2, #12]
 8002cea:	f043 0320 	orr.w	r3, r3, #32
 8002cee:	60d3      	str	r3, [r2, #12]
}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_UART_Receive_IT>:
{
 8002cf2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d10d      	bne.n	8002d1a <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8002cfe:	b171      	cbz	r1, 8002d1e <HAL_UART_Receive_IT+0x2c>
 8002d00:	b17a      	cbz	r2, 8002d22 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8002d02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d00d      	beq.n	8002d26 <HAL_UART_Receive_IT+0x34>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d10:	2300      	movs	r3, #0
 8002d12:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d14:	f7ff ffd2 	bl	8002cbc <UART_Start_Receive_IT>
 8002d18:	e000      	b.n	8002d1c <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8002d1a:	2002      	movs	r0, #2
}
 8002d1c:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8002d1e:	2001      	movs	r0, #1
 8002d20:	e7fc      	b.n	8002d1c <HAL_UART_Receive_IT+0x2a>
 8002d22:	2001      	movs	r0, #1
 8002d24:	e7fa      	b.n	8002d1c <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8002d26:	2002      	movs	r0, #2
 8002d28:	e7f8      	b.n	8002d1c <HAL_UART_Receive_IT+0x2a>
	...

08002d2c <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8002d2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8002d2e:	4c0b      	ldr	r4, [pc, #44]	; (8002d5c <MX_PDM2PCM_Init+0x30>)
 8002d30:	2300      	movs	r3, #0
 8002d32:	8023      	strh	r3, [r4, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 8002d34:	8063      	strh	r3, [r4, #2]
  PDM1_filter_handler.high_pass_tap = 2122358088;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <MX_PDM2PCM_Init+0x34>)
 8002d38:	6063      	str	r3, [r4, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	8123      	strh	r3, [r4, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8002d3e:	8163      	strh	r3, [r4, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8002d40:	4620      	mov	r0, r4
 8002d42:	f001 fd61 	bl	8004808 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8002d46:	4907      	ldr	r1, [pc, #28]	; (8002d64 <MX_PDM2PCM_Init+0x38>)
 8002d48:	2302      	movs	r3, #2
 8002d4a:	800b      	strh	r3, [r1, #0]
  PDM1_filter_config.output_samples_number = 64;
 8002d4c:	2340      	movs	r3, #64	; 0x40
 8002d4e:	804b      	strh	r3, [r1, #2]
  PDM1_filter_config.mic_gain = 32;
 8002d50:	2320      	movs	r3, #32
 8002d52:	808b      	strh	r3, [r1, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8002d54:	4620      	mov	r0, r4
 8002d56:	f001 fde1 	bl	800491c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8002d5a:	bd10      	pop	{r4, pc}
 8002d5c:	20000678 	.word	0x20000678
 8002d60:	7e809d48 	.word	0x7e809d48
 8002d64:	20000670 	.word	0x20000670

08002d68 <D16_GENERIC>:
 8002d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6c:	b089      	sub	sp, #36	; 0x24
 8002d6e:	68d4      	ldr	r4, [r2, #12]
 8002d70:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8002d72:	6993      	ldr	r3, [r2, #24]
 8002d74:	9407      	str	r4, [sp, #28]
 8002d76:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8002d78:	9306      	str	r3, [sp, #24]
 8002d7a:	9402      	str	r4, [sp, #8]
 8002d7c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8002d80:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8002d84:	69d3      	ldr	r3, [r2, #28]
 8002d86:	6896      	ldr	r6, [r2, #8]
 8002d88:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8002d8a:	9103      	str	r1, [sp, #12]
 8002d8c:	2d00      	cmp	r5, #0
 8002d8e:	d066      	beq.n	8002e5e <D16_GENERIC+0xf6>
 8002d90:	f004 0510 	and.w	r5, r4, #16
 8002d94:	f004 0420 	and.w	r4, r4, #32
 8002d98:	9504      	str	r5, [sp, #16]
 8002d9a:	4938      	ldr	r1, [pc, #224]	; (8002e7c <D16_GENERIC+0x114>)
 8002d9c:	9405      	str	r4, [sp, #20]
 8002d9e:	f04f 0e00 	mov.w	lr, #0
 8002da2:	4635      	mov	r5, r6
 8002da4:	e04f      	b.n	8002e46 <D16_GENERIC+0xde>
 8002da6:	5d87      	ldrb	r7, [r0, r6]
 8002da8:	7804      	ldrb	r4, [r0, #0]
 8002daa:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8002dae:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8002db2:	b2e6      	uxtb	r6, r4
 8002db4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002db8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8002dbc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8002dc0:	4433      	add	r3, r6
 8002dc2:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8002dc6:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8002dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dce:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8002dd2:	0aa3      	lsrs	r3, r4, #10
 8002dd4:	4c2a      	ldr	r4, [pc, #168]	; (8002e80 <D16_GENERIC+0x118>)
 8002dd6:	fb26 5404 	smlad	r4, r6, r4, r5
 8002dda:	4d2a      	ldr	r5, [pc, #168]	; (8002e84 <D16_GENERIC+0x11c>)
 8002ddc:	fb26 f505 	smuad	r5, r6, r5
 8002de0:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8002de4:	eb04 080a 	add.w	r8, r4, sl
 8002de8:	eba8 080b 	sub.w	r8, r8, fp
 8002dec:	4646      	mov	r6, r8
 8002dee:	17f7      	asrs	r7, r6, #31
 8002df0:	e9cd 6700 	strd	r6, r7, [sp]
 8002df4:	9e04      	ldr	r6, [sp, #16]
 8002df6:	f10e 0c01 	add.w	ip, lr, #1
 8002dfa:	b16e      	cbz	r6, 8002e18 <D16_GENERIC+0xb0>
 8002dfc:	6a16      	ldr	r6, [r2, #32]
 8002dfe:	9f01      	ldr	r7, [sp, #4]
 8002e00:	fba8 8906 	umull	r8, r9, r8, r6
 8002e04:	fb06 9907 	mla	r9, r6, r7, r9
 8002e08:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8002e0c:	f149 0900 	adc.w	r9, r9, #0
 8002e10:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8002e14:	46a3      	mov	fp, r4
 8002e16:	4654      	mov	r4, sl
 8002e18:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8002e1a:	9f02      	ldr	r7, [sp, #8]
 8002e1c:	0424      	lsls	r4, r4, #16
 8002e1e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002e22:	f04f 0900 	mov.w	r9, #0
 8002e26:	fb0e fe06 	mul.w	lr, lr, r6
 8002e2a:	fbc7 8904 	smlal	r8, r9, r7, r4
 8002e2e:	9e03      	ldr	r6, [sp, #12]
 8002e30:	464f      	mov	r7, r9
 8002e32:	10bc      	asrs	r4, r7, #2
 8002e34:	f304 040f 	ssat	r4, #16, r4
 8002e38:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8002e3c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8002e3e:	fa1f fe8c 	uxth.w	lr, ip
 8002e42:	4574      	cmp	r4, lr
 8002e44:	d90a      	bls.n	8002e5c <D16_GENERIC+0xf4>
 8002e46:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8002e48:	2c01      	cmp	r4, #1
 8002e4a:	b2e6      	uxtb	r6, r4
 8002e4c:	d1ab      	bne.n	8002da6 <D16_GENERIC+0x3e>
 8002e4e:	9e05      	ldr	r6, [sp, #20]
 8002e50:	f850 4b02 	ldr.w	r4, [r0], #2
 8002e54:	2e00      	cmp	r6, #0
 8002e56:	d0ac      	beq.n	8002db2 <D16_GENERIC+0x4a>
 8002e58:	ba64      	rev16	r4, r4
 8002e5a:	e7aa      	b.n	8002db2 <D16_GENERIC+0x4a>
 8002e5c:	462e      	mov	r6, r5
 8002e5e:	9907      	ldr	r1, [sp, #28]
 8002e60:	61d3      	str	r3, [r2, #28]
 8002e62:	9b06      	ldr	r3, [sp, #24]
 8002e64:	6096      	str	r6, [r2, #8]
 8002e66:	2000      	movs	r0, #0
 8002e68:	60d1      	str	r1, [r2, #12]
 8002e6a:	f8c2 a010 	str.w	sl, [r2, #16]
 8002e6e:	f8c2 b014 	str.w	fp, [r2, #20]
 8002e72:	6193      	str	r3, [r2, #24]
 8002e74:	b009      	add	sp, #36	; 0x24
 8002e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	00030001 	.word	0x00030001
 8002e84:	00010003 	.word	0x00010003

08002e88 <D24_GENERIC>:
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8002e8e:	6993      	ldr	r3, [r2, #24]
 8002e90:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8002e92:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8002e96:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8002e9a:	6894      	ldr	r4, [r2, #8]
 8002e9c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8002ea0:	b089      	sub	sp, #36	; 0x24
 8002ea2:	9307      	str	r3, [sp, #28]
 8002ea4:	9503      	str	r5, [sp, #12]
 8002ea6:	69d3      	ldr	r3, [r2, #28]
 8002ea8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8002eaa:	9104      	str	r1, [sp, #16]
 8002eac:	2e00      	cmp	r6, #0
 8002eae:	f000 8096 	beq.w	8002fde <D24_GENERIC+0x156>
 8002eb2:	f005 0610 	and.w	r6, r5, #16
 8002eb6:	f005 0520 	and.w	r5, r5, #32
 8002eba:	4954      	ldr	r1, [pc, #336]	; (800300c <D24_GENERIC+0x184>)
 8002ebc:	9605      	str	r6, [sp, #20]
 8002ebe:	9506      	str	r5, [sp, #24]
 8002ec0:	f04f 0e00 	mov.w	lr, #0
 8002ec4:	f8cd 9008 	str.w	r9, [sp, #8]
 8002ec8:	e06a      	b.n	8002fa0 <D24_GENERIC+0x118>
 8002eca:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8002ece:	f810 8007 	ldrb.w	r8, [r0, r7]
 8002ed2:	f890 c000 	ldrb.w	ip, [r0]
 8002ed6:	042d      	lsls	r5, r5, #16
 8002ed8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8002edc:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8002ee0:	44ac      	add	ip, r5
 8002ee2:	4438      	add	r0, r7
 8002ee4:	fa5f f68c 	uxtb.w	r6, ip
 8002ee8:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8002eec:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8002ef0:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8002ef4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8002ef8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8002efc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8002f00:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8002f04:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8002f08:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002f0c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8002f10:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8002f14:	4d3e      	ldr	r5, [pc, #248]	; (8003010 <D24_GENERIC+0x188>)
 8002f16:	fb26 b705 	smlad	r7, r6, r5, fp
 8002f1a:	4d3e      	ldr	r5, [pc, #248]	; (8003014 <D24_GENERIC+0x18c>)
 8002f1c:	fb26 4b05 	smlad	fp, r6, r5, r4
 8002f20:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8002f24:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8002f28:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8002f2c:	2401      	movs	r4, #1
 8002f2e:	fb26 f604 	smuad	r6, r6, r4
 8002f32:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8002f36:	9f02      	ldr	r7, [sp, #8]
 8002f38:	eb0e 0c04 	add.w	ip, lr, r4
 8002f3c:	eb08 0406 	add.w	r4, r8, r6
 8002f40:	eb05 060a 	add.w	r6, r5, sl
 8002f44:	1bf6      	subs	r6, r6, r7
 8002f46:	4637      	mov	r7, r6
 8002f48:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8002f4c:	e9cd 7800 	strd	r7, r8, [sp]
 8002f50:	9f05      	ldr	r7, [sp, #20]
 8002f52:	b177      	cbz	r7, 8002f72 <D24_GENERIC+0xea>
 8002f54:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8002f58:	9502      	str	r5, [sp, #8]
 8002f5a:	fba6 9a08 	umull	r9, sl, r6, r8
 8002f5e:	9e01      	ldr	r6, [sp, #4]
 8002f60:	fb08 aa06 	mla	sl, r8, r6, sl
 8002f64:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8002f68:	f14a 0700 	adc.w	r7, sl, #0
 8002f6c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8002f70:	4655      	mov	r5, sl
 8002f72:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8002f74:	9f03      	ldr	r7, [sp, #12]
 8002f76:	03ad      	lsls	r5, r5, #14
 8002f78:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002f7c:	f04f 0900 	mov.w	r9, #0
 8002f80:	fb0e fe06 	mul.w	lr, lr, r6
 8002f84:	fbc7 8905 	smlal	r8, r9, r7, r5
 8002f88:	9e04      	ldr	r6, [sp, #16]
 8002f8a:	464f      	mov	r7, r9
 8002f8c:	10bd      	asrs	r5, r7, #2
 8002f8e:	f305 050f 	ssat	r5, #16, r5
 8002f92:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8002f96:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8002f98:	fa1f fe8c 	uxth.w	lr, ip
 8002f9c:	4575      	cmp	r5, lr
 8002f9e:	d91c      	bls.n	8002fda <D24_GENERIC+0x152>
 8002fa0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8002fa2:	b2ef      	uxtb	r7, r5
 8002fa4:	2d01      	cmp	r5, #1
 8002fa6:	b23e      	sxth	r6, r7
 8002fa8:	d18f      	bne.n	8002eca <D24_GENERIC+0x42>
 8002faa:	9d06      	ldr	r5, [sp, #24]
 8002fac:	b15d      	cbz	r5, 8002fc6 <D24_GENERIC+0x13e>
 8002fae:	f01e 0f01 	tst.w	lr, #1
 8002fb2:	d122      	bne.n	8002ffa <D24_GENERIC+0x172>
 8002fb4:	7805      	ldrb	r5, [r0, #0]
 8002fb6:	78c7      	ldrb	r7, [r0, #3]
 8002fb8:	7846      	ldrb	r6, [r0, #1]
 8002fba:	022d      	lsls	r5, r5, #8
 8002fbc:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8002fc0:	44b4      	add	ip, r6
 8002fc2:	3002      	adds	r0, #2
 8002fc4:	e78e      	b.n	8002ee4 <D24_GENERIC+0x5c>
 8002fc6:	7846      	ldrb	r6, [r0, #1]
 8002fc8:	f890 c002 	ldrb.w	ip, [r0, #2]
 8002fcc:	f810 5b03 	ldrb.w	r5, [r0], #3
 8002fd0:	0236      	lsls	r6, r6, #8
 8002fd2:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8002fd6:	44ac      	add	ip, r5
 8002fd8:	e784      	b.n	8002ee4 <D24_GENERIC+0x5c>
 8002fda:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002fde:	61d3      	str	r3, [r2, #28]
 8002fe0:	9b07      	ldr	r3, [sp, #28]
 8002fe2:	6094      	str	r4, [r2, #8]
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f8c2 b00c 	str.w	fp, [r2, #12]
 8002fea:	f8c2 a010 	str.w	sl, [r2, #16]
 8002fee:	f8c2 9014 	str.w	r9, [r2, #20]
 8002ff2:	6193      	str	r3, [r2, #24]
 8002ff4:	b009      	add	sp, #36	; 0x24
 8002ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ffa:	78c5      	ldrb	r5, [r0, #3]
 8002ffc:	7887      	ldrb	r7, [r0, #2]
 8002ffe:	f810 6b04 	ldrb.w	r6, [r0], #4
 8003002:	022d      	lsls	r5, r5, #8
 8003004:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8003008:	44b4      	add	ip, r6
 800300a:	e76b      	b.n	8002ee4 <D24_GENERIC+0x5c>
 800300c:	20000000 	.word	0x20000000
 8003010:	00030001 	.word	0x00030001
 8003014:	00060007 	.word	0x00060007

08003018 <D32_GENERIC>:
 8003018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800301e:	6993      	ldr	r3, [r2, #24]
 8003020:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003022:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003026:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800302a:	69d6      	ldr	r6, [r2, #28]
 800302c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8003030:	b089      	sub	sp, #36	; 0x24
 8003032:	9307      	str	r3, [sp, #28]
 8003034:	9403      	str	r4, [sp, #12]
 8003036:	6893      	ldr	r3, [r2, #8]
 8003038:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800303a:	9104      	str	r1, [sp, #16]
 800303c:	2d00      	cmp	r5, #0
 800303e:	f000 809f 	beq.w	8003180 <D32_GENERIC+0x168>
 8003042:	f004 0510 	and.w	r5, r4, #16
 8003046:	f004 0420 	and.w	r4, r4, #32
 800304a:	9505      	str	r5, [sp, #20]
 800304c:	4953      	ldr	r1, [pc, #332]	; (800319c <D32_GENERIC+0x184>)
 800304e:	9406      	str	r4, [sp, #24]
 8003050:	f04f 0c00 	mov.w	ip, #0
 8003054:	f8cd 9008 	str.w	r9, [sp, #8]
 8003058:	461d      	mov	r5, r3
 800305a:	4617      	mov	r7, r2
 800305c:	e077      	b.n	800314e <D32_GENERIC+0x136>
 800305e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8003062:	f810 800e 	ldrb.w	r8, [r0, lr]
 8003066:	f810 e002 	ldrb.w	lr, [r0, r2]
 800306a:	7800      	ldrb	r0, [r0, #0]
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8003072:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8003076:	4403      	add	r3, r0
 8003078:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800307c:	b2dc      	uxtb	r4, r3
 800307e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003082:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8003086:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800308a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800308e:	0e1b      	lsrs	r3, r3, #24
 8003090:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8003094:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8003098:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800309c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80030a0:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80030a4:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80030a8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80030ac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80030b0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80030b4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80030b8:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 80030bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80030c0:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <D32_GENERIC+0x188>)
 80030c2:	fb22 b403 	smlad	r4, r2, r3, fp
 80030c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ca:	fb2e 4803 	smlad	r8, lr, r3, r4
 80030ce:	4b35      	ldr	r3, [pc, #212]	; (80031a4 <D32_GENERIC+0x18c>)
 80030d0:	fb22 5503 	smlad	r5, r2, r3, r5
 80030d4:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <D32_GENERIC+0x190>)
 80030d6:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80030da:	2301      	movs	r3, #1
 80030dc:	fb22 f203 	smuad	r2, r2, r3
 80030e0:	4b32      	ldr	r3, [pc, #200]	; (80031ac <D32_GENERIC+0x194>)
 80030e2:	fb2e 2503 	smlad	r5, lr, r3, r2
 80030e6:	9b02      	ldr	r3, [sp, #8]
 80030e8:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80030ec:	eb04 080a 	add.w	r8, r4, sl
 80030f0:	eba8 0803 	sub.w	r8, r8, r3
 80030f4:	4642      	mov	r2, r8
 80030f6:	17d3      	asrs	r3, r2, #31
 80030f8:	e9cd 2300 	strd	r2, r3, [sp]
 80030fc:	9b05      	ldr	r3, [sp, #20]
 80030fe:	f10c 0e01 	add.w	lr, ip, #1
 8003102:	b16b      	cbz	r3, 8003120 <D32_GENERIC+0x108>
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	9b01      	ldr	r3, [sp, #4]
 8003108:	9402      	str	r4, [sp, #8]
 800310a:	fba8 8902 	umull	r8, r9, r8, r2
 800310e:	fb02 9903 	mla	r9, r2, r3, r9
 8003112:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003116:	f149 0900 	adc.w	r9, r9, #0
 800311a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800311e:	4654      	mov	r4, sl
 8003120:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003122:	9a04      	ldr	r2, [sp, #16]
 8003124:	fb0c fc03 	mul.w	ip, ip, r3
 8003128:	9b03      	ldr	r3, [sp, #12]
 800312a:	0364      	lsls	r4, r4, #13
 800312c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003130:	f04f 0900 	mov.w	r9, #0
 8003134:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003138:	464b      	mov	r3, r9
 800313a:	109b      	asrs	r3, r3, #2
 800313c:	f303 030f 	ssat	r3, #16, r3
 8003140:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8003144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003146:	fa1f fc8e 	uxth.w	ip, lr
 800314a:	4563      	cmp	r3, ip
 800314c:	d914      	bls.n	8003178 <D32_GENERIC+0x160>
 800314e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8003150:	b2e2      	uxtb	r2, r4
 8003152:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8003156:	eb00 080e 	add.w	r8, r0, lr
 800315a:	4253      	negs	r3, r2
 800315c:	2c01      	cmp	r4, #1
 800315e:	eb08 0403 	add.w	r4, r8, r3
 8003162:	f47f af7c 	bne.w	800305e <D32_GENERIC+0x46>
 8003166:	1d02      	adds	r2, r0, #4
 8003168:	6803      	ldr	r3, [r0, #0]
 800316a:	9806      	ldr	r0, [sp, #24]
 800316c:	b110      	cbz	r0, 8003174 <D32_GENERIC+0x15c>
 800316e:	ba5b      	rev16	r3, r3
 8003170:	4610      	mov	r0, r2
 8003172:	e783      	b.n	800307c <D32_GENERIC+0x64>
 8003174:	4610      	mov	r0, r2
 8003176:	e781      	b.n	800307c <D32_GENERIC+0x64>
 8003178:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800317c:	462b      	mov	r3, r5
 800317e:	463a      	mov	r2, r7
 8003180:	6093      	str	r3, [r2, #8]
 8003182:	9b07      	ldr	r3, [sp, #28]
 8003184:	f8c2 b00c 	str.w	fp, [r2, #12]
 8003188:	2000      	movs	r0, #0
 800318a:	61d6      	str	r6, [r2, #28]
 800318c:	f8c2 a010 	str.w	sl, [r2, #16]
 8003190:	f8c2 9014 	str.w	r9, [r2, #20]
 8003194:	6193      	str	r3, [r2, #24]
 8003196:	b009      	add	sp, #36	; 0x24
 8003198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800319c:	20000000 	.word	0x20000000
 80031a0:	00060003 	.word	0x00060003
 80031a4:	000a000c 	.word	0x000a000c
 80031a8:	000c000a 	.word	0x000c000a
 80031ac:	00030006 	.word	0x00030006

080031b0 <D48_GENERIC>:
 80031b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b4:	b089      	sub	sp, #36	; 0x24
 80031b6:	6953      	ldr	r3, [r2, #20]
 80031b8:	68d4      	ldr	r4, [r2, #12]
 80031ba:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80031bc:	9302      	str	r3, [sp, #8]
 80031be:	9400      	str	r4, [sp, #0]
 80031c0:	6993      	ldr	r3, [r2, #24]
 80031c2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80031c4:	9307      	str	r3, [sp, #28]
 80031c6:	9403      	str	r4, [sp, #12]
 80031c8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80031cc:	69d6      	ldr	r6, [r2, #28]
 80031ce:	6893      	ldr	r3, [r2, #8]
 80031d0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80031d2:	9104      	str	r1, [sp, #16]
 80031d4:	2d00      	cmp	r5, #0
 80031d6:	f000 80c5 	beq.w	8003364 <D48_GENERIC+0x1b4>
 80031da:	f004 0510 	and.w	r5, r4, #16
 80031de:	f004 0420 	and.w	r4, r4, #32
 80031e2:	4967      	ldr	r1, [pc, #412]	; (8003380 <D48_GENERIC+0x1d0>)
 80031e4:	9505      	str	r5, [sp, #20]
 80031e6:	9406      	str	r4, [sp, #24]
 80031e8:	f04f 0c00 	mov.w	ip, #0
 80031ec:	4657      	mov	r7, sl
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	e09c      	b.n	800332c <D48_GENERIC+0x17c>
 80031f2:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80031f6:	f810 b009 	ldrb.w	fp, [r0, r9]
 80031fa:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80031fe:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8003202:	7800      	ldrb	r0, [r0, #0]
 8003204:	0424      	lsls	r4, r4, #16
 8003206:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800320a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800320e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8003212:	44a8      	add	r8, r5
 8003214:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8003218:	eb0b 0500 	add.w	r5, fp, r0
 800321c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8003220:	fa5f f885 	uxtb.w	r8, r5
 8003224:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8003228:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800322c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8003230:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8003234:	0e2d      	lsrs	r5, r5, #24
 8003236:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800323a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800323e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8003242:	b2e6      	uxtb	r6, r4
 8003244:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8003248:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800324c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8003250:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003254:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8003258:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800325c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8003260:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8003264:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003268:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800326c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8003270:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003274:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003278:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800327c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8003280:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8003284:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8003288:	4c3e      	ldr	r4, [pc, #248]	; (8003384 <D48_GENERIC+0x1d4>)
 800328a:	9d00      	ldr	r5, [sp, #0]
 800328c:	fb2a 5404 	smlad	r4, sl, r4, r5
 8003290:	4d3d      	ldr	r5, [pc, #244]	; (8003388 <D48_GENERIC+0x1d8>)
 8003292:	fb28 4405 	smlad	r4, r8, r5, r4
 8003296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800329a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800329e:	4c3b      	ldr	r4, [pc, #236]	; (800338c <D48_GENERIC+0x1dc>)
 80032a0:	9b01      	ldr	r3, [sp, #4]
 80032a2:	fb2a 3304 	smlad	r3, sl, r4, r3
 80032a6:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80032aa:	fb28 3304 	smlad	r3, r8, r4, r3
 80032ae:	4c38      	ldr	r4, [pc, #224]	; (8003390 <D48_GENERIC+0x1e0>)
 80032b0:	fb2e 3304 	smlad	r3, lr, r4, r3
 80032b4:	2501      	movs	r5, #1
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	fb2a fa05 	smuad	sl, sl, r5
 80032bc:	4b35      	ldr	r3, [pc, #212]	; (8003394 <D48_GENERIC+0x1e4>)
 80032be:	fb28 a803 	smlad	r8, r8, r3, sl
 80032c2:	4b35      	ldr	r3, [pc, #212]	; (8003398 <D48_GENERIC+0x1e8>)
 80032c4:	fb2e 8303 	smlad	r3, lr, r3, r8
 80032c8:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	9b02      	ldr	r3, [sp, #8]
 80032d0:	eb04 0807 	add.w	r8, r4, r7
 80032d4:	eba8 0803 	sub.w	r8, r8, r3
 80032d8:	9b05      	ldr	r3, [sp, #20]
 80032da:	4465      	add	r5, ip
 80032dc:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80032e0:	b163      	cbz	r3, 80032fc <D48_GENERIC+0x14c>
 80032e2:	6a17      	ldr	r7, [r2, #32]
 80032e4:	9402      	str	r4, [sp, #8]
 80032e6:	fba8 8907 	umull	r8, r9, r8, r7
 80032ea:	fb07 990b 	mla	r9, r7, fp, r9
 80032ee:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80032f2:	f149 0900 	adc.w	r9, r9, #0
 80032f6:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80032fa:	463c      	mov	r4, r7
 80032fc:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8003300:	9b03      	ldr	r3, [sp, #12]
 8003302:	02e4      	lsls	r4, r4, #11
 8003304:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003308:	f04f 0900 	mov.w	r9, #0
 800330c:	fb0c fc0e 	mul.w	ip, ip, lr
 8003310:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003314:	9b04      	ldr	r3, [sp, #16]
 8003316:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800331a:	f304 040f 	ssat	r4, #16, r4
 800331e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8003322:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003324:	fa1f fc85 	uxth.w	ip, r5
 8003328:	4564      	cmp	r4, ip
 800332a:	d919      	bls.n	8003360 <D48_GENERIC+0x1b0>
 800332c:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800332e:	fa5f fe84 	uxtb.w	lr, r4
 8003332:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8003336:	f1ce 0500 	rsb	r5, lr, #0
 800333a:	eb00 0b09 	add.w	fp, r0, r9
 800333e:	eb0b 0a05 	add.w	sl, fp, r5
 8003342:	2c01      	cmp	r4, #1
 8003344:	eb0a 0809 	add.w	r8, sl, r9
 8003348:	f47f af53 	bne.w	80031f2 <D48_GENERIC+0x42>
 800334c:	9b06      	ldr	r3, [sp, #24]
 800334e:	6805      	ldr	r5, [r0, #0]
 8003350:	6844      	ldr	r4, [r0, #4]
 8003352:	3006      	adds	r0, #6
 8003354:	2b00      	cmp	r3, #0
 8003356:	f43f af63 	beq.w	8003220 <D48_GENERIC+0x70>
 800335a:	ba6d      	rev16	r5, r5
 800335c:	ba64      	rev16	r4, r4
 800335e:	e75f      	b.n	8003220 <D48_GENERIC+0x70>
 8003360:	9b01      	ldr	r3, [sp, #4]
 8003362:	46ba      	mov	sl, r7
 8003364:	6093      	str	r3, [r2, #8]
 8003366:	9b00      	ldr	r3, [sp, #0]
 8003368:	60d3      	str	r3, [r2, #12]
 800336a:	9b02      	ldr	r3, [sp, #8]
 800336c:	6153      	str	r3, [r2, #20]
 800336e:	9b07      	ldr	r3, [sp, #28]
 8003370:	61d6      	str	r6, [r2, #28]
 8003372:	2000      	movs	r0, #0
 8003374:	f8c2 a010 	str.w	sl, [r2, #16]
 8003378:	6193      	str	r3, [r2, #24]
 800337a:	b009      	add	sp, #36	; 0x24
 800337c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003380:	20000000 	.word	0x20000000
 8003384:	000f000a 	.word	0x000f000a
 8003388:	00060003 	.word	0x00060003
 800338c:	00150019 	.word	0x00150019
 8003390:	00190015 	.word	0x00190015
 8003394:	00030006 	.word	0x00030006
 8003398:	000a000f 	.word	0x000a000f

0800339c <D64_GENERIC>:
 800339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a0:	b089      	sub	sp, #36	; 0x24
 80033a2:	6913      	ldr	r3, [r2, #16]
 80033a4:	6895      	ldr	r5, [r2, #8]
 80033a6:	9303      	str	r3, [sp, #12]
 80033a8:	9501      	str	r5, [sp, #4]
 80033aa:	6953      	ldr	r3, [r2, #20]
 80033ac:	68d5      	ldr	r5, [r2, #12]
 80033ae:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80033b0:	9304      	str	r3, [sp, #16]
 80033b2:	9500      	str	r5, [sp, #0]
 80033b4:	6993      	ldr	r3, [r2, #24]
 80033b6:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80033b8:	9307      	str	r3, [sp, #28]
 80033ba:	9505      	str	r5, [sp, #20]
 80033bc:	69d3      	ldr	r3, [r2, #28]
 80033be:	9106      	str	r1, [sp, #24]
 80033c0:	2c00      	cmp	r4, #0
 80033c2:	f000 80d9 	beq.w	8003578 <D64_GENERIC+0x1dc>
 80033c6:	6a11      	ldr	r1, [r2, #32]
 80033c8:	9102      	str	r1, [sp, #8]
 80033ca:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80035b8 <D64_GENERIC+0x21c>
 80033ce:	f04f 0c00 	mov.w	ip, #0
 80033d2:	4681      	mov	r9, r0
 80033d4:	e0c1      	b.n	800355a <D64_GENERIC+0x1be>
 80033d6:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80033da:	4274      	negs	r4, r6
 80033dc:	eb09 0708 	add.w	r7, r9, r8
 80033e0:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80033e4:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80033e8:	5d38      	ldrb	r0, [r7, r4]
 80033ea:	5d29      	ldrb	r1, [r5, r4]
 80033ec:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80033f0:	f819 a008 	ldrb.w	sl, [r9, r8]
 80033f4:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80033f8:	f899 7000 	ldrb.w	r7, [r9]
 80033fc:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8003400:	4425      	add	r5, r4
 8003402:	0409      	lsls	r1, r1, #16
 8003404:	0400      	lsls	r0, r0, #16
 8003406:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800340a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800340e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8003412:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8003416:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800341a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800341e:	4459      	add	r1, fp
 8003420:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8003424:	4438      	add	r0, r7
 8003426:	b2c5      	uxtb	r5, r0
 8003428:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800342c:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8003430:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8003434:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8003438:	0e00      	lsrs	r0, r0, #24
 800343a:	eb03 0806 	add.w	r8, r3, r6
 800343e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8003442:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8003446:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800344a:	b2c8      	uxtb	r0, r1
 800344c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8003450:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8003454:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8003458:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800345c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003460:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8003464:	0e09      	lsrs	r1, r1, #24
 8003466:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800346a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800346e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8003472:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8003476:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800347a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800347e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8003482:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003486:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800348a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800348e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8003492:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003496:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800349a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800349e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80034a2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80034a6:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80034aa:	0a8b      	lsrs	r3, r1, #10
 80034ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80034b0:	4939      	ldr	r1, [pc, #228]	; (8003598 <D64_GENERIC+0x1fc>)
 80034b2:	9c00      	ldr	r4, [sp, #0]
 80034b4:	fb28 4101 	smlad	r1, r8, r1, r4
 80034b8:	4c38      	ldr	r4, [pc, #224]	; (800359c <D64_GENERIC+0x200>)
 80034ba:	fb27 1104 	smlad	r1, r7, r4, r1
 80034be:	4c38      	ldr	r4, [pc, #224]	; (80035a0 <D64_GENERIC+0x204>)
 80034c0:	fb20 1104 	smlad	r1, r0, r4, r1
 80034c4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80034c8:	fb2a 1106 	smlad	r1, sl, r6, r1
 80034cc:	4c35      	ldr	r4, [pc, #212]	; (80035a4 <D64_GENERIC+0x208>)
 80034ce:	9d01      	ldr	r5, [sp, #4]
 80034d0:	fb28 5404 	smlad	r4, r8, r4, r5
 80034d4:	4d33      	ldr	r5, [pc, #204]	; (80035a4 <D64_GENERIC+0x208>)
 80034d6:	fb2a 4415 	smladx	r4, sl, r5, r4
 80034da:	4d33      	ldr	r5, [pc, #204]	; (80035a8 <D64_GENERIC+0x20c>)
 80034dc:	fb27 4405 	smlad	r4, r7, r5, r4
 80034e0:	fb20 4415 	smladx	r4, r0, r5, r4
 80034e4:	2501      	movs	r5, #1
 80034e6:	9400      	str	r4, [sp, #0]
 80034e8:	fb28 f805 	smuad	r8, r8, r5
 80034ec:	4c2f      	ldr	r4, [pc, #188]	; (80035ac <D64_GENERIC+0x210>)
 80034ee:	fb27 8704 	smlad	r7, r7, r4, r8
 80034f2:	4c2f      	ldr	r4, [pc, #188]	; (80035b0 <D64_GENERIC+0x214>)
 80034f4:	fb20 7004 	smlad	r0, r0, r4, r7
 80034f8:	4c2e      	ldr	r4, [pc, #184]	; (80035b4 <D64_GENERIC+0x218>)
 80034fa:	fb2a 0004 	smlad	r0, sl, r4, r0
 80034fe:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8003502:	9902      	ldr	r1, [sp, #8]
 8003504:	9001      	str	r0, [sp, #4]
 8003506:	b189      	cbz	r1, 800352c <D64_GENERIC+0x190>
 8003508:	9803      	ldr	r0, [sp, #12]
 800350a:	9c04      	ldr	r4, [sp, #16]
 800350c:	9604      	str	r6, [sp, #16]
 800350e:	4430      	add	r0, r6
 8003510:	1b00      	subs	r0, r0, r4
 8003512:	17c5      	asrs	r5, r0, #31
 8003514:	460f      	mov	r7, r1
 8003516:	fba0 0101 	umull	r0, r1, r0, r1
 800351a:	fb07 1105 	mla	r1, r7, r5, r1
 800351e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003522:	f141 0100 	adc.w	r1, r1, #0
 8003526:	0049      	lsls	r1, r1, #1
 8003528:	9103      	str	r1, [sp, #12]
 800352a:	460e      	mov	r6, r1
 800352c:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800352e:	9905      	ldr	r1, [sp, #20]
 8003530:	9806      	ldr	r0, [sp, #24]
 8003532:	02b6      	lsls	r6, r6, #10
 8003534:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003538:	f04f 0800 	mov.w	r8, #0
 800353c:	fb0c f404 	mul.w	r4, ip, r4
 8003540:	fbc1 7806 	smlal	r7, r8, r1, r6
 8003544:	4641      	mov	r1, r8
 8003546:	1089      	asrs	r1, r1, #2
 8003548:	f301 010f 	ssat	r1, #16, r1
 800354c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8003550:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8003552:	f10c 0c01 	add.w	ip, ip, #1
 8003556:	4561      	cmp	r1, ip
 8003558:	dd0e      	ble.n	8003578 <D64_GENERIC+0x1dc>
 800355a:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800355c:	2e01      	cmp	r6, #1
 800355e:	f47f af3a 	bne.w	80033d6 <D64_GENERIC+0x3a>
 8003562:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8003564:	06b4      	lsls	r4, r6, #26
 8003566:	e899 0003 	ldmia.w	r9, {r0, r1}
 800356a:	f109 0908 	add.w	r9, r9, #8
 800356e:	f57f af5a 	bpl.w	8003426 <D64_GENERIC+0x8a>
 8003572:	ba40      	rev16	r0, r0
 8003574:	ba49      	rev16	r1, r1
 8003576:	e756      	b.n	8003426 <D64_GENERIC+0x8a>
 8003578:	61d3      	str	r3, [r2, #28]
 800357a:	9b03      	ldr	r3, [sp, #12]
 800357c:	9901      	ldr	r1, [sp, #4]
 800357e:	6113      	str	r3, [r2, #16]
 8003580:	9b04      	ldr	r3, [sp, #16]
 8003582:	6091      	str	r1, [r2, #8]
 8003584:	6153      	str	r3, [r2, #20]
 8003586:	9900      	ldr	r1, [sp, #0]
 8003588:	9b07      	ldr	r3, [sp, #28]
 800358a:	60d1      	str	r1, [r2, #12]
 800358c:	2000      	movs	r0, #0
 800358e:	6193      	str	r3, [r2, #24]
 8003590:	b009      	add	sp, #36	; 0x24
 8003592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003596:	bf00      	nop
 8003598:	001c0015 	.word	0x001c0015
 800359c:	000f000a 	.word	0x000f000a
 80035a0:	00060003 	.word	0x00060003
 80035a4:	0024002a 	.word	0x0024002a
 80035a8:	002e0030 	.word	0x002e0030
 80035ac:	00030006 	.word	0x00030006
 80035b0:	000a000f 	.word	0x000a000f
 80035b4:	0015001c 	.word	0x0015001c
 80035b8:	20000000 	.word	0x20000000

080035bc <D80_GENERIC>:
 80035bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c0:	b08b      	sub	sp, #44	; 0x2c
 80035c2:	6914      	ldr	r4, [r2, #16]
 80035c4:	9404      	str	r4, [sp, #16]
 80035c6:	6954      	ldr	r4, [r2, #20]
 80035c8:	9405      	str	r4, [sp, #20]
 80035ca:	6994      	ldr	r4, [r2, #24]
 80035cc:	9409      	str	r4, [sp, #36]	; 0x24
 80035ce:	6894      	ldr	r4, [r2, #8]
 80035d0:	9402      	str	r4, [sp, #8]
 80035d2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80035d4:	68d4      	ldr	r4, [r2, #12]
 80035d6:	9401      	str	r4, [sp, #4]
 80035d8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80035da:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80035de:	9406      	str	r4, [sp, #24]
 80035e0:	9107      	str	r1, [sp, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 810f 	beq.w	8003806 <D80_GENERIC+0x24a>
 80035e8:	6a13      	ldr	r3, [r2, #32]
 80035ea:	9308      	str	r3, [sp, #32]
 80035ec:	2300      	movs	r3, #0
 80035ee:	9200      	str	r2, [sp, #0]
 80035f0:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8003858 <D80_GENERIC+0x29c>
 80035f4:	f8cd b00c 	str.w	fp, [sp, #12]
 80035f8:	461a      	mov	r2, r3
 80035fa:	e0ed      	b.n	80037d8 <D80_GENERIC+0x21c>
 80035fc:	fa5f fc8c 	uxtb.w	ip, ip
 8003600:	fa0f f48c 	sxth.w	r4, ip
 8003604:	0066      	lsls	r6, r4, #1
 8003606:	eb06 0804 	add.w	r8, r6, r4
 800360a:	f1cc 0500 	rsb	r5, ip, #0
 800360e:	eb00 0108 	add.w	r1, r0, r8
 8003612:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003616:	194b      	adds	r3, r1, r5
 8003618:	5d49      	ldrb	r1, [r1, r5]
 800361a:	f810 a008 	ldrb.w	sl, [r0, r8]
 800361e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8003622:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8003626:	f890 8000 	ldrb.w	r8, [r0]
 800362a:	eb03 0e04 	add.w	lr, r3, r4
 800362e:	eb0e 0705 	add.w	r7, lr, r5
 8003632:	0409      	lsls	r1, r1, #16
 8003634:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8003638:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800363c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8003640:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8003644:	eb0a 0004 	add.w	r0, sl, r4
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	f81a a004 	ldrb.w	sl, [sl, r4]
 800364e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8003652:	5d44      	ldrb	r4, [r0, r5]
 8003654:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8003658:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800365c:	4428      	add	r0, r5
 800365e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8003662:	4441      	add	r1, r8
 8003664:	4430      	add	r0, r6
 8003666:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800366a:	441f      	add	r7, r3
 800366c:	b2cd      	uxtb	r5, r1
 800366e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003672:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8003676:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800367a:	9b03      	ldr	r3, [sp, #12]
 800367c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8003680:	0e09      	lsrs	r1, r1, #24
 8003682:	4433      	add	r3, r6
 8003684:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8003688:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800368c:	b2fd      	uxtb	r5, r7
 800368e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8003692:	469b      	mov	fp, r3
 8003694:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8003698:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800369c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 80036a0:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80036a4:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80036a8:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80036ac:	0e3b      	lsrs	r3, r7, #24
 80036ae:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80036b2:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 80036b6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80036ba:	fa5f fe84 	uxtb.w	lr, r4
 80036be:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80036c2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80036c6:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80036ca:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80036ce:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80036d2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80036d6:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 80036da:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80036de:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80036e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80036ea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80036ee:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80036f2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80036f6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80036fa:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80036fe:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8003702:	0aa3      	lsrs	r3, r4, #10
 8003704:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003708:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800370c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003710:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8003714:	9303      	str	r3, [sp, #12]
 8003716:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800371a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800371e:	4b42      	ldr	r3, [pc, #264]	; (8003828 <D80_GENERIC+0x26c>)
 8003720:	9901      	ldr	r1, [sp, #4]
 8003722:	fb2b 1303 	smlad	r3, fp, r3, r1
 8003726:	4941      	ldr	r1, [pc, #260]	; (800382c <D80_GENERIC+0x270>)
 8003728:	fb28 3301 	smlad	r3, r8, r1, r3
 800372c:	4940      	ldr	r1, [pc, #256]	; (8003830 <D80_GENERIC+0x274>)
 800372e:	fb2c 3301 	smlad	r3, ip, r1, r3
 8003732:	4940      	ldr	r1, [pc, #256]	; (8003834 <D80_GENERIC+0x278>)
 8003734:	fb27 3301 	smlad	r3, r7, r1, r3
 8003738:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800373c:	fb2e 3301 	smlad	r3, lr, r1, r3
 8003740:	493d      	ldr	r1, [pc, #244]	; (8003838 <D80_GENERIC+0x27c>)
 8003742:	9c02      	ldr	r4, [sp, #8]
 8003744:	fb2b 4401 	smlad	r4, fp, r1, r4
 8003748:	493c      	ldr	r1, [pc, #240]	; (800383c <D80_GENERIC+0x280>)
 800374a:	fb28 4401 	smlad	r4, r8, r1, r4
 800374e:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8003752:	fb2c 4101 	smlad	r1, ip, r1, r4
 8003756:	4c3a      	ldr	r4, [pc, #232]	; (8003840 <D80_GENERIC+0x284>)
 8003758:	fb27 1104 	smlad	r1, r7, r4, r1
 800375c:	4c39      	ldr	r4, [pc, #228]	; (8003844 <D80_GENERIC+0x288>)
 800375e:	fb2e 1104 	smlad	r1, lr, r4, r1
 8003762:	9101      	str	r1, [sp, #4]
 8003764:	2101      	movs	r1, #1
 8003766:	fb2b fb01 	smuad	fp, fp, r1
 800376a:	4937      	ldr	r1, [pc, #220]	; (8003848 <D80_GENERIC+0x28c>)
 800376c:	fb28 b801 	smlad	r8, r8, r1, fp
 8003770:	4d36      	ldr	r5, [pc, #216]	; (800384c <D80_GENERIC+0x290>)
 8003772:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8003776:	4d36      	ldr	r5, [pc, #216]	; (8003850 <D80_GENERIC+0x294>)
 8003778:	fb27 c705 	smlad	r7, r7, r5, ip
 800377c:	4d35      	ldr	r5, [pc, #212]	; (8003854 <D80_GENERIC+0x298>)
 800377e:	fb2e 7105 	smlad	r1, lr, r5, r7
 8003782:	9102      	str	r1, [sp, #8]
 8003784:	9908      	ldr	r1, [sp, #32]
 8003786:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800378a:	b181      	cbz	r1, 80037ae <D80_GENERIC+0x1f2>
 800378c:	9c04      	ldr	r4, [sp, #16]
 800378e:	9d05      	ldr	r5, [sp, #20]
 8003790:	9305      	str	r3, [sp, #20]
 8003792:	441c      	add	r4, r3
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	17e7      	asrs	r7, r4, #31
 8003798:	fba4 4501 	umull	r4, r5, r4, r1
 800379c:	fb01 5507 	mla	r5, r1, r7, r5
 80037a0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80037a4:	f145 0500 	adc.w	r5, r5, #0
 80037a8:	0069      	lsls	r1, r5, #1
 80037aa:	9104      	str	r1, [sp, #16]
 80037ac:	460b      	mov	r3, r1
 80037ae:	9e00      	ldr	r6, [sp, #0]
 80037b0:	9f06      	ldr	r7, [sp, #24]
 80037b2:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80037b4:	025b      	lsls	r3, r3, #9
 80037b6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80037ba:	2500      	movs	r5, #0
 80037bc:	fb02 f101 	mul.w	r1, r2, r1
 80037c0:	fbc7 4503 	smlal	r4, r5, r7, r3
 80037c4:	9c07      	ldr	r4, [sp, #28]
 80037c6:	10ab      	asrs	r3, r5, #2
 80037c8:	f303 030f 	ssat	r3, #16, r3
 80037cc:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80037d0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80037d2:	3201      	adds	r2, #1
 80037d4:	4293      	cmp	r3, r2
 80037d6:	dd13      	ble.n	8003800 <D80_GENERIC+0x244>
 80037d8:	9b00      	ldr	r3, [sp, #0]
 80037da:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 80037de:	f1bc 0f01 	cmp.w	ip, #1
 80037e2:	f47f af0b 	bne.w	80035fc <D80_GENERIC+0x40>
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	6884      	ldr	r4, [r0, #8]
 80037ea:	069b      	lsls	r3, r3, #26
 80037ec:	e890 0082 	ldmia.w	r0, {r1, r7}
 80037f0:	f100 000a 	add.w	r0, r0, #10
 80037f4:	f57f af3a 	bpl.w	800366c <D80_GENERIC+0xb0>
 80037f8:	ba49      	rev16	r1, r1
 80037fa:	ba7f      	rev16	r7, r7
 80037fc:	ba64      	rev16	r4, r4
 80037fe:	e735      	b.n	800366c <D80_GENERIC+0xb0>
 8003800:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003804:	4632      	mov	r2, r6
 8003806:	9b02      	ldr	r3, [sp, #8]
 8003808:	6093      	str	r3, [r2, #8]
 800380a:	9b01      	ldr	r3, [sp, #4]
 800380c:	60d3      	str	r3, [r2, #12]
 800380e:	9b04      	ldr	r3, [sp, #16]
 8003810:	6113      	str	r3, [r2, #16]
 8003812:	9b05      	ldr	r3, [sp, #20]
 8003814:	6153      	str	r3, [r2, #20]
 8003816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003818:	f8c2 b01c 	str.w	fp, [r2, #28]
 800381c:	2000      	movs	r0, #0
 800381e:	6193      	str	r3, [r2, #24]
 8003820:	b00b      	add	sp, #44	; 0x2c
 8003822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003826:	bf00      	nop
 8003828:	002d0024 	.word	0x002d0024
 800382c:	001c0015 	.word	0x001c0015
 8003830:	000f000a 	.word	0x000f000a
 8003834:	00060003 	.word	0x00060003
 8003838:	0037003f 	.word	0x0037003f
 800383c:	00450049 	.word	0x00450049
 8003840:	00490045 	.word	0x00490045
 8003844:	003f0037 	.word	0x003f0037
 8003848:	00030006 	.word	0x00030006
 800384c:	000a000f 	.word	0x000a000f
 8003850:	0015001c 	.word	0x0015001c
 8003854:	0024002d 	.word	0x0024002d
 8003858:	20000000 	.word	0x20000000

0800385c <D128_GENERIC>:
 800385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003860:	b093      	sub	sp, #76	; 0x4c
 8003862:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8003864:	9005      	str	r0, [sp, #20]
 8003866:	4610      	mov	r0, r2
 8003868:	9201      	str	r2, [sp, #4]
 800386a:	6912      	ldr	r2, [r2, #16]
 800386c:	920c      	str	r2, [sp, #48]	; 0x30
 800386e:	4602      	mov	r2, r0
 8003870:	6940      	ldr	r0, [r0, #20]
 8003872:	900d      	str	r0, [sp, #52]	; 0x34
 8003874:	4610      	mov	r0, r2
 8003876:	4614      	mov	r4, r2
 8003878:	6992      	ldr	r2, [r2, #24]
 800387a:	9211      	str	r2, [sp, #68]	; 0x44
 800387c:	69c2      	ldr	r2, [r0, #28]
 800387e:	9202      	str	r2, [sp, #8]
 8003880:	68e2      	ldr	r2, [r4, #12]
 8003882:	6880      	ldr	r0, [r0, #8]
 8003884:	9203      	str	r2, [sp, #12]
 8003886:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003888:	9004      	str	r0, [sp, #16]
 800388a:	920e      	str	r2, [sp, #56]	; 0x38
 800388c:	910f      	str	r1, [sp, #60]	; 0x3c
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 819b 	beq.w	8003bca <D128_GENERIC+0x36e>
 8003894:	6a23      	ldr	r3, [r4, #32]
 8003896:	9310      	str	r3, [sp, #64]	; 0x40
 8003898:	2300      	movs	r3, #0
 800389a:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8003c44 <D128_GENERIC+0x3e8>
 800389e:	9306      	str	r3, [sp, #24]
 80038a0:	e17a      	b.n	8003b98 <D128_GENERIC+0x33c>
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	9d05      	ldr	r5, [sp, #20]
 80038a6:	b214      	sxth	r4, r2
 80038a8:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80038ac:	4250      	negs	r0, r2
 80038ae:	eb05 010a 	add.w	r1, r5, sl
 80038b2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80038b6:	eb01 0800 	add.w	r8, r1, r0
 80038ba:	eb0b 0c04 	add.w	ip, fp, r4
 80038be:	eb08 070c 	add.w	r7, r8, ip
 80038c2:	183b      	adds	r3, r7, r0
 80038c4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80038c8:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 80038cc:	eb0e 0604 	add.w	r6, lr, r4
 80038d0:	9307      	str	r3, [sp, #28]
 80038d2:	1833      	adds	r3, r6, r0
 80038d4:	9305      	str	r3, [sp, #20]
 80038d6:	462b      	mov	r3, r5
 80038d8:	f815 a00a 	ldrb.w	sl, [r5, sl]
 80038dc:	f8cd a020 	str.w	sl, [sp, #32]
 80038e0:	f818 a00c 	ldrb.w	sl, [r8, ip]
 80038e4:	f813 c002 	ldrb.w	ip, [r3, r2]
 80038e8:	f81e 8004 	ldrb.w	r8, [lr, r4]
 80038ec:	5c3a      	ldrb	r2, [r7, r0]
 80038ee:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 80038f2:	781f      	ldrb	r7, [r3, #0]
 80038f4:	9b07      	ldr	r3, [sp, #28]
 80038f6:	9d05      	ldr	r5, [sp, #20]
 80038f8:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80038fc:	5c09      	ldrb	r1, [r1, r0]
 80038fe:	9709      	str	r7, [sp, #36]	; 0x24
 8003900:	9307      	str	r3, [sp, #28]
 8003902:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8003906:	5c33      	ldrb	r3, [r6, r0]
 8003908:	0412      	lsls	r2, r2, #16
 800390a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800390e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8003912:	9d08      	ldr	r5, [sp, #32]
 8003914:	eb06 0a04 	add.w	sl, r6, r4
 8003918:	0409      	lsls	r1, r1, #16
 800391a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800391e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8003922:	5d36      	ldrb	r6, [r6, r4]
 8003924:	9c05      	ldr	r4, [sp, #20]
 8003926:	042d      	lsls	r5, r5, #16
 8003928:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800392c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8003930:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8003934:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8003938:	eb0a 0c00 	add.w	ip, sl, r0
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8003942:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8003946:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800394a:	9d07      	ldr	r5, [sp, #28]
 800394c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8003950:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8003954:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003956:	4458      	add	r0, fp
 8003958:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800395c:	9005      	str	r0, [sp, #20]
 800395e:	4439      	add	r1, r7
 8003960:	442a      	add	r2, r5
 8003962:	44b2      	add	sl, r6
 8003964:	1918      	adds	r0, r3, r4
 8003966:	b2cb      	uxtb	r3, r1
 8003968:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800396c:	9e02      	ldr	r6, [sp, #8]
 800396e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003972:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8003976:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800397a:	441e      	add	r6, r3
 800397c:	0e09      	lsrs	r1, r1, #24
 800397e:	4633      	mov	r3, r6
 8003980:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8003984:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8003988:	b2d4      	uxtb	r4, r2
 800398a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800398e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003992:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8003996:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800399a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800399e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80039a2:	0e12      	lsrs	r2, r2, #24
 80039a4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80039a8:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80039ac:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80039b0:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80039b4:	9702      	str	r7, [sp, #8]
 80039b6:	b2c2      	uxtb	r2, r0
 80039b8:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80039bc:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 80039c0:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80039c4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80039c8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80039cc:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80039d0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80039d4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80039d8:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80039dc:	0e00      	lsrs	r0, r0, #24
 80039de:	fa5f f68a 	uxtb.w	r6, sl
 80039e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e6:	9309      	str	r3, [sp, #36]	; 0x24
 80039e8:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80039ec:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80039f0:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80039f4:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80039f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80039fc:	950a      	str	r5, [sp, #40]	; 0x28
 80039fe:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8003a02:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8003a06:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8003a0a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003a0e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8003a12:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003a16:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a18:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8003a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a1e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8003a22:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003a26:	9307      	str	r3, [sp, #28]
 8003a28:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8003a2c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8003a30:	9b02      	ldr	r3, [sp, #8]
 8003a32:	f8cd c008 	str.w	ip, [sp, #8]
 8003a36:	4694      	mov	ip, r2
 8003a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a3a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8003a3e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8003a42:	9a02      	ldr	r2, [sp, #8]
 8003a44:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003a48:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8003a4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a52:	f8cd a020 	str.w	sl, [sp, #32]
 8003a56:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003a5a:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8003a5e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003a62:	9b07      	ldr	r3, [sp, #28]
 8003a64:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003a68:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8003a6c:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8003a70:	9a08      	ldr	r2, [sp, #32]
 8003a72:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a7a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8003a7e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003a82:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8003a86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003a8a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003a8e:	0a96      	lsrs	r6, r2, #10
 8003a90:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003a94:	9602      	str	r6, [sp, #8]
 8003a96:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003a9a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8003a9e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8003aa2:	4e53      	ldr	r6, [pc, #332]	; (8003bf0 <D128_GENERIC+0x394>)
 8003aa4:	9f03      	ldr	r7, [sp, #12]
 8003aa6:	fb2c 7606 	smlad	r6, ip, r6, r7
 8003aaa:	4f52      	ldr	r7, [pc, #328]	; (8003bf4 <D128_GENERIC+0x398>)
 8003aac:	fb2a 6607 	smlad	r6, sl, r7, r6
 8003ab0:	4f51      	ldr	r7, [pc, #324]	; (8003bf8 <D128_GENERIC+0x39c>)
 8003ab2:	fb21 6607 	smlad	r6, r1, r7, r6
 8003ab6:	4f51      	ldr	r7, [pc, #324]	; (8003bfc <D128_GENERIC+0x3a0>)
 8003ab8:	fb24 6607 	smlad	r6, r4, r7, r6
 8003abc:	4f50      	ldr	r7, [pc, #320]	; (8003c00 <D128_GENERIC+0x3a4>)
 8003abe:	fb28 6607 	smlad	r6, r8, r7, r6
 8003ac2:	4f50      	ldr	r7, [pc, #320]	; (8003c04 <D128_GENERIC+0x3a8>)
 8003ac4:	fb20 6607 	smlad	r6, r0, r7, r6
 8003ac8:	4f4f      	ldr	r7, [pc, #316]	; (8003c08 <D128_GENERIC+0x3ac>)
 8003aca:	fb23 6607 	smlad	r6, r3, r7, r6
 8003ace:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8003ad2:	fb25 6607 	smlad	r6, r5, r7, r6
 8003ad6:	4f4d      	ldr	r7, [pc, #308]	; (8003c0c <D128_GENERIC+0x3b0>)
 8003ad8:	9a04      	ldr	r2, [sp, #16]
 8003ada:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8003ade:	4a4c      	ldr	r2, [pc, #304]	; (8003c10 <D128_GENERIC+0x3b4>)
 8003ae0:	fb2a ee02 	smlad	lr, sl, r2, lr
 8003ae4:	4f4b      	ldr	r7, [pc, #300]	; (8003c14 <D128_GENERIC+0x3b8>)
 8003ae6:	fb21 ee07 	smlad	lr, r1, r7, lr
 8003aea:	4f4b      	ldr	r7, [pc, #300]	; (8003c18 <D128_GENERIC+0x3bc>)
 8003aec:	fb24 ee07 	smlad	lr, r4, r7, lr
 8003af0:	4f4a      	ldr	r7, [pc, #296]	; (8003c1c <D128_GENERIC+0x3c0>)
 8003af2:	fb28 ee07 	smlad	lr, r8, r7, lr
 8003af6:	4f4a      	ldr	r7, [pc, #296]	; (8003c20 <D128_GENERIC+0x3c4>)
 8003af8:	fb20 ee07 	smlad	lr, r0, r7, lr
 8003afc:	4f49      	ldr	r7, [pc, #292]	; (8003c24 <D128_GENERIC+0x3c8>)
 8003afe:	fb23 e707 	smlad	r7, r3, r7, lr
 8003b02:	f8df e144 	ldr.w	lr, [pc, #324]	; 8003c48 <D128_GENERIC+0x3ec>
 8003b06:	fb25 720e 	smlad	r2, r5, lr, r7
 8003b0a:	f04f 0b01 	mov.w	fp, #1
 8003b0e:	9203      	str	r2, [sp, #12]
 8003b10:	fb2c fb0b 	smuad	fp, ip, fp
 8003b14:	4f44      	ldr	r7, [pc, #272]	; (8003c28 <D128_GENERIC+0x3cc>)
 8003b16:	fb2a ba07 	smlad	sl, sl, r7, fp
 8003b1a:	4f44      	ldr	r7, [pc, #272]	; (8003c2c <D128_GENERIC+0x3d0>)
 8003b1c:	fb21 aa07 	smlad	sl, r1, r7, sl
 8003b20:	4f43      	ldr	r7, [pc, #268]	; (8003c30 <D128_GENERIC+0x3d4>)
 8003b22:	fb24 aa07 	smlad	sl, r4, r7, sl
 8003b26:	4f43      	ldr	r7, [pc, #268]	; (8003c34 <D128_GENERIC+0x3d8>)
 8003b28:	fb28 a707 	smlad	r7, r8, r7, sl
 8003b2c:	4a42      	ldr	r2, [pc, #264]	; (8003c38 <D128_GENERIC+0x3dc>)
 8003b2e:	fb20 7702 	smlad	r7, r0, r2, r7
 8003b32:	4a42      	ldr	r2, [pc, #264]	; (8003c3c <D128_GENERIC+0x3e0>)
 8003b34:	fb23 7702 	smlad	r7, r3, r2, r7
 8003b38:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <D128_GENERIC+0x3e4>)
 8003b3a:	fb25 7303 	smlad	r3, r5, r3, r7
 8003b3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003b40:	9304      	str	r3, [sp, #16]
 8003b42:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8003b46:	b185      	cbz	r5, 8003b6a <D128_GENERIC+0x30e>
 8003b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b4c:	960d      	str	r6, [sp, #52]	; 0x34
 8003b4e:	4432      	add	r2, r6
 8003b50:	1a52      	subs	r2, r2, r1
 8003b52:	17d1      	asrs	r1, r2, #31
 8003b54:	fba2 2305 	umull	r2, r3, r2, r5
 8003b58:	fb05 3301 	mla	r3, r5, r1, r3
 8003b5c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8003b60:	f143 0300 	adc.w	r3, r3, #0
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	930c      	str	r3, [sp, #48]	; 0x30
 8003b68:	461e      	mov	r6, r3
 8003b6a:	9801      	ldr	r0, [sp, #4]
 8003b6c:	9c06      	ldr	r4, [sp, #24]
 8003b6e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8003b70:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003b72:	01f6      	lsls	r6, r6, #7
 8003b74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b78:	2300      	movs	r3, #0
 8003b7a:	fbc5 2306 	smlal	r2, r3, r5, r6
 8003b7e:	fb04 f101 	mul.w	r1, r4, r1
 8003b82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b84:	109b      	asrs	r3, r3, #2
 8003b86:	f303 030f 	ssat	r3, #16, r3
 8003b8a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8003b8e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003b90:	1c62      	adds	r2, r4, #1
 8003b92:	4293      	cmp	r3, r2
 8003b94:	9206      	str	r2, [sp, #24]
 8003b96:	dd18      	ble.n	8003bca <D128_GENERIC+0x36e>
 8003b98:	9b01      	ldr	r3, [sp, #4]
 8003b9a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003b9c:	2a01      	cmp	r2, #1
 8003b9e:	f47f ae80 	bne.w	80038a2 <D128_GENERIC+0x46>
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	9d05      	ldr	r5, [sp, #20]
 8003ba6:	069b      	lsls	r3, r3, #26
 8003ba8:	6829      	ldr	r1, [r5, #0]
 8003baa:	686a      	ldr	r2, [r5, #4]
 8003bac:	68a8      	ldr	r0, [r5, #8]
 8003bae:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8003bb2:	f105 0410 	add.w	r4, r5, #16
 8003bb6:	d506      	bpl.n	8003bc6 <D128_GENERIC+0x36a>
 8003bb8:	ba49      	rev16	r1, r1
 8003bba:	ba52      	rev16	r2, r2
 8003bbc:	ba40      	rev16	r0, r0
 8003bbe:	fa9a fa9a 	rev16.w	sl, sl
 8003bc2:	9405      	str	r4, [sp, #20]
 8003bc4:	e6cf      	b.n	8003966 <D128_GENERIC+0x10a>
 8003bc6:	9405      	str	r4, [sp, #20]
 8003bc8:	e6cd      	b.n	8003966 <D128_GENERIC+0x10a>
 8003bca:	9a01      	ldr	r2, [sp, #4]
 8003bcc:	9904      	ldr	r1, [sp, #16]
 8003bce:	6091      	str	r1, [r2, #8]
 8003bd0:	9903      	ldr	r1, [sp, #12]
 8003bd2:	60d1      	str	r1, [r2, #12]
 8003bd4:	9b02      	ldr	r3, [sp, #8]
 8003bd6:	61d3      	str	r3, [r2, #28]
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4613      	mov	r3, r2
 8003bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bde:	610a      	str	r2, [r1, #16]
 8003be0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003be2:	6159      	str	r1, [r3, #20]
 8003be4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003be6:	6199      	str	r1, [r3, #24]
 8003be8:	2000      	movs	r0, #0
 8003bea:	b013      	add	sp, #76	; 0x4c
 8003bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf0:	00780069 	.word	0x00780069
 8003bf4:	005b004e 	.word	0x005b004e
 8003bf8:	00420037 	.word	0x00420037
 8003bfc:	002d0024 	.word	0x002d0024
 8003c00:	001c0015 	.word	0x001c0015
 8003c04:	000f000a 	.word	0x000f000a
 8003c08:	00060003 	.word	0x00060003
 8003c0c:	00880096 	.word	0x00880096
 8003c10:	00a200ac 	.word	0x00a200ac
 8003c14:	00b400ba 	.word	0x00b400ba
 8003c18:	00be00c0 	.word	0x00be00c0
 8003c1c:	00c000be 	.word	0x00c000be
 8003c20:	00ba00b4 	.word	0x00ba00b4
 8003c24:	00ac00a2 	.word	0x00ac00a2
 8003c28:	00030006 	.word	0x00030006
 8003c2c:	000a000f 	.word	0x000a000f
 8003c30:	0015001c 	.word	0x0015001c
 8003c34:	0024002d 	.word	0x0024002d
 8003c38:	00370042 	.word	0x00370042
 8003c3c:	004e005b 	.word	0x004e005b
 8003c40:	00690078 	.word	0x00690078
 8003c44:	20000000 	.word	0x20000000
 8003c48:	00960088 	.word	0x00960088

08003c4c <D16_1CH_HTONS_VOL_HP>:
 8003c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c50:	4691      	mov	r9, r2
 8003c52:	b083      	sub	sp, #12
 8003c54:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8003c56:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8003c5a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	4680      	mov	r8, r0
 8003c62:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8003c66:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8003c6a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003c6e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8003c72:	9401      	str	r4, [sp, #4]
 8003c74:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8003c78:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8003c7c:	2a00      	cmp	r2, #0
 8003c7e:	d04e      	beq.n	8003d1e <D16_1CH_HTONS_VOL_HP+0xd2>
 8003c80:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8003d2c <D16_1CH_HTONS_VOL_HP+0xe0>
 8003c84:	1e8c      	subs	r4, r1, #2
 8003c86:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8003c8a:	f858 2b02 	ldr.w	r2, [r8], #2
 8003c8e:	ba52      	rev16	r2, r2
 8003c90:	b2d6      	uxtb	r6, r2
 8003c92:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003c96:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8003c9a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8003ca4:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8003ca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003cb0:	0a93      	lsrs	r3, r2, #10
 8003cb2:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8003cb4:	fb21 5202 	smlad	r2, r1, r2, r5
 8003cb8:	4d1b      	ldr	r5, [pc, #108]	; (8003d28 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8003cba:	fb21 f505 	smuad	r5, r1, r5
 8003cbe:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8003cc2:	4410      	add	r0, r2
 8003cc4:	1bc0      	subs	r0, r0, r7
 8003cc6:	17c7      	asrs	r7, r0, #31
 8003cc8:	fba0 010e 	umull	r0, r1, r0, lr
 8003ccc:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003cd0:	fb0e 1107 	mla	r1, lr, r7, r1
 8003cd4:	f141 0100 	adc.w	r1, r1, #0
 8003cd8:	0448      	lsls	r0, r1, #17
 8003cda:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003cde:	2700      	movs	r7, #0
 8003ce0:	fbc0 670a 	smlal	r6, r7, r0, sl
 8003ce4:	45d8      	cmp	r8, fp
 8003ce6:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8003cea:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8003cee:	4617      	mov	r7, r2
 8003cf0:	f301 010f 	ssat	r1, #16, r1
 8003cf4:	f824 1f02 	strh.w	r1, [r4, #2]!
 8003cf8:	d1c7      	bne.n	8003c8a <D16_1CH_HTONS_VOL_HP+0x3e>
 8003cfa:	9901      	ldr	r1, [sp, #4]
 8003cfc:	f8c9 301c 	str.w	r3, [r9, #28]
 8003d00:	9b00      	ldr	r3, [sp, #0]
 8003d02:	f8c9 0010 	str.w	r0, [r9, #16]
 8003d06:	2000      	movs	r0, #0
 8003d08:	f8c9 5008 	str.w	r5, [r9, #8]
 8003d0c:	f8c9 100c 	str.w	r1, [r9, #12]
 8003d10:	f8c9 2014 	str.w	r2, [r9, #20]
 8003d14:	f8c9 3018 	str.w	r3, [r9, #24]
 8003d18:	b003      	add	sp, #12
 8003d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1e:	463a      	mov	r2, r7
 8003d20:	4621      	mov	r1, r4
 8003d22:	e7eb      	b.n	8003cfc <D16_1CH_HTONS_VOL_HP+0xb0>
 8003d24:	00030001 	.word	0x00030001
 8003d28:	00010003 	.word	0x00010003
 8003d2c:	20000000 	.word	0x20000000

08003d30 <D24_1CH_HTONS_VOL_HP>:
 8003d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d34:	b089      	sub	sp, #36	; 0x24
 8003d36:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8003d38:	6996      	ldr	r6, [r2, #24]
 8003d3a:	9304      	str	r3, [sp, #16]
 8003d3c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8003d3e:	9207      	str	r2, [sp, #28]
 8003d40:	6915      	ldr	r5, [r2, #16]
 8003d42:	6954      	ldr	r4, [r2, #20]
 8003d44:	9606      	str	r6, [sp, #24]
 8003d46:	6893      	ldr	r3, [r2, #8]
 8003d48:	69d6      	ldr	r6, [r2, #28]
 8003d4a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8003d4e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8003d52:	9a04      	ldr	r2, [sp, #16]
 8003d54:	9705      	str	r7, [sp, #20]
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	d07e      	beq.n	8003e58 <D24_1CH_HTONS_VOL_HP+0x128>
 8003d5a:	f1a1 0b02 	sub.w	fp, r1, #2
 8003d5e:	2700      	movs	r7, #0
 8003d60:	46a8      	mov	r8, r5
 8003d62:	f8cd b004 	str.w	fp, [sp, #4]
 8003d66:	4655      	mov	r5, sl
 8003d68:	46e3      	mov	fp, ip
 8003d6a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8003e64 <D24_1CH_HTONS_VOL_HP+0x134>
 8003d6e:	46ba      	mov	sl, r7
 8003d70:	469c      	mov	ip, r3
 8003d72:	e055      	b.n	8003e20 <D24_1CH_HTONS_VOL_HP+0xf0>
 8003d74:	7802      	ldrb	r2, [r0, #0]
 8003d76:	78c3      	ldrb	r3, [r0, #3]
 8003d78:	7841      	ldrb	r1, [r0, #1]
 8003d7a:	0212      	lsls	r2, r2, #8
 8003d7c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8003d80:	440b      	add	r3, r1
 8003d82:	3002      	adds	r0, #2
 8003d84:	b2d9      	uxtb	r1, r3
 8003d86:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003d8a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8003d8e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8003d98:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8003d9c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8003da0:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8003da4:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8003da8:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8003dac:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8003db0:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <D24_1CH_HTONS_VOL_HP+0x12c>)
 8003db2:	fb23 b102 	smlad	r1, r3, r2, fp
 8003db6:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <D24_1CH_HTONS_VOL_HP+0x130>)
 8003db8:	fb23 cb02 	smlad	fp, r3, r2, ip
 8003dbc:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8003dc0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8003dc4:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8003dc8:	2201      	movs	r2, #1
 8003dca:	fb23 f702 	smuad	r7, r3, r2
 8003dce:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8003dd2:	eb01 0208 	add.w	r2, r1, r8
 8003dd6:	1b12      	subs	r2, r2, r4
 8003dd8:	17d4      	asrs	r4, r2, #31
 8003dda:	fba2 2305 	umull	r2, r3, r2, r5
 8003dde:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8003de2:	fb05 3304 	mla	r3, r5, r4, r3
 8003de6:	f143 0300 	adc.w	r3, r3, #0
 8003dea:	9c05      	ldr	r4, [sp, #20]
 8003dec:	03da      	lsls	r2, r3, #15
 8003dee:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003df2:	f04f 0900 	mov.w	r9, #0
 8003df6:	fbc4 8902 	smlal	r8, r9, r4, r2
 8003dfa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003dfe:	9a01      	ldr	r2, [sp, #4]
 8003e00:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8003e04:	9b03      	ldr	r3, [sp, #12]
 8003e06:	109b      	asrs	r3, r3, #2
 8003e08:	f303 030f 	ssat	r3, #16, r3
 8003e0c:	f822 3f02 	strh.w	r3, [r2, #2]!
 8003e10:	9b04      	ldr	r3, [sp, #16]
 8003e12:	9201      	str	r2, [sp, #4]
 8003e14:	f10a 0a01 	add.w	sl, sl, #1
 8003e18:	459a      	cmp	sl, r3
 8003e1a:	44bc      	add	ip, r7
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	d00b      	beq.n	8003e38 <D24_1CH_HTONS_VOL_HP+0x108>
 8003e20:	f01a 0f01 	tst.w	sl, #1
 8003e24:	d0a6      	beq.n	8003d74 <D24_1CH_HTONS_VOL_HP+0x44>
 8003e26:	78c2      	ldrb	r2, [r0, #3]
 8003e28:	7883      	ldrb	r3, [r0, #2]
 8003e2a:	f810 1b04 	ldrb.w	r1, [r0], #4
 8003e2e:	0212      	lsls	r2, r2, #8
 8003e30:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8003e34:	440b      	add	r3, r1
 8003e36:	e7a5      	b.n	8003d84 <D24_1CH_HTONS_VOL_HP+0x54>
 8003e38:	4663      	mov	r3, ip
 8003e3a:	4645      	mov	r5, r8
 8003e3c:	46dc      	mov	ip, fp
 8003e3e:	9807      	ldr	r0, [sp, #28]
 8003e40:	6141      	str	r1, [r0, #20]
 8003e42:	9906      	ldr	r1, [sp, #24]
 8003e44:	6083      	str	r3, [r0, #8]
 8003e46:	f8c0 c00c 	str.w	ip, [r0, #12]
 8003e4a:	61c6      	str	r6, [r0, #28]
 8003e4c:	6105      	str	r5, [r0, #16]
 8003e4e:	6181      	str	r1, [r0, #24]
 8003e50:	2000      	movs	r0, #0
 8003e52:	b009      	add	sp, #36	; 0x24
 8003e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e58:	4621      	mov	r1, r4
 8003e5a:	e7f0      	b.n	8003e3e <D24_1CH_HTONS_VOL_HP+0x10e>
 8003e5c:	00030001 	.word	0x00030001
 8003e60:	00060007 	.word	0x00060007
 8003e64:	20000000 	.word	0x20000000

08003e68 <D32_1CH_HTONS_VOL_HP>:
 8003e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6c:	4692      	mov	sl, r2
 8003e6e:	b087      	sub	sp, #28
 8003e70:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8003e72:	f8da 3018 	ldr.w	r3, [sl, #24]
 8003e76:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	f8da 4010 	ldr.w	r4, [sl, #16]
 8003e80:	f8da 8014 	ldr.w	r8, [sl, #20]
 8003e84:	f8da 601c 	ldr.w	r6, [sl, #28]
 8003e88:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003e8c:	f8da e00c 	ldr.w	lr, [sl, #12]
 8003e90:	9501      	str	r5, [sp, #4]
 8003e92:	f8da c020 	ldr.w	ip, [sl, #32]
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d07b      	beq.n	8003f92 <D32_1CH_HTONS_VOL_HP+0x12a>
 8003e9a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003e9e:	4f3e      	ldr	r7, [pc, #248]	; (8003f98 <D32_1CH_HTONS_VOL_HP+0x130>)
 8003ea0:	f8cd c00c 	str.w	ip, [sp, #12]
 8003ea4:	9202      	str	r2, [sp, #8]
 8003ea6:	460d      	mov	r5, r1
 8003ea8:	46a1      	mov	r9, r4
 8003eaa:	4684      	mov	ip, r0
 8003eac:	f8cd a014 	str.w	sl, [sp, #20]
 8003eb0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003eb4:	ba49      	rev16	r1, r1
 8003eb6:	b2c8      	uxtb	r0, r1
 8003eb8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8003ebc:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8003ec0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8003ec4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8003ec8:	0e09      	lsrs	r1, r1, #24
 8003eca:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8003ece:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8003ed2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8003ed6:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8003eda:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8003ede:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8003ee2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003ee6:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8003eea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003eee:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003ef2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8003ef6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8003efa:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <D32_1CH_HTONS_VOL_HP+0x134>)
 8003efc:	fb20 e202 	smlad	r2, r0, r2, lr
 8003f00:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003f04:	fb2a 2101 	smlad	r1, sl, r1, r2
 8003f08:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <D32_1CH_HTONS_VOL_HP+0x138>)
 8003f0a:	fb20 3302 	smlad	r3, r0, r2, r3
 8003f0e:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8003f10:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8003f14:	2301      	movs	r3, #1
 8003f16:	fb20 f003 	smuad	r0, r0, r3
 8003f1a:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <D32_1CH_HTONS_VOL_HP+0x140>)
 8003f1c:	fb2a 0303 	smlad	r3, sl, r3, r0
 8003f20:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8003f24:	9c03      	ldr	r4, [sp, #12]
 8003f26:	eb02 0009 	add.w	r0, r2, r9
 8003f2a:	eba0 0008 	sub.w	r0, r0, r8
 8003f2e:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8003f32:	fba0 0104 	umull	r0, r1, r0, r4
 8003f36:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003f3a:	fb04 110b 	mla	r1, r4, fp, r1
 8003f3e:	f141 0100 	adc.w	r1, r1, #0
 8003f42:	9c01      	ldr	r4, [sp, #4]
 8003f44:	0388      	lsls	r0, r1, #14
 8003f46:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003f4a:	f04f 0900 	mov.w	r9, #0
 8003f4e:	fbc0 8904 	smlal	r8, r9, r0, r4
 8003f52:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8003f56:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8003f5a:	f300 000f 	ssat	r0, #16, r0
 8003f5e:	9902      	ldr	r1, [sp, #8]
 8003f60:	f825 0b02 	strh.w	r0, [r5], #2
 8003f64:	428d      	cmp	r5, r1
 8003f66:	4690      	mov	r8, r2
 8003f68:	d1a2      	bne.n	8003eb0 <D32_1CH_HTONS_VOL_HP+0x48>
 8003f6a:	f8dd a014 	ldr.w	sl, [sp, #20]
 8003f6e:	464c      	mov	r4, r9
 8003f70:	f8ca 3008 	str.w	r3, [sl, #8]
 8003f74:	9b04      	ldr	r3, [sp, #16]
 8003f76:	f8ca e00c 	str.w	lr, [sl, #12]
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f8ca 601c 	str.w	r6, [sl, #28]
 8003f80:	f8ca 4010 	str.w	r4, [sl, #16]
 8003f84:	f8ca 2014 	str.w	r2, [sl, #20]
 8003f88:	f8ca 3018 	str.w	r3, [sl, #24]
 8003f8c:	b007      	add	sp, #28
 8003f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f92:	4642      	mov	r2, r8
 8003f94:	e7ec      	b.n	8003f70 <D32_1CH_HTONS_VOL_HP+0x108>
 8003f96:	bf00      	nop
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	00060003 	.word	0x00060003
 8003fa0:	000a000c 	.word	0x000a000c
 8003fa4:	000c000a 	.word	0x000c000a
 8003fa8:	00030006 	.word	0x00030006

08003fac <D48_1CH_HTONS_VOL_HP>:
 8003fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	461c      	mov	r4, r3
 8003fb4:	b087      	sub	sp, #28
 8003fb6:	4625      	mov	r5, r4
 8003fb8:	4626      	mov	r6, r4
 8003fba:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8003fbc:	9205      	str	r2, [sp, #20]
 8003fbe:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8003fc0:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8003fc4:	9501      	str	r5, [sp, #4]
 8003fc6:	4680      	mov	r8, r0
 8003fc8:	6a35      	ldr	r5, [r6, #32]
 8003fca:	6918      	ldr	r0, [r3, #16]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	9304      	str	r3, [sp, #16]
 8003fd0:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	9502      	str	r5, [sp, #8]
 8003fd8:	68e4      	ldr	r4, [r4, #12]
 8003fda:	2a00      	cmp	r2, #0
 8003fdc:	f000 808c 	beq.w	80040f8 <D48_1CH_HTONS_VOL_HP+0x14c>
 8003fe0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003fe4:	4d45      	ldr	r5, [pc, #276]	; (80040fc <D48_1CH_HTONS_VOL_HP+0x150>)
 8003fe6:	9203      	str	r2, [sp, #12]
 8003fe8:	468c      	mov	ip, r1
 8003fea:	e898 0044 	ldmia.w	r8, {r2, r6}
 8003fee:	f108 0806 	add.w	r8, r8, #6
 8003ff2:	ba52      	rev16	r2, r2
 8003ff4:	ba76      	rev16	r6, r6
 8003ff6:	b2d7      	uxtb	r7, r2
 8003ff8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003ffc:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8004000:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8004004:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8004008:	0e12      	lsrs	r2, r2, #24
 800400a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800400e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8004012:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8004016:	fa5f fb86 	uxtb.w	fp, r6
 800401a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800401e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8004022:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8004026:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800402a:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800402e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004032:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8004036:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800403a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800403e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004042:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8004046:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800404a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800404e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004052:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8004056:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800405a:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800405e:	4a28      	ldr	r2, [pc, #160]	; (8004100 <D48_1CH_HTONS_VOL_HP+0x154>)
 8004060:	fb2a 4202 	smlad	r2, sl, r2, r4
 8004064:	4927      	ldr	r1, [pc, #156]	; (8004104 <D48_1CH_HTONS_VOL_HP+0x158>)
 8004066:	fb27 2201 	smlad	r2, r7, r1, r2
 800406a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800406e:	fb26 2201 	smlad	r2, r6, r1, r2
 8004072:	4925      	ldr	r1, [pc, #148]	; (8004108 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8004074:	fb2a 3401 	smlad	r4, sl, r1, r3
 8004078:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800407c:	fb27 4403 	smlad	r4, r7, r3, r4
 8004080:	4b22      	ldr	r3, [pc, #136]	; (800410c <D48_1CH_HTONS_VOL_HP+0x160>)
 8004082:	fb26 4403 	smlad	r4, r6, r3, r4
 8004086:	2101      	movs	r1, #1
 8004088:	fb2a fa01 	smuad	sl, sl, r1
 800408c:	4b20      	ldr	r3, [pc, #128]	; (8004110 <D48_1CH_HTONS_VOL_HP+0x164>)
 800408e:	fb27 a703 	smlad	r7, r7, r3, sl
 8004092:	4b20      	ldr	r3, [pc, #128]	; (8004114 <D48_1CH_HTONS_VOL_HP+0x168>)
 8004094:	fb26 7303 	smlad	r3, r6, r3, r7
 8004098:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800409c:	9e02      	ldr	r6, [sp, #8]
 800409e:	9f01      	ldr	r7, [sp, #4]
 80040a0:	4410      	add	r0, r2
 80040a2:	eba0 0009 	sub.w	r0, r0, r9
 80040a6:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 80040aa:	fba0 0106 	umull	r0, r1, r0, r6
 80040ae:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80040b2:	fb06 110a 	mla	r1, r6, sl, r1
 80040b6:	f141 0100 	adc.w	r1, r1, #0
 80040ba:	0308      	lsls	r0, r1, #12
 80040bc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80040c0:	f04f 0a00 	mov.w	sl, #0
 80040c4:	fbc0 9a07 	smlal	r9, sl, r0, r7
 80040c8:	4657      	mov	r7, sl
 80040ca:	10b8      	asrs	r0, r7, #2
 80040cc:	f300 000f 	ssat	r0, #16, r0
 80040d0:	f82c 0b02 	strh.w	r0, [ip], #2
 80040d4:	0048      	lsls	r0, r1, #1
 80040d6:	9903      	ldr	r1, [sp, #12]
 80040d8:	458c      	cmp	ip, r1
 80040da:	4691      	mov	r9, r2
 80040dc:	d185      	bne.n	8003fea <D48_1CH_HTONS_VOL_HP+0x3e>
 80040de:	9d05      	ldr	r5, [sp, #20]
 80040e0:	616a      	str	r2, [r5, #20]
 80040e2:	9a04      	ldr	r2, [sp, #16]
 80040e4:	6128      	str	r0, [r5, #16]
 80040e6:	2000      	movs	r0, #0
 80040e8:	60ab      	str	r3, [r5, #8]
 80040ea:	60ec      	str	r4, [r5, #12]
 80040ec:	f8c5 e01c 	str.w	lr, [r5, #28]
 80040f0:	61aa      	str	r2, [r5, #24]
 80040f2:	b007      	add	sp, #28
 80040f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f8:	464a      	mov	r2, r9
 80040fa:	e7f0      	b.n	80040de <D48_1CH_HTONS_VOL_HP+0x132>
 80040fc:	20000000 	.word	0x20000000
 8004100:	000f000a 	.word	0x000f000a
 8004104:	00060003 	.word	0x00060003
 8004108:	00150019 	.word	0x00150019
 800410c:	00190015 	.word	0x00190015
 8004110:	00030006 	.word	0x00030006
 8004114:	000a000f 	.word	0x000a000f

08004118 <D64_1CH_HTONS_VOL_HP>:
 8004118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411c:	b089      	sub	sp, #36	; 0x24
 800411e:	4614      	mov	r4, r2
 8004120:	9207      	str	r2, [sp, #28]
 8004122:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004124:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8004128:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800412c:	6992      	ldr	r2, [r2, #24]
 800412e:	9206      	str	r2, [sp, #24]
 8004130:	68e2      	ldr	r2, [r4, #12]
 8004132:	9201      	str	r2, [sp, #4]
 8004134:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004136:	9203      	str	r2, [sp, #12]
 8004138:	6a22      	ldr	r2, [r4, #32]
 800413a:	69e5      	ldr	r5, [r4, #28]
 800413c:	68a6      	ldr	r6, [r4, #8]
 800413e:	9204      	str	r2, [sp, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 80b0 	beq.w	80042a6 <D64_1CH_HTONS_VOL_HP+0x18e>
 8004146:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800414a:	4f58      	ldr	r7, [pc, #352]	; (80042ac <D64_1CH_HTONS_VOL_HP+0x194>)
 800414c:	9305      	str	r3, [sp, #20]
 800414e:	9102      	str	r1, [sp, #8]
 8004150:	f850 2b08 	ldr.w	r2, [r0], #8
 8004154:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004158:	ba52      	rev16	r2, r2
 800415a:	fa93 f993 	rev16.w	r9, r3
 800415e:	b2d4      	uxtb	r4, r2
 8004160:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004164:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8004168:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800416c:	9901      	ldr	r1, [sp, #4]
 800416e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004172:	0e12      	lsrs	r2, r2, #24
 8004174:	44ab      	add	fp, r5
 8004176:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800417a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800417e:	fa5f f289 	uxtb.w	r2, r9
 8004182:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8004186:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800418a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800418e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8004192:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8004196:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800419a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800419e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80041a2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80041a6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80041aa:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80041ae:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80041b2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80041b6:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80041ba:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80041be:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80041c2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80041c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80041ce:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 80041d2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80041d6:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 80041da:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80041de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80041e2:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80041e6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80041ea:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80041ee:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <D64_1CH_HTONS_VOL_HP+0x198>)
 80041f0:	fb2b 1303 	smlad	r3, fp, r3, r1
 80041f4:	492f      	ldr	r1, [pc, #188]	; (80042b4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80041f6:	fb24 3301 	smlad	r3, r4, r1, r3
 80041fa:	492f      	ldr	r1, [pc, #188]	; (80042b8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80041fc:	fb22 3301 	smlad	r3, r2, r1, r3
 8004200:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8004204:	fb2e 390a 	smlad	r9, lr, sl, r3
 8004208:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800420a:	fb2b 6603 	smlad	r6, fp, r3, r6
 800420e:	fb2e 6613 	smladx	r6, lr, r3, r6
 8004212:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8004214:	fb24 6603 	smlad	r6, r4, r3, r6
 8004218:	fb22 6313 	smladx	r3, r2, r3, r6
 800421c:	f04f 0a01 	mov.w	sl, #1
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	fb2b fb0a 	smuad	fp, fp, sl
 8004226:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8004228:	fb24 ba03 	smlad	sl, r4, r3, fp
 800422c:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800422e:	fb22 a203 	smlad	r2, r2, r3, sl
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8004234:	fb2e 2603 	smlad	r6, lr, r3, r2
 8004238:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800423c:	eb0a 020c 	add.w	r2, sl, ip
 8004240:	9c04      	ldr	r4, [sp, #16]
 8004242:	9903      	ldr	r1, [sp, #12]
 8004244:	eba2 0208 	sub.w	r2, r2, r8
 8004248:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800424c:	fba2 2304 	umull	r2, r3, r2, r4
 8004250:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004254:	fb04 3309 	mla	r3, r4, r9, r3
 8004258:	f143 0300 	adc.w	r3, r3, #0
 800425c:	02da      	lsls	r2, r3, #11
 800425e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004262:	f04f 0900 	mov.w	r9, #0
 8004266:	fbc1 8902 	smlal	r8, r9, r1, r2
 800426a:	9902      	ldr	r1, [sp, #8]
 800426c:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8004270:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004274:	f302 020f 	ssat	r2, #16, r2
 8004278:	9b05      	ldr	r3, [sp, #20]
 800427a:	f821 2b02 	strh.w	r2, [r1], #2
 800427e:	4299      	cmp	r1, r3
 8004280:	9102      	str	r1, [sp, #8]
 8004282:	46d0      	mov	r8, sl
 8004284:	f47f af64 	bne.w	8004150 <D64_1CH_HTONS_VOL_HP+0x38>
 8004288:	9a07      	ldr	r2, [sp, #28]
 800428a:	9901      	ldr	r1, [sp, #4]
 800428c:	60d1      	str	r1, [r2, #12]
 800428e:	9906      	ldr	r1, [sp, #24]
 8004290:	6096      	str	r6, [r2, #8]
 8004292:	2000      	movs	r0, #0
 8004294:	61d5      	str	r5, [r2, #28]
 8004296:	f8c2 c010 	str.w	ip, [r2, #16]
 800429a:	f8c2 a014 	str.w	sl, [r2, #20]
 800429e:	6191      	str	r1, [r2, #24]
 80042a0:	b009      	add	sp, #36	; 0x24
 80042a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a6:	46c2      	mov	sl, r8
 80042a8:	4622      	mov	r2, r4
 80042aa:	e7ee      	b.n	800428a <D64_1CH_HTONS_VOL_HP+0x172>
 80042ac:	20000000 	.word	0x20000000
 80042b0:	001c0015 	.word	0x001c0015
 80042b4:	000f000a 	.word	0x000f000a
 80042b8:	00060003 	.word	0x00060003
 80042bc:	0024002a 	.word	0x0024002a
 80042c0:	002e0030 	.word	0x002e0030
 80042c4:	00030006 	.word	0x00030006
 80042c8:	000a000f 	.word	0x000a000f
 80042cc:	0015001c 	.word	0x0015001c

080042d0 <D80_1CH_HTONS_VOL_HP>:
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	4613      	mov	r3, r2
 80042d6:	b089      	sub	sp, #36	; 0x24
 80042d8:	4686      	mov	lr, r0
 80042da:	6918      	ldr	r0, [r3, #16]
 80042dc:	9000      	str	r0, [sp, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	461c      	mov	r4, r3
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	9302      	str	r3, [sp, #8]
 80042e6:	6983      	ldr	r3, [r0, #24]
 80042e8:	9306      	str	r3, [sp, #24]
 80042ea:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80042ee:	69c3      	ldr	r3, [r0, #28]
 80042f0:	68c0      	ldr	r0, [r0, #12]
 80042f2:	9207      	str	r2, [sp, #28]
 80042f4:	9001      	str	r0, [sp, #4]
 80042f6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80042f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80042fa:	9003      	str	r0, [sp, #12]
 80042fc:	6a20      	ldr	r0, [r4, #32]
 80042fe:	9004      	str	r0, [sp, #16]
 8004300:	2a00      	cmp	r2, #0
 8004302:	f000 80d2 	beq.w	80044aa <D80_1CH_HTONS_VOL_HP+0x1da>
 8004306:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800430a:	4869      	ldr	r0, [pc, #420]	; (80044b0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800430c:	9205      	str	r2, [sp, #20]
 800430e:	461c      	mov	r4, r3
 8004310:	f8de 5000 	ldr.w	r5, [lr]
 8004314:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004318:	f8de 3008 	ldr.w	r3, [lr, #8]
 800431c:	f10e 0e0a 	add.w	lr, lr, #10
 8004320:	ba6d      	rev16	r5, r5
 8004322:	ba52      	rev16	r2, r2
 8004324:	fa93 fb93 	rev16.w	fp, r3
 8004328:	b2ee      	uxtb	r6, r5
 800432a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800432e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8004332:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004336:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800433a:	eb04 0a07 	add.w	sl, r4, r7
 800433e:	0e2d      	lsrs	r5, r5, #24
 8004340:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8004344:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8004348:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800434c:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8004350:	b2d5      	uxtb	r5, r2
 8004352:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004356:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800435a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800435e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004362:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8004366:	0e12      	lsrs	r2, r2, #24
 8004368:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800436c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8004370:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8004374:	fa5f f48b 	uxtb.w	r4, fp
 8004378:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800437c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8004380:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004384:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8004388:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800438c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004390:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8004394:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8004398:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800439c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80043a0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80043a4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80043a8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80043ac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80043b0:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80043b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b8:	f3cb 0609 	ubfx	r6, fp, #0, #10
 80043bc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80043c0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80043c4:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80043c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80043cc:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80043d0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80043d4:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80043d8:	4d36      	ldr	r5, [pc, #216]	; (80044b4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80043da:	9f01      	ldr	r7, [sp, #4]
 80043dc:	fb23 7505 	smlad	r5, r3, r5, r7
 80043e0:	4f35      	ldr	r7, [pc, #212]	; (80044b8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80043e2:	fb29 5507 	smlad	r5, r9, r7, r5
 80043e6:	4f35      	ldr	r7, [pc, #212]	; (80044bc <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80043e8:	fb28 5507 	smlad	r5, r8, r7, r5
 80043ec:	4f34      	ldr	r7, [pc, #208]	; (80044c0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80043ee:	fb22 5507 	smlad	r5, r2, r7, r5
 80043f2:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80043f6:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80043fa:	4d32      	ldr	r5, [pc, #200]	; (80044c4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80043fc:	fb23 cc05 	smlad	ip, r3, r5, ip
 8004400:	4d31      	ldr	r5, [pc, #196]	; (80044c8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8004402:	fb29 cc05 	smlad	ip, r9, r5, ip
 8004406:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800440a:	fb28 c505 	smlad	r5, r8, r5, ip
 800440e:	4f2f      	ldr	r7, [pc, #188]	; (80044cc <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8004410:	fb22 5507 	smlad	r5, r2, r7, r5
 8004414:	4f2e      	ldr	r7, [pc, #184]	; (80044d0 <D80_1CH_HTONS_VOL_HP+0x200>)
 8004416:	fb26 5507 	smlad	r5, r6, r7, r5
 800441a:	f04f 0a01 	mov.w	sl, #1
 800441e:	9501      	str	r5, [sp, #4]
 8004420:	fb23 fa0a 	smuad	sl, r3, sl
 8004424:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <D80_1CH_HTONS_VOL_HP+0x204>)
 8004426:	fb29 a903 	smlad	r9, r9, r3, sl
 800442a:	4d2b      	ldr	r5, [pc, #172]	; (80044d8 <D80_1CH_HTONS_VOL_HP+0x208>)
 800442c:	fb28 9805 	smlad	r8, r8, r5, r9
 8004430:	4d2a      	ldr	r5, [pc, #168]	; (80044dc <D80_1CH_HTONS_VOL_HP+0x20c>)
 8004432:	fb22 8205 	smlad	r2, r2, r5, r8
 8004436:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <D80_1CH_HTONS_VOL_HP+0x210>)
 8004438:	fb26 2c03 	smlad	ip, r6, r3, r2
 800443c:	9b00      	ldr	r3, [sp, #0]
 800443e:	9d04      	ldr	r5, [sp, #16]
 8004440:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8004444:	4453      	add	r3, sl
 8004446:	461a      	mov	r2, r3
 8004448:	9b02      	ldr	r3, [sp, #8]
 800444a:	f8cd a008 	str.w	sl, [sp, #8]
 800444e:	1ad2      	subs	r2, r2, r3
 8004450:	17d7      	asrs	r7, r2, #31
 8004452:	fba2 2305 	umull	r2, r3, r2, r5
 8004456:	fb05 3307 	mla	r3, r5, r7, r3
 800445a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800445e:	f143 0300 	adc.w	r3, r3, #0
 8004462:	9d03      	ldr	r5, [sp, #12]
 8004464:	029a      	lsls	r2, r3, #10
 8004466:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800446a:	2700      	movs	r7, #0
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	fbc5 6702 	smlal	r6, r7, r5, r2
 8004472:	10ba      	asrs	r2, r7, #2
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	f302 020f 	ssat	r2, #16, r2
 800447a:	9b05      	ldr	r3, [sp, #20]
 800447c:	f821 2b02 	strh.w	r2, [r1], #2
 8004480:	4299      	cmp	r1, r3
 8004482:	f47f af45 	bne.w	8004310 <D80_1CH_HTONS_VOL_HP+0x40>
 8004486:	4623      	mov	r3, r4
 8004488:	9907      	ldr	r1, [sp, #28]
 800448a:	9801      	ldr	r0, [sp, #4]
 800448c:	60c8      	str	r0, [r1, #12]
 800448e:	9a00      	ldr	r2, [sp, #0]
 8004490:	f8c1 c008 	str.w	ip, [r1, #8]
 8004494:	4608      	mov	r0, r1
 8004496:	61cb      	str	r3, [r1, #28]
 8004498:	610a      	str	r2, [r1, #16]
 800449a:	f8c1 a014 	str.w	sl, [r1, #20]
 800449e:	9906      	ldr	r1, [sp, #24]
 80044a0:	6181      	str	r1, [r0, #24]
 80044a2:	2000      	movs	r0, #0
 80044a4:	b009      	add	sp, #36	; 0x24
 80044a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044aa:	f8dd a008 	ldr.w	sl, [sp, #8]
 80044ae:	e7eb      	b.n	8004488 <D80_1CH_HTONS_VOL_HP+0x1b8>
 80044b0:	20000000 	.word	0x20000000
 80044b4:	002d0024 	.word	0x002d0024
 80044b8:	001c0015 	.word	0x001c0015
 80044bc:	000f000a 	.word	0x000f000a
 80044c0:	00060003 	.word	0x00060003
 80044c4:	0037003f 	.word	0x0037003f
 80044c8:	00450049 	.word	0x00450049
 80044cc:	00490045 	.word	0x00490045
 80044d0:	003f0037 	.word	0x003f0037
 80044d4:	00030006 	.word	0x00030006
 80044d8:	000a000f 	.word	0x000a000f
 80044dc:	0015001c 	.word	0x0015001c
 80044e0:	0024002d 	.word	0x0024002d

080044e4 <D128_1CH_HTONS_VOL_HP>:
 80044e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e8:	b093      	sub	sp, #76	; 0x4c
 80044ea:	4614      	mov	r4, r2
 80044ec:	9211      	str	r2, [sp, #68]	; 0x44
 80044ee:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80044f0:	6912      	ldr	r2, [r2, #16]
 80044f2:	9203      	str	r2, [sp, #12]
 80044f4:	4622      	mov	r2, r4
 80044f6:	4615      	mov	r5, r2
 80044f8:	6964      	ldr	r4, [r4, #20]
 80044fa:	9406      	str	r4, [sp, #24]
 80044fc:	4614      	mov	r4, r2
 80044fe:	6992      	ldr	r2, [r2, #24]
 8004500:	9210      	str	r2, [sp, #64]	; 0x40
 8004502:	68ea      	ldr	r2, [r5, #12]
 8004504:	9204      	str	r2, [sp, #16]
 8004506:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004508:	69e6      	ldr	r6, [r4, #28]
 800450a:	920d      	str	r2, [sp, #52]	; 0x34
 800450c:	68a4      	ldr	r4, [r4, #8]
 800450e:	6a2a      	ldr	r2, [r5, #32]
 8004510:	9405      	str	r4, [sp, #20]
 8004512:	920e      	str	r2, [sp, #56]	; 0x38
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8145 	beq.w	80047a4 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800451a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800451e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004520:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8004800 <D128_1CH_HTONS_VOL_HP+0x31c>
 8004524:	9107      	str	r1, [sp, #28]
 8004526:	f100 0310 	add.w	r3, r0, #16
 800452a:	4699      	mov	r9, r3
 800452c:	f1a9 0110 	sub.w	r1, r9, #16
 8004530:	c90e      	ldmia	r1, {r1, r2, r3}
 8004532:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8004536:	ba49      	rev16	r1, r1
 8004538:	ba52      	rev16	r2, r2
 800453a:	ba5b      	rev16	r3, r3
 800453c:	fa90 fa90 	rev16.w	sl, r0
 8004540:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8004544:	b2cc      	uxtb	r4, r1
 8004546:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800454a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800454e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8004552:	0e09      	lsrs	r1, r1, #24
 8004554:	4426      	add	r6, r4
 8004556:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800455a:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800455e:	b2d0      	uxtb	r0, r2
 8004560:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8004564:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8004568:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800456c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004570:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8004574:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8004578:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800457c:	0e12      	lsrs	r2, r2, #24
 800457e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8004582:	9701      	str	r7, [sp, #4]
 8004584:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8004588:	4627      	mov	r7, r4
 800458a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800458e:	9702      	str	r7, [sp, #8]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8004596:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800459a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800459e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80045a2:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 80045a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80045aa:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80045ae:	0e1b      	lsrs	r3, r3, #24
 80045b0:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80045b4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80045b8:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80045bc:	fa5f f38a 	uxtb.w	r3, sl
 80045c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80045c4:	960a      	str	r6, [sp, #40]	; 0x28
 80045c6:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80045ca:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80045ce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80045d2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80045d6:	950b      	str	r5, [sp, #44]	; 0x2c
 80045d8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80045dc:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80045e0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80045e4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80045e8:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80045ec:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80045f0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80045f4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80045f8:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80045fc:	9308      	str	r3, [sp, #32]
 80045fe:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004602:	9b01      	ldr	r3, [sp, #4]
 8004604:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004608:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800460c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004610:	9b02      	ldr	r3, [sp, #8]
 8004612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004616:	9302      	str	r3, [sp, #8]
 8004618:	9b08      	ldr	r3, [sp, #32]
 800461a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800461e:	9308      	str	r3, [sp, #32]
 8004620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004622:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004626:	950c      	str	r5, [sp, #48]	; 0x30
 8004628:	461d      	mov	r5, r3
 800462a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800462c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004630:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004634:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8004638:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	9b02      	ldr	r3, [sp, #8]
 8004640:	9202      	str	r2, [sp, #8]
 8004642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004644:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004646:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800464a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800464e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004652:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004656:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800465a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800465e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8004662:	9b08      	ldr	r3, [sp, #32]
 8004664:	9f01      	ldr	r7, [sp, #4]
 8004666:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800466a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800466e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004672:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004676:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800467a:	46be      	mov	lr, r7
 800467c:	0a96      	lsrs	r6, r2, #10
 800467e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8004682:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8004686:	4f49      	ldr	r7, [pc, #292]	; (80047ac <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8004688:	9a04      	ldr	r2, [sp, #16]
 800468a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800468e:	4a48      	ldr	r2, [pc, #288]	; (80047b0 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8004690:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004694:	4a47      	ldr	r2, [pc, #284]	; (80047b4 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8004696:	fb21 ee02 	smlad	lr, r1, r2, lr
 800469a:	4a47      	ldr	r2, [pc, #284]	; (80047b8 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800469c:	fb24 ee02 	smlad	lr, r4, r2, lr
 80046a0:	4a46      	ldr	r2, [pc, #280]	; (80047bc <D128_1CH_HTONS_VOL_HP+0x2d8>)
 80046a2:	9f02      	ldr	r7, [sp, #8]
 80046a4:	fb27 ee02 	smlad	lr, r7, r2, lr
 80046a8:	4a45      	ldr	r2, [pc, #276]	; (80047c0 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80046aa:	fb20 ee02 	smlad	lr, r0, r2, lr
 80046ae:	4a45      	ldr	r2, [pc, #276]	; (80047c4 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80046b0:	fb23 e702 	smlad	r7, r3, r2, lr
 80046b4:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80046b8:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80046bc:	9f01      	ldr	r7, [sp, #4]
 80046be:	4a42      	ldr	r2, [pc, #264]	; (80047c8 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80046c0:	46bc      	mov	ip, r7
 80046c2:	9f05      	ldr	r7, [sp, #20]
 80046c4:	fb2c 7c02 	smlad	ip, ip, r2, r7
 80046c8:	4a40      	ldr	r2, [pc, #256]	; (80047cc <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80046ca:	fb2a cc02 	smlad	ip, sl, r2, ip
 80046ce:	4f40      	ldr	r7, [pc, #256]	; (80047d0 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80046d0:	fb21 cc07 	smlad	ip, r1, r7, ip
 80046d4:	4f3f      	ldr	r7, [pc, #252]	; (80047d4 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80046d6:	fb24 cc07 	smlad	ip, r4, r7, ip
 80046da:	4f3f      	ldr	r7, [pc, #252]	; (80047d8 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80046dc:	9a02      	ldr	r2, [sp, #8]
 80046de:	fb22 cc07 	smlad	ip, r2, r7, ip
 80046e2:	4f3e      	ldr	r7, [pc, #248]	; (80047dc <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80046e4:	fb20 cc07 	smlad	ip, r0, r7, ip
 80046e8:	4f3d      	ldr	r7, [pc, #244]	; (80047e0 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80046ea:	fb23 c707 	smlad	r7, r3, r7, ip
 80046ee:	f8df c114 	ldr.w	ip, [pc, #276]	; 8004804 <D128_1CH_HTONS_VOL_HP+0x320>
 80046f2:	fb25 720c 	smlad	r2, r5, ip, r7
 80046f6:	f04f 0b01 	mov.w	fp, #1
 80046fa:	9204      	str	r2, [sp, #16]
 80046fc:	9f01      	ldr	r7, [sp, #4]
 80046fe:	fb27 fb0b 	smuad	fp, r7, fp
 8004702:	4f38      	ldr	r7, [pc, #224]	; (80047e4 <D128_1CH_HTONS_VOL_HP+0x300>)
 8004704:	fb2a ba07 	smlad	sl, sl, r7, fp
 8004708:	4f37      	ldr	r7, [pc, #220]	; (80047e8 <D128_1CH_HTONS_VOL_HP+0x304>)
 800470a:	fb21 aa07 	smlad	sl, r1, r7, sl
 800470e:	4f37      	ldr	r7, [pc, #220]	; (80047ec <D128_1CH_HTONS_VOL_HP+0x308>)
 8004710:	fb24 aa07 	smlad	sl, r4, r7, sl
 8004714:	4f36      	ldr	r7, [pc, #216]	; (80047f0 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8004716:	9a02      	ldr	r2, [sp, #8]
 8004718:	fb22 a707 	smlad	r7, r2, r7, sl
 800471c:	4a35      	ldr	r2, [pc, #212]	; (80047f4 <D128_1CH_HTONS_VOL_HP+0x310>)
 800471e:	fb20 7702 	smlad	r7, r0, r2, r7
 8004722:	4a35      	ldr	r2, [pc, #212]	; (80047f8 <D128_1CH_HTONS_VOL_HP+0x314>)
 8004724:	fb23 7702 	smlad	r7, r3, r2, r7
 8004728:	4b34      	ldr	r3, [pc, #208]	; (80047fc <D128_1CH_HTONS_VOL_HP+0x318>)
 800472a:	fb25 7303 	smlad	r3, r5, r3, r7
 800472e:	9305      	str	r3, [sp, #20]
 8004730:	9b03      	ldr	r3, [sp, #12]
 8004732:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004734:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8004738:	4473      	add	r3, lr
 800473a:	461a      	mov	r2, r3
 800473c:	9b06      	ldr	r3, [sp, #24]
 800473e:	f8cd e018 	str.w	lr, [sp, #24]
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	17d1      	asrs	r1, r2, #31
 8004746:	fba2 2304 	umull	r2, r3, r2, r4
 800474a:	fb04 3301 	mla	r3, r4, r1, r3
 800474e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004752:	f143 0300 	adc.w	r3, r3, #0
 8004756:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004758:	021a      	lsls	r2, r3, #8
 800475a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800475e:	2100      	movs	r1, #0
 8004760:	fbc4 0102 	smlal	r0, r1, r4, r2
 8004764:	108a      	asrs	r2, r1, #2
 8004766:	9907      	ldr	r1, [sp, #28]
 8004768:	f302 020f 	ssat	r2, #16, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	f821 2b02 	strh.w	r2, [r1], #2
 8004772:	9303      	str	r3, [sp, #12]
 8004774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004776:	9107      	str	r1, [sp, #28]
 8004778:	4299      	cmp	r1, r3
 800477a:	f109 0910 	add.w	r9, r9, #16
 800477e:	f47f aed5 	bne.w	800452c <D128_1CH_HTONS_VOL_HP+0x48>
 8004782:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004784:	9905      	ldr	r1, [sp, #20]
 8004786:	6091      	str	r1, [r2, #8]
 8004788:	9904      	ldr	r1, [sp, #16]
 800478a:	60d1      	str	r1, [r2, #12]
 800478c:	4613      	mov	r3, r2
 800478e:	61d6      	str	r6, [r2, #28]
 8004790:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004792:	9a03      	ldr	r2, [sp, #12]
 8004794:	611a      	str	r2, [r3, #16]
 8004796:	2000      	movs	r0, #0
 8004798:	f8c3 e014 	str.w	lr, [r3, #20]
 800479c:	6199      	str	r1, [r3, #24]
 800479e:	b013      	add	sp, #76	; 0x4c
 80047a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80047a8:	e7eb      	b.n	8004782 <D128_1CH_HTONS_VOL_HP+0x29e>
 80047aa:	bf00      	nop
 80047ac:	00780069 	.word	0x00780069
 80047b0:	005b004e 	.word	0x005b004e
 80047b4:	00420037 	.word	0x00420037
 80047b8:	002d0024 	.word	0x002d0024
 80047bc:	001c0015 	.word	0x001c0015
 80047c0:	000f000a 	.word	0x000f000a
 80047c4:	00060003 	.word	0x00060003
 80047c8:	00880096 	.word	0x00880096
 80047cc:	00a200ac 	.word	0x00a200ac
 80047d0:	00b400ba 	.word	0x00b400ba
 80047d4:	00be00c0 	.word	0x00be00c0
 80047d8:	00c000be 	.word	0x00c000be
 80047dc:	00ba00b4 	.word	0x00ba00b4
 80047e0:	00ac00a2 	.word	0x00ac00a2
 80047e4:	00030006 	.word	0x00030006
 80047e8:	000a000f 	.word	0x000a000f
 80047ec:	0015001c 	.word	0x0015001c
 80047f0:	0024002d 	.word	0x0024002d
 80047f4:	00370042 	.word	0x00370042
 80047f8:	004e005b 	.word	0x004e005b
 80047fc:	00690078 	.word	0x00690078
 8004800:	20000000 	.word	0x20000000
 8004804:	00960088 	.word	0x00960088

08004808 <PDM_Filter_Init>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	2240      	movs	r2, #64	; 0x40
 800480c:	4604      	mov	r4, r0
 800480e:	2100      	movs	r1, #0
 8004810:	300c      	adds	r0, #12
 8004812:	f000 fe8f 	bl	8005534 <memset>
 8004816:	493b      	ldr	r1, [pc, #236]	; (8004904 <PDM_Filter_Init+0xfc>)
 8004818:	483b      	ldr	r0, [pc, #236]	; (8004908 <PDM_Filter_Init+0x100>)
 800481a:	f000 f98d 	bl	8004b38 <CRC_Lock>
 800481e:	8822      	ldrh	r2, [r4, #0]
 8004820:	8963      	ldrh	r3, [r4, #10]
 8004822:	4938      	ldr	r1, [pc, #224]	; (8004904 <PDM_Filter_Init+0xfc>)
 8004824:	8925      	ldrh	r5, [r4, #8]
 8004826:	86a3      	strh	r3, [r4, #52]	; 0x34
 8004828:	2801      	cmp	r0, #1
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	bf18      	it	ne
 8004830:	2100      	movne	r1, #0
 8004832:	2a01      	cmp	r2, #1
 8004834:	6461      	str	r1, [r4, #68]	; 0x44
 8004836:	86e5      	strh	r5, [r4, #54]	; 0x36
 8004838:	61a3      	str	r3, [r4, #24]
 800483a:	6123      	str	r3, [r4, #16]
 800483c:	6163      	str	r3, [r4, #20]
 800483e:	60e3      	str	r3, [r4, #12]
 8004840:	6263      	str	r3, [r4, #36]	; 0x24
 8004842:	61e3      	str	r3, [r4, #28]
 8004844:	6223      	str	r3, [r4, #32]
 8004846:	6423      	str	r3, [r4, #64]	; 0x40
 8004848:	d918      	bls.n	800487c <PDM_Filter_Init+0x74>
 800484a:	2003      	movs	r0, #3
 800484c:	2302      	movs	r3, #2
 800484e:	8862      	ldrh	r2, [r4, #2]
 8004850:	2a01      	cmp	r2, #1
 8004852:	d91d      	bls.n	8004890 <PDM_Filter_Init+0x88>
 8004854:	2140      	movs	r1, #64	; 0x40
 8004856:	2300      	movs	r3, #0
 8004858:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800485a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800485e:	6862      	ldr	r2, [r4, #4]
 8004860:	bf04      	itt	eq
 8004862:	6421      	streq	r1, [r4, #64]	; 0x40
 8004864:	460b      	moveq	r3, r1
 8004866:	b11a      	cbz	r2, 8004870 <PDM_Filter_Init+0x68>
 8004868:	f043 0310 	orr.w	r3, r3, #16
 800486c:	6423      	str	r3, [r4, #64]	; 0x40
 800486e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004870:	2200      	movs	r2, #0
 8004872:	8722      	strh	r2, [r4, #56]	; 0x38
 8004874:	b908      	cbnz	r0, 800487a <PDM_Filter_Init+0x72>
 8004876:	3380      	adds	r3, #128	; 0x80
 8004878:	6423      	str	r3, [r4, #64]	; 0x40
 800487a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487c:	4d23      	ldr	r5, [pc, #140]	; (800490c <PDM_Filter_Init+0x104>)
 800487e:	d010      	beq.n	80048a2 <PDM_Filter_Init+0x9a>
 8004880:	782a      	ldrb	r2, [r5, #0]
 8004882:	2a01      	cmp	r2, #1
 8004884:	d027      	beq.n	80048d6 <PDM_Filter_Init+0xce>
 8004886:	8862      	ldrh	r2, [r4, #2]
 8004888:	2a01      	cmp	r2, #1
 800488a:	f04f 0001 	mov.w	r0, #1
 800488e:	d8e1      	bhi.n	8004854 <PDM_Filter_Init+0x4c>
 8004890:	d001      	beq.n	8004896 <PDM_Filter_Init+0x8e>
 8004892:	4618      	mov	r0, r3
 8004894:	e7de      	b.n	8004854 <PDM_Filter_Init+0x4c>
 8004896:	2220      	movs	r2, #32
 8004898:	4618      	mov	r0, r3
 800489a:	6422      	str	r2, [r4, #64]	; 0x40
 800489c:	4613      	mov	r3, r2
 800489e:	2160      	movs	r1, #96	; 0x60
 80048a0:	e7da      	b.n	8004858 <PDM_Filter_Init+0x50>
 80048a2:	7829      	ldrb	r1, [r5, #0]
 80048a4:	2900      	cmp	r1, #0
 80048a6:	d1ee      	bne.n	8004886 <PDM_Filter_Init+0x7e>
 80048a8:	4919      	ldr	r1, [pc, #100]	; (8004910 <PDM_Filter_Init+0x108>)
 80048aa:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8004918 <PDM_Filter_Init+0x110>
 80048ae:	4f19      	ldr	r7, [pc, #100]	; (8004914 <PDM_Filter_Init+0x10c>)
 80048b0:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80048b4:	684a      	ldr	r2, [r1, #4]
 80048b6:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80048ba:	ea02 0007 	and.w	r0, r2, r7
 80048be:	4303      	orrs	r3, r0
 80048c0:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80048c4:	4413      	add	r3, r2
 80048c6:	f841 3f04 	str.w	r3, [r1, #4]!
 80048ca:	428e      	cmp	r6, r1
 80048cc:	d1f2      	bne.n	80048b4 <PDM_Filter_Init+0xac>
 80048ce:	2001      	movs	r0, #1
 80048d0:	7028      	strb	r0, [r5, #0]
 80048d2:	2300      	movs	r3, #0
 80048d4:	e7bb      	b.n	800484e <PDM_Filter_Init+0x46>
 80048d6:	490e      	ldr	r1, [pc, #56]	; (8004910 <PDM_Filter_Init+0x108>)
 80048d8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8004918 <PDM_Filter_Init+0x110>
 80048dc:	4f0d      	ldr	r7, [pc, #52]	; (8004914 <PDM_Filter_Init+0x10c>)
 80048de:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80048e2:	684a      	ldr	r2, [r1, #4]
 80048e4:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80048e8:	ea02 0007 	and.w	r0, r2, r7
 80048ec:	4303      	orrs	r3, r0
 80048ee:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80048f2:	4413      	add	r3, r2
 80048f4:	f841 3f04 	str.w	r3, [r1, #4]!
 80048f8:	428e      	cmp	r6, r1
 80048fa:	d1f2      	bne.n	80048e2 <PDM_Filter_Init+0xda>
 80048fc:	2300      	movs	r3, #0
 80048fe:	702b      	strb	r3, [r5, #0]
 8004900:	e7c1      	b.n	8004886 <PDM_Filter_Init+0x7e>
 8004902:	bf00      	nop
 8004904:	b5e8b5cd 	.word	0xb5e8b5cd
 8004908:	f407a5c2 	.word	0xf407a5c2
 800490c:	20000490 	.word	0x20000490
 8004910:	1ffffffc 	.word	0x1ffffffc
 8004914:	000ffc00 	.word	0x000ffc00
 8004918:	3ff00000 	.word	0x3ff00000

0800491c <PDM_Filter_setConfig>:
 800491c:	4b66      	ldr	r3, [pc, #408]	; (8004ab8 <PDM_Filter_setConfig+0x19c>)
 800491e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <PDM_Filter_setConfig+0xc>
 8004924:	2004      	movs	r0, #4
 8004926:	4770      	bx	lr
 8004928:	b530      	push	{r4, r5, lr}
 800492a:	880a      	ldrh	r2, [r1, #0]
 800492c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800492e:	ed2d 8b04 	vpush	{d8-d9}
 8004932:	4604      	mov	r4, r0
 8004934:	460d      	mov	r5, r1
 8004936:	1e51      	subs	r1, r2, #1
 8004938:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800493c:	2906      	cmp	r1, #6
 800493e:	b083      	sub	sp, #12
 8004940:	6420      	str	r0, [r4, #64]	; 0x40
 8004942:	d91a      	bls.n	800497a <PDM_Filter_setConfig+0x5e>
 8004944:	2008      	movs	r0, #8
 8004946:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800494a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800494e:	4299      	cmp	r1, r3
 8004950:	d07e      	beq.n	8004a50 <PDM_Filter_setConfig+0x134>
 8004952:	f113 0f0c 	cmn.w	r3, #12
 8004956:	da2a      	bge.n	80049ae <PDM_Filter_setConfig+0x92>
 8004958:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800495c:	3040      	adds	r0, #64	; 0x40
 800495e:	80ab      	strh	r3, [r5, #4]
 8004960:	8622      	strh	r2, [r4, #48]	; 0x30
 8004962:	886b      	ldrh	r3, [r5, #2]
 8004964:	8663      	strh	r3, [r4, #50]	; 0x32
 8004966:	b920      	cbnz	r0, 8004972 <PDM_Filter_setConfig+0x56>
 8004968:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800496a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496e:	6423      	str	r3, [r4, #64]	; 0x40
 8004970:	2000      	movs	r0, #0
 8004972:	b003      	add	sp, #12
 8004974:	ecbd 8b04 	vpop	{d8-d9}
 8004978:	bd30      	pop	{r4, r5, pc}
 800497a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800497c:	4291      	cmp	r1, r2
 800497e:	d06c      	beq.n	8004a5a <PDM_Filter_setConfig+0x13e>
 8004980:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	4313      	orrs	r3, r2
 800498a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800498e:	6423      	str	r3, [r4, #64]	; 0x40
 8004990:	2970      	cmp	r1, #112	; 0x70
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800499a:	d066      	beq.n	8004a6a <PDM_Filter_setConfig+0x14e>
 800499c:	2b06      	cmp	r3, #6
 800499e:	f200 8089 	bhi.w	8004ab4 <PDM_Filter_setConfig+0x198>
 80049a2:	e8df f003 	tbb	[pc, r3]
 80049a6:	4f52      	.short	0x4f52
 80049a8:	3d43494c 	.word	0x3d43494c
 80049ac:	46          	.byte	0x46
 80049ad:	00          	.byte	0x00
 80049ae:	2b33      	cmp	r3, #51	; 0x33
 80049b0:	dc32      	bgt.n	8004a18 <PDM_Filter_setConfig+0xfc>
 80049b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80049b4:	f002 020f 	and.w	r2, r2, #15
 80049b8:	3a01      	subs	r2, #1
 80049ba:	2a06      	cmp	r2, #6
 80049bc:	d872      	bhi.n	8004aa4 <PDM_Filter_setConfig+0x188>
 80049be:	493f      	ldr	r1, [pc, #252]	; (8004abc <PDM_Filter_setConfig+0x1a0>)
 80049c0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80049c4:	ed92 9a00 	vldr	s18, [r2]
 80049c8:	ed92 8a07 	vldr	s16, [r2, #28]
 80049cc:	9001      	str	r0, [sp, #4]
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049d6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80049da:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 80049de:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80049e2:	f000 f929 	bl	8004c38 <powf>
 80049e6:	eddf 0a36 	vldr	s1, [pc, #216]	; 8004ac0 <PDM_Filter_setConfig+0x1a4>
 80049ea:	eef0 8a40 	vmov.f32	s17, s0
 80049ee:	ee70 0ac9 	vsub.f32	s1, s1, s18
 80049f2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80049f6:	f000 f91f 	bl	8004c38 <powf>
 80049fa:	ee28 8a28 	vmul.f32	s16, s16, s17
 80049fe:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004a02:	f000 f8f3 	bl	8004bec <roundf>
 8004a06:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8004a0a:	88ab      	ldrh	r3, [r5, #4]
 8004a0c:	882a      	ldrh	r2, [r5, #0]
 8004a0e:	9801      	ldr	r0, [sp, #4]
 8004a10:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8004a14:	8723      	strh	r3, [r4, #56]	; 0x38
 8004a16:	e7a3      	b.n	8004960 <PDM_Filter_setConfig+0x44>
 8004a18:	2333      	movs	r3, #51	; 0x33
 8004a1a:	3040      	adds	r0, #64	; 0x40
 8004a1c:	80ab      	strh	r3, [r5, #4]
 8004a1e:	e79f      	b.n	8004960 <PDM_Filter_setConfig+0x44>
 8004a20:	4b28      	ldr	r3, [pc, #160]	; (8004ac4 <PDM_Filter_setConfig+0x1a8>)
 8004a22:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a24:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8004a28:	2000      	movs	r0, #0
 8004a2a:	e792      	b.n	8004952 <PDM_Filter_setConfig+0x36>
 8004a2c:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <PDM_Filter_setConfig+0x1ac>)
 8004a2e:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a30:	e7f8      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a32:	4b26      	ldr	r3, [pc, #152]	; (8004acc <PDM_Filter_setConfig+0x1b0>)
 8004a34:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a36:	e7f5      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a38:	4b25      	ldr	r3, [pc, #148]	; (8004ad0 <PDM_Filter_setConfig+0x1b4>)
 8004a3a:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a3c:	e7f2      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a3e:	4b25      	ldr	r3, [pc, #148]	; (8004ad4 <PDM_Filter_setConfig+0x1b8>)
 8004a40:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a42:	e7ef      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a44:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <PDM_Filter_setConfig+0x1bc>)
 8004a46:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a48:	e7ec      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a4a:	4b24      	ldr	r3, [pc, #144]	; (8004adc <PDM_Filter_setConfig+0x1c0>)
 8004a4c:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a4e:	e7e9      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a50:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8004a52:	4291      	cmp	r1, r2
 8004a54:	f47f af7d 	bne.w	8004952 <PDM_Filter_setConfig+0x36>
 8004a58:	e783      	b.n	8004962 <PDM_Filter_setConfig+0x46>
 8004a5a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8004a5e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d023      	beq.n	8004aae <PDM_Filter_setConfig+0x192>
 8004a66:	2000      	movs	r0, #0
 8004a68:	e773      	b.n	8004952 <PDM_Filter_setConfig+0x36>
 8004a6a:	2b06      	cmp	r3, #6
 8004a6c:	d822      	bhi.n	8004ab4 <PDM_Filter_setConfig+0x198>
 8004a6e:	e8df f003 	tbb	[pc, r3]
 8004a72:	1316      	.short	0x1316
 8004a74:	070a0d10 	.word	0x070a0d10
 8004a78:	04          	.byte	0x04
 8004a79:	00          	.byte	0x00
 8004a7a:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <PDM_Filter_setConfig+0x1c4>)
 8004a7c:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a7e:	e7d1      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a80:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <PDM_Filter_setConfig+0x1c8>)
 8004a82:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a84:	e7ce      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <PDM_Filter_setConfig+0x1cc>)
 8004a88:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a8a:	e7cb      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a8c:	4b17      	ldr	r3, [pc, #92]	; (8004aec <PDM_Filter_setConfig+0x1d0>)
 8004a8e:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a90:	e7c8      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a92:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <PDM_Filter_setConfig+0x1d4>)
 8004a94:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a96:	e7c5      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a98:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <PDM_Filter_setConfig+0x1d8>)
 8004a9a:	64a3      	str	r3, [r4, #72]	; 0x48
 8004a9c:	e7c2      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004a9e:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <PDM_Filter_setConfig+0x1dc>)
 8004aa0:	64a3      	str	r3, [r4, #72]	; 0x48
 8004aa2:	e7bf      	b.n	8004a24 <PDM_Filter_setConfig+0x108>
 8004aa4:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8004afc <PDM_Filter_setConfig+0x1e0>
 8004aa8:	eeb0 9a48 	vmov.f32	s18, s16
 8004aac:	e78e      	b.n	80049cc <PDM_Filter_setConfig+0xb0>
 8004aae:	886b      	ldrh	r3, [r5, #2]
 8004ab0:	8663      	strh	r3, [r4, #50]	; 0x32
 8004ab2:	e759      	b.n	8004968 <PDM_Filter_setConfig+0x4c>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e746      	b.n	8004946 <PDM_Filter_setConfig+0x2a>
 8004ab8:	b5e8b5cd 	.word	0xb5e8b5cd
 8004abc:	080056d4 	.word	0x080056d4
 8004ac0:	42000000 	.word	0x42000000
 8004ac4:	08002e89 	.word	0x08002e89
 8004ac8:	08002d69 	.word	0x08002d69
 8004acc:	08003019 	.word	0x08003019
 8004ad0:	0800385d 	.word	0x0800385d
 8004ad4:	080035bd 	.word	0x080035bd
 8004ad8:	0800339d 	.word	0x0800339d
 8004adc:	080031b1 	.word	0x080031b1
 8004ae0:	08003e69 	.word	0x08003e69
 8004ae4:	08003d31 	.word	0x08003d31
 8004ae8:	08003c4d 	.word	0x08003c4d
 8004aec:	080044e5 	.word	0x080044e5
 8004af0:	080042d1 	.word	0x080042d1
 8004af4:	08004119 	.word	0x08004119
 8004af8:	08003fad 	.word	0x08003fad
 8004afc:	00000000 	.word	0x00000000

08004b00 <PDM_Filter>:
 8004b00:	b410      	push	{r4}
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <PDM_Filter+0x34>)
 8004b04:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004b06:	429c      	cmp	r4, r3
 8004b08:	d003      	beq.n	8004b12 <PDM_Filter+0x12>
 8004b0a:	2004      	movs	r0, #4
 8004b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004b14:	05dc      	lsls	r4, r3, #23
 8004b16:	d407      	bmi.n	8004b28 <PDM_Filter+0x28>
 8004b18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b1c:	bf14      	ite	ne
 8004b1e:	2020      	movne	r0, #32
 8004b20:	2030      	moveq	r0, #48	; 0x30
 8004b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8004b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b2e:	320c      	adds	r2, #12
 8004b30:	4718      	bx	r3
 8004b32:	bf00      	nop
 8004b34:	b5e8b5cd 	.word	0xb5e8b5cd

08004b38 <CRC_Lock>:
 8004b38:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <CRC_Lock+0x60>)
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	b410      	push	{r4}
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	4c16      	ldr	r4, [pc, #88]	; (8004b9c <CRC_Lock+0x64>)
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	b933      	cbnz	r3, 8004b58 <CRC_Lock+0x20>
 8004b4a:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <CRC_Lock+0x68>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b52:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004b56:	d00f      	beq.n	8004b78 <CRC_Lock+0x40>
 8004b58:	4a12      	ldr	r2, [pc, #72]	; (8004ba4 <CRC_Lock+0x6c>)
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1fc      	bne.n	8004b5e <CRC_Lock+0x26>
 8004b64:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <CRC_Lock+0x70>)
 8004b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b6a:	6018      	str	r0, [r3, #0]
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	1a08      	subs	r0, r1, r0
 8004b70:	fab0 f080 	clz	r0, r0
 8004b74:	0940      	lsrs	r0, r0, #5
 8004b76:	4770      	bx	lr
 8004b78:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <CRC_Lock+0x74>)
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	6813      	ldr	r3, [r2, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1fc      	bne.n	8004b7e <CRC_Lock+0x46>
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <CRC_Lock+0x78>)
 8004b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b8a:	6018      	str	r0, [r3, #0]
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	1a40      	subs	r0, r0, r1
 8004b90:	fab0 f080 	clz	r0, r0
 8004b94:	0940      	lsrs	r0, r0, #5
 8004b96:	4770      	bx	lr
 8004b98:	e0002000 	.word	0xe0002000
 8004b9c:	e0042000 	.word	0xe0042000
 8004ba0:	5c001000 	.word	0x5c001000
 8004ba4:	40023008 	.word	0x40023008
 8004ba8:	40023000 	.word	0x40023000
 8004bac:	58024c08 	.word	0x58024c08
 8004bb0:	58024c00 	.word	0x58024c00

08004bb4 <_Znaj>:
 8004bb4:	f000 b800 	b.w	8004bb8 <_Znwj>

08004bb8 <_Znwj>:
 8004bb8:	2801      	cmp	r0, #1
 8004bba:	bf38      	it	cc
 8004bbc:	2001      	movcc	r0, #1
 8004bbe:	b510      	push	{r4, lr}
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f000 fcae 	bl	8005524 <malloc>
 8004bc8:	b930      	cbnz	r0, 8004bd8 <_Znwj+0x20>
 8004bca:	f000 f807 	bl	8004bdc <_ZSt15get_new_handlerv>
 8004bce:	b908      	cbnz	r0, 8004bd4 <_Znwj+0x1c>
 8004bd0:	f000 fc76 	bl	80054c0 <abort>
 8004bd4:	4780      	blx	r0
 8004bd6:	e7f4      	b.n	8004bc2 <_Znwj+0xa>
 8004bd8:	bd10      	pop	{r4, pc}
	...

08004bdc <_ZSt15get_new_handlerv>:
 8004bdc:	4b02      	ldr	r3, [pc, #8]	; (8004be8 <_ZSt15get_new_handlerv+0xc>)
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	f3bf 8f5b 	dmb	ish
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	200004ac 	.word	0x200004ac

08004bec <roundf>:
 8004bec:	ee10 0a10 	vmov	r0, s0
 8004bf0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004bf4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8004bf8:	2a16      	cmp	r2, #22
 8004bfa:	dc15      	bgt.n	8004c28 <roundf+0x3c>
 8004bfc:	2a00      	cmp	r2, #0
 8004bfe:	da08      	bge.n	8004c12 <roundf+0x26>
 8004c00:	3201      	adds	r2, #1
 8004c02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8004c06:	d101      	bne.n	8004c0c <roundf+0x20>
 8004c08:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8004c0c:	ee00 3a10 	vmov	s0, r3
 8004c10:	4770      	bx	lr
 8004c12:	4908      	ldr	r1, [pc, #32]	; (8004c34 <roundf+0x48>)
 8004c14:	4111      	asrs	r1, r2
 8004c16:	4208      	tst	r0, r1
 8004c18:	d0fa      	beq.n	8004c10 <roundf+0x24>
 8004c1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c1e:	4113      	asrs	r3, r2
 8004c20:	4403      	add	r3, r0
 8004c22:	ea23 0301 	bic.w	r3, r3, r1
 8004c26:	e7f1      	b.n	8004c0c <roundf+0x20>
 8004c28:	2a80      	cmp	r2, #128	; 0x80
 8004c2a:	d1f1      	bne.n	8004c10 <roundf+0x24>
 8004c2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	007fffff 	.word	0x007fffff

08004c38 <powf>:
 8004c38:	b508      	push	{r3, lr}
 8004c3a:	ed2d 8b04 	vpush	{d8-d9}
 8004c3e:	eeb0 9a40 	vmov.f32	s18, s0
 8004c42:	eef0 8a60 	vmov.f32	s17, s1
 8004c46:	f000 f88f 	bl	8004d68 <__ieee754_powf>
 8004c4a:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <powf+0x120>)
 8004c4c:	f993 3000 	ldrsb.w	r3, [r3]
 8004c50:	3301      	adds	r3, #1
 8004c52:	eeb0 8a40 	vmov.f32	s16, s0
 8004c56:	d012      	beq.n	8004c7e <powf+0x46>
 8004c58:	eef4 8a68 	vcmp.f32	s17, s17
 8004c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c60:	d60d      	bvs.n	8004c7e <powf+0x46>
 8004c62:	eeb4 9a49 	vcmp.f32	s18, s18
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	d70d      	bvc.n	8004c88 <powf+0x50>
 8004c6c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004c78:	bf08      	it	eq
 8004c7a:	eeb0 8a67 	vmoveq.f32	s16, s15
 8004c7e:	eeb0 0a48 	vmov.f32	s0, s16
 8004c82:	ecbd 8b04 	vpop	{d8-d9}
 8004c86:	bd08      	pop	{r3, pc}
 8004c88:	eddf 9a34 	vldr	s19, [pc, #208]	; 8004d5c <powf+0x124>
 8004c8c:	eeb4 9a69 	vcmp.f32	s18, s19
 8004c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c94:	d116      	bne.n	8004cc4 <powf+0x8c>
 8004c96:	eef4 8a69 	vcmp.f32	s17, s19
 8004c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9e:	d057      	beq.n	8004d50 <powf+0x118>
 8004ca0:	eeb0 0a68 	vmov.f32	s0, s17
 8004ca4:	f000 fb2a 	bl	80052fc <finitef>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d0e8      	beq.n	8004c7e <powf+0x46>
 8004cac:	eef4 8ae9 	vcmpe.f32	s17, s19
 8004cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb4:	d5e3      	bpl.n	8004c7e <powf+0x46>
 8004cb6:	f000 fc0b 	bl	80054d0 <__errno>
 8004cba:	2321      	movs	r3, #33	; 0x21
 8004cbc:	6003      	str	r3, [r0, #0]
 8004cbe:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8004d60 <powf+0x128>
 8004cc2:	e7dc      	b.n	8004c7e <powf+0x46>
 8004cc4:	f000 fb1a 	bl	80052fc <finitef>
 8004cc8:	bb50      	cbnz	r0, 8004d20 <powf+0xe8>
 8004cca:	eeb0 0a49 	vmov.f32	s0, s18
 8004cce:	f000 fb15 	bl	80052fc <finitef>
 8004cd2:	b328      	cbz	r0, 8004d20 <powf+0xe8>
 8004cd4:	eeb0 0a68 	vmov.f32	s0, s17
 8004cd8:	f000 fb10 	bl	80052fc <finitef>
 8004cdc:	b300      	cbz	r0, 8004d20 <powf+0xe8>
 8004cde:	eeb4 8a48 	vcmp.f32	s16, s16
 8004ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce6:	d706      	bvc.n	8004cf6 <powf+0xbe>
 8004ce8:	f000 fbf2 	bl	80054d0 <__errno>
 8004cec:	2321      	movs	r3, #33	; 0x21
 8004cee:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8004cf2:	6003      	str	r3, [r0, #0]
 8004cf4:	e7c3      	b.n	8004c7e <powf+0x46>
 8004cf6:	f000 fbeb 	bl	80054d0 <__errno>
 8004cfa:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8004cfe:	2322      	movs	r3, #34	; 0x22
 8004d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d04:	6003      	str	r3, [r0, #0]
 8004d06:	d508      	bpl.n	8004d1a <powf+0xe2>
 8004d08:	eeb0 0a68 	vmov.f32	s0, s17
 8004d0c:	f000 fb0a 	bl	8005324 <rintf>
 8004d10:	eeb4 0a68 	vcmp.f32	s0, s17
 8004d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d18:	d1d1      	bne.n	8004cbe <powf+0x86>
 8004d1a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8004d64 <powf+0x12c>
 8004d1e:	e7ae      	b.n	8004c7e <powf+0x46>
 8004d20:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d28:	d1a9      	bne.n	8004c7e <powf+0x46>
 8004d2a:	eeb0 0a49 	vmov.f32	s0, s18
 8004d2e:	f000 fae5 	bl	80052fc <finitef>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d0a3      	beq.n	8004c7e <powf+0x46>
 8004d36:	eeb0 0a68 	vmov.f32	s0, s17
 8004d3a:	f000 fadf 	bl	80052fc <finitef>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d09d      	beq.n	8004c7e <powf+0x46>
 8004d42:	f000 fbc5 	bl	80054d0 <__errno>
 8004d46:	2322      	movs	r3, #34	; 0x22
 8004d48:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8004d5c <powf+0x124>
 8004d4c:	6003      	str	r3, [r0, #0]
 8004d4e:	e796      	b.n	8004c7e <powf+0x46>
 8004d50:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004d54:	e793      	b.n	8004c7e <powf+0x46>
 8004d56:	bf00      	nop
 8004d58:	2000040c 	.word	0x2000040c
 8004d5c:	00000000 	.word	0x00000000
 8004d60:	ff800000 	.word	0xff800000
 8004d64:	7f800000 	.word	0x7f800000

08004d68 <__ieee754_powf>:
 8004d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6c:	ee10 5a90 	vmov	r5, s1
 8004d70:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8004d74:	ed2d 8b02 	vpush	{d8}
 8004d78:	eeb0 8a40 	vmov.f32	s16, s0
 8004d7c:	eef0 8a60 	vmov.f32	s17, s1
 8004d80:	f000 8291 	beq.w	80052a6 <__ieee754_powf+0x53e>
 8004d84:	ee10 8a10 	vmov	r8, s0
 8004d88:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8004d8c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004d90:	dc06      	bgt.n	8004da0 <__ieee754_powf+0x38>
 8004d92:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8004d96:	dd0a      	ble.n	8004dae <__ieee754_powf+0x46>
 8004d98:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004d9c:	f000 8283 	beq.w	80052a6 <__ieee754_powf+0x53e>
 8004da0:	ecbd 8b02 	vpop	{d8}
 8004da4:	48d8      	ldr	r0, [pc, #864]	; (8005108 <__ieee754_powf+0x3a0>)
 8004da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004daa:	f000 bab5 	b.w	8005318 <nanf>
 8004dae:	f1b8 0f00 	cmp.w	r8, #0
 8004db2:	da1f      	bge.n	8004df4 <__ieee754_powf+0x8c>
 8004db4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8004db8:	da2e      	bge.n	8004e18 <__ieee754_powf+0xb0>
 8004dba:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8004dbe:	f2c0 827b 	blt.w	80052b8 <__ieee754_powf+0x550>
 8004dc2:	15fb      	asrs	r3, r7, #23
 8004dc4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8004dc8:	fa47 f603 	asr.w	r6, r7, r3
 8004dcc:	fa06 f303 	lsl.w	r3, r6, r3
 8004dd0:	42bb      	cmp	r3, r7
 8004dd2:	f040 8271 	bne.w	80052b8 <__ieee754_powf+0x550>
 8004dd6:	f006 0601 	and.w	r6, r6, #1
 8004dda:	f1c6 0602 	rsb	r6, r6, #2
 8004dde:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8004de2:	d120      	bne.n	8004e26 <__ieee754_powf+0xbe>
 8004de4:	2d00      	cmp	r5, #0
 8004de6:	f280 8264 	bge.w	80052b2 <__ieee754_powf+0x54a>
 8004dea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004dee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8004df2:	e00d      	b.n	8004e10 <__ieee754_powf+0xa8>
 8004df4:	2600      	movs	r6, #0
 8004df6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8004dfa:	d1f0      	bne.n	8004dde <__ieee754_powf+0x76>
 8004dfc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004e00:	f000 8251 	beq.w	80052a6 <__ieee754_powf+0x53e>
 8004e04:	dd0a      	ble.n	8004e1c <__ieee754_powf+0xb4>
 8004e06:	2d00      	cmp	r5, #0
 8004e08:	f280 8250 	bge.w	80052ac <__ieee754_powf+0x544>
 8004e0c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800510c <__ieee754_powf+0x3a4>
 8004e10:	ecbd 8b02 	vpop	{d8}
 8004e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e18:	2602      	movs	r6, #2
 8004e1a:	e7ec      	b.n	8004df6 <__ieee754_powf+0x8e>
 8004e1c:	2d00      	cmp	r5, #0
 8004e1e:	daf5      	bge.n	8004e0c <__ieee754_powf+0xa4>
 8004e20:	eeb1 0a68 	vneg.f32	s0, s17
 8004e24:	e7f4      	b.n	8004e10 <__ieee754_powf+0xa8>
 8004e26:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8004e2a:	d102      	bne.n	8004e32 <__ieee754_powf+0xca>
 8004e2c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8004e30:	e7ee      	b.n	8004e10 <__ieee754_powf+0xa8>
 8004e32:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8004e36:	eeb0 0a48 	vmov.f32	s0, s16
 8004e3a:	d108      	bne.n	8004e4e <__ieee754_powf+0xe6>
 8004e3c:	f1b8 0f00 	cmp.w	r8, #0
 8004e40:	db05      	blt.n	8004e4e <__ieee754_powf+0xe6>
 8004e42:	ecbd 8b02 	vpop	{d8}
 8004e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4a:	f000 ba4d 	b.w	80052e8 <__ieee754_sqrtf>
 8004e4e:	f000 fa4e 	bl	80052ee <fabsf>
 8004e52:	b124      	cbz	r4, 8004e5e <__ieee754_powf+0xf6>
 8004e54:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8004e58:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8004e5c:	d117      	bne.n	8004e8e <__ieee754_powf+0x126>
 8004e5e:	2d00      	cmp	r5, #0
 8004e60:	bfbc      	itt	lt
 8004e62:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8004e66:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8004e6a:	f1b8 0f00 	cmp.w	r8, #0
 8004e6e:	dacf      	bge.n	8004e10 <__ieee754_powf+0xa8>
 8004e70:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8004e74:	ea54 0306 	orrs.w	r3, r4, r6
 8004e78:	d104      	bne.n	8004e84 <__ieee754_powf+0x11c>
 8004e7a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004e7e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004e82:	e7c5      	b.n	8004e10 <__ieee754_powf+0xa8>
 8004e84:	2e01      	cmp	r6, #1
 8004e86:	d1c3      	bne.n	8004e10 <__ieee754_powf+0xa8>
 8004e88:	eeb1 0a40 	vneg.f32	s0, s0
 8004e8c:	e7c0      	b.n	8004e10 <__ieee754_powf+0xa8>
 8004e8e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8004e92:	3801      	subs	r0, #1
 8004e94:	ea56 0300 	orrs.w	r3, r6, r0
 8004e98:	d104      	bne.n	8004ea4 <__ieee754_powf+0x13c>
 8004e9a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8004e9e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004ea2:	e7b5      	b.n	8004e10 <__ieee754_powf+0xa8>
 8004ea4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8004ea8:	dd6b      	ble.n	8004f82 <__ieee754_powf+0x21a>
 8004eaa:	4b99      	ldr	r3, [pc, #612]	; (8005110 <__ieee754_powf+0x3a8>)
 8004eac:	429c      	cmp	r4, r3
 8004eae:	dc06      	bgt.n	8004ebe <__ieee754_powf+0x156>
 8004eb0:	2d00      	cmp	r5, #0
 8004eb2:	daab      	bge.n	8004e0c <__ieee754_powf+0xa4>
 8004eb4:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8005114 <__ieee754_powf+0x3ac>
 8004eb8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004ebc:	e7a8      	b.n	8004e10 <__ieee754_powf+0xa8>
 8004ebe:	4b96      	ldr	r3, [pc, #600]	; (8005118 <__ieee754_powf+0x3b0>)
 8004ec0:	429c      	cmp	r4, r3
 8004ec2:	dd02      	ble.n	8004eca <__ieee754_powf+0x162>
 8004ec4:	2d00      	cmp	r5, #0
 8004ec6:	dcf5      	bgt.n	8004eb4 <__ieee754_powf+0x14c>
 8004ec8:	e7a0      	b.n	8004e0c <__ieee754_powf+0xa4>
 8004eca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004ece:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004ed2:	eddf 6a92 	vldr	s13, [pc, #584]	; 800511c <__ieee754_powf+0x3b4>
 8004ed6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8004eda:	eee0 6a67 	vfms.f32	s13, s0, s15
 8004ede:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004ee2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8004ee6:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eee:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005120 <__ieee754_powf+0x3b8>
 8004ef2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8004ef6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005124 <__ieee754_powf+0x3bc>
 8004efa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004efe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005128 <__ieee754_powf+0x3c0>
 8004f02:	eef0 6a67 	vmov.f32	s13, s15
 8004f06:	eee0 6a07 	vfma.f32	s13, s0, s14
 8004f0a:	ee16 3a90 	vmov	r3, s13
 8004f0e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004f12:	f023 030f 	bic.w	r3, r3, #15
 8004f16:	ee00 3a90 	vmov	s1, r3
 8004f1a:	eee0 0a47 	vfms.f32	s1, s0, s14
 8004f1e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004f22:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8004f26:	f025 050f 	bic.w	r5, r5, #15
 8004f2a:	ee07 5a10 	vmov	s14, r5
 8004f2e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8004f32:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8004f3e:	3e01      	subs	r6, #1
 8004f40:	ea56 0200 	orrs.w	r2, r6, r0
 8004f44:	ee07 5a10 	vmov	s14, r5
 8004f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f4c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004f50:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8004f54:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004f58:	ee17 4a10 	vmov	r4, s14
 8004f5c:	bf08      	it	eq
 8004f5e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8004f62:	2c00      	cmp	r4, #0
 8004f64:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004f68:	f340 8184 	ble.w	8005274 <__ieee754_powf+0x50c>
 8004f6c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8004f70:	f340 80fc 	ble.w	800516c <__ieee754_powf+0x404>
 8004f74:	eddf 7a67 	vldr	s15, [pc, #412]	; 8005114 <__ieee754_powf+0x3ac>
 8004f78:	ee28 0a27 	vmul.f32	s0, s16, s15
 8004f7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004f80:	e746      	b.n	8004e10 <__ieee754_powf+0xa8>
 8004f82:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8004f86:	bf01      	itttt	eq
 8004f88:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800512c <__ieee754_powf+0x3c4>
 8004f8c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8004f90:	f06f 0217 	mvneq.w	r2, #23
 8004f94:	ee17 4a90 	vmoveq	r4, s15
 8004f98:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8004f9c:	bf18      	it	ne
 8004f9e:	2200      	movne	r2, #0
 8004fa0:	3b7f      	subs	r3, #127	; 0x7f
 8004fa2:	4413      	add	r3, r2
 8004fa4:	4a62      	ldr	r2, [pc, #392]	; (8005130 <__ieee754_powf+0x3c8>)
 8004fa6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8004faa:	4294      	cmp	r4, r2
 8004fac:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8004fb0:	dd06      	ble.n	8004fc0 <__ieee754_powf+0x258>
 8004fb2:	4a60      	ldr	r2, [pc, #384]	; (8005134 <__ieee754_powf+0x3cc>)
 8004fb4:	4294      	cmp	r4, r2
 8004fb6:	f340 80a4 	ble.w	8005102 <__ieee754_powf+0x39a>
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8004fc0:	2400      	movs	r4, #0
 8004fc2:	4a5d      	ldr	r2, [pc, #372]	; (8005138 <__ieee754_powf+0x3d0>)
 8004fc4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004fc8:	ee07 1a90 	vmov	s15, r1
 8004fcc:	ed92 7a00 	vldr	s14, [r2]
 8004fd0:	4a5a      	ldr	r2, [pc, #360]	; (800513c <__ieee754_powf+0x3d4>)
 8004fd2:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004fd6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004fda:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8004fde:	1049      	asrs	r1, r1, #1
 8004fe0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004fe4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8004fe8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8004fec:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8004ff0:	ee06 1a10 	vmov	s12, r1
 8004ff4:	ee65 4a26 	vmul.f32	s9, s10, s13
 8004ff8:	ee36 7a47 	vsub.f32	s14, s12, s14
 8004ffc:	ee14 7a90 	vmov	r7, s9
 8005000:	4017      	ands	r7, r2
 8005002:	ee05 7a90 	vmov	s11, r7
 8005006:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800500a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800500e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005140 <__ieee754_powf+0x3d8>
 8005012:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8005016:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800501a:	ee25 6a26 	vmul.f32	s12, s10, s13
 800501e:	eddf 6a49 	vldr	s13, [pc, #292]	; 8005144 <__ieee754_powf+0x3dc>
 8005022:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8005026:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005148 <__ieee754_powf+0x3e0>
 800502a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800502e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800511c <__ieee754_powf+0x3b4>
 8005032:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005036:	eddf 6a45 	vldr	s13, [pc, #276]	; 800514c <__ieee754_powf+0x3e4>
 800503a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800503e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8005150 <__ieee754_powf+0x3e8>
 8005042:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005046:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800504a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800504e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005052:	eee5 6a07 	vfma.f32	s13, s10, s14
 8005056:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800505a:	eef0 7a45 	vmov.f32	s15, s10
 800505e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8005062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005066:	ee17 1a90 	vmov	r1, s15
 800506a:	4011      	ands	r1, r2
 800506c:	ee07 1a90 	vmov	s15, r1
 8005070:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8005074:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8005078:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800507c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005080:	eea6 7a27 	vfma.f32	s14, s12, s15
 8005084:	eeb0 6a47 	vmov.f32	s12, s14
 8005088:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800508c:	ee16 1a10 	vmov	r1, s12
 8005090:	4011      	ands	r1, r2
 8005092:	ee06 1a90 	vmov	s13, r1
 8005096:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800509a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005154 <__ieee754_powf+0x3ec>
 800509e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005158 <__ieee754_powf+0x3f0>
 80050a2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80050a6:	ee06 1a10 	vmov	s12, r1
 80050aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050ae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800515c <__ieee754_powf+0x3f4>
 80050b2:	492b      	ldr	r1, [pc, #172]	; (8005160 <__ieee754_powf+0x3f8>)
 80050b4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80050b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80050bc:	edd1 7a00 	vldr	s15, [r1]
 80050c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	4b26      	ldr	r3, [pc, #152]	; (8005164 <__ieee754_powf+0x3fc>)
 80050ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050ce:	eef0 7a47 	vmov.f32	s15, s14
 80050d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80050d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80050da:	edd4 0a00 	vldr	s1, [r4]
 80050de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80050e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e6:	ee17 3a90 	vmov	r3, s15
 80050ea:	4013      	ands	r3, r2
 80050ec:	ee07 3a90 	vmov	s15, r3
 80050f0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80050f4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80050f8:	eee6 6a65 	vfms.f32	s13, s12, s11
 80050fc:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005100:	e70f      	b.n	8004f22 <__ieee754_powf+0x1ba>
 8005102:	2401      	movs	r4, #1
 8005104:	e75d      	b.n	8004fc2 <__ieee754_powf+0x25a>
 8005106:	bf00      	nop
 8005108:	0800572c 	.word	0x0800572c
 800510c:	00000000 	.word	0x00000000
 8005110:	3f7ffff7 	.word	0x3f7ffff7
 8005114:	7149f2ca 	.word	0x7149f2ca
 8005118:	3f800007 	.word	0x3f800007
 800511c:	3eaaaaab 	.word	0x3eaaaaab
 8005120:	3fb8aa3b 	.word	0x3fb8aa3b
 8005124:	36eca570 	.word	0x36eca570
 8005128:	3fb8aa00 	.word	0x3fb8aa00
 800512c:	4b800000 	.word	0x4b800000
 8005130:	001cc471 	.word	0x001cc471
 8005134:	005db3d6 	.word	0x005db3d6
 8005138:	08005730 	.word	0x08005730
 800513c:	fffff000 	.word	0xfffff000
 8005140:	3e6c3255 	.word	0x3e6c3255
 8005144:	3e53f142 	.word	0x3e53f142
 8005148:	3e8ba305 	.word	0x3e8ba305
 800514c:	3edb6db7 	.word	0x3edb6db7
 8005150:	3f19999a 	.word	0x3f19999a
 8005154:	3f76384f 	.word	0x3f76384f
 8005158:	3f763800 	.word	0x3f763800
 800515c:	369dc3a0 	.word	0x369dc3a0
 8005160:	08005740 	.word	0x08005740
 8005164:	08005738 	.word	0x08005738
 8005168:	3338aa3c 	.word	0x3338aa3c
 800516c:	f040 8092 	bne.w	8005294 <__ieee754_powf+0x52c>
 8005170:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8005168 <__ieee754_powf+0x400>
 8005174:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005178:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800517c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005184:	f73f aef6 	bgt.w	8004f74 <__ieee754_powf+0x20c>
 8005188:	15db      	asrs	r3, r3, #23
 800518a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800518e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005192:	4103      	asrs	r3, r0
 8005194:	4423      	add	r3, r4
 8005196:	4949      	ldr	r1, [pc, #292]	; (80052bc <__ieee754_powf+0x554>)
 8005198:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800519c:	3a7f      	subs	r2, #127	; 0x7f
 800519e:	4111      	asrs	r1, r2
 80051a0:	ea23 0101 	bic.w	r1, r3, r1
 80051a4:	ee07 1a10 	vmov	s14, r1
 80051a8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80051ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80051b0:	f1c2 0217 	rsb	r2, r2, #23
 80051b4:	4110      	asrs	r0, r2
 80051b6:	2c00      	cmp	r4, #0
 80051b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051bc:	bfb8      	it	lt
 80051be:	4240      	neglt	r0, r0
 80051c0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80051c4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80052c0 <__ieee754_powf+0x558>
 80051c8:	ee17 3a10 	vmov	r3, s14
 80051cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80051d0:	f023 030f 	bic.w	r3, r3, #15
 80051d4:	ee07 3a10 	vmov	s14, r3
 80051d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051dc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80051e0:	eddf 7a38 	vldr	s15, [pc, #224]	; 80052c4 <__ieee754_powf+0x55c>
 80051e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80051ec:	eddf 6a36 	vldr	s13, [pc, #216]	; 80052c8 <__ieee754_powf+0x560>
 80051f0:	eeb0 0a67 	vmov.f32	s0, s15
 80051f4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80051f8:	eeb0 6a40 	vmov.f32	s12, s0
 80051fc:	eea7 6a66 	vfms.f32	s12, s14, s13
 8005200:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005204:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005208:	eddf 6a30 	vldr	s13, [pc, #192]	; 80052cc <__ieee754_powf+0x564>
 800520c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80052d0 <__ieee754_powf+0x568>
 8005210:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005214:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80052d4 <__ieee754_powf+0x56c>
 8005218:	eee6 6a07 	vfma.f32	s13, s12, s14
 800521c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80052d8 <__ieee754_powf+0x570>
 8005220:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005224:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80052dc <__ieee754_powf+0x574>
 8005228:	eee6 6a07 	vfma.f32	s13, s12, s14
 800522c:	eeb0 6a40 	vmov.f32	s12, s0
 8005230:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005234:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005238:	eeb0 7a46 	vmov.f32	s14, s12
 800523c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005240:	ee20 6a06 	vmul.f32	s12, s0, s12
 8005244:	eee0 7a27 	vfma.f32	s15, s0, s15
 8005248:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800524c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005250:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005254:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005258:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800525c:	ee10 3a10 	vmov	r3, s0
 8005260:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005268:	da1a      	bge.n	80052a0 <__ieee754_powf+0x538>
 800526a:	f000 f8b7 	bl	80053dc <scalbnf>
 800526e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005272:	e5cd      	b.n	8004e10 <__ieee754_powf+0xa8>
 8005274:	4a1a      	ldr	r2, [pc, #104]	; (80052e0 <__ieee754_powf+0x578>)
 8005276:	4293      	cmp	r3, r2
 8005278:	dd02      	ble.n	8005280 <__ieee754_powf+0x518>
 800527a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80052e4 <__ieee754_powf+0x57c>
 800527e:	e67b      	b.n	8004f78 <__ieee754_powf+0x210>
 8005280:	d108      	bne.n	8005294 <__ieee754_powf+0x52c>
 8005282:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005286:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528e:	f6ff af7b 	blt.w	8005188 <__ieee754_powf+0x420>
 8005292:	e7f2      	b.n	800527a <__ieee754_powf+0x512>
 8005294:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8005298:	f73f af76 	bgt.w	8005188 <__ieee754_powf+0x420>
 800529c:	2000      	movs	r0, #0
 800529e:	e78f      	b.n	80051c0 <__ieee754_powf+0x458>
 80052a0:	ee00 3a10 	vmov	s0, r3
 80052a4:	e7e3      	b.n	800526e <__ieee754_powf+0x506>
 80052a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80052aa:	e5b1      	b.n	8004e10 <__ieee754_powf+0xa8>
 80052ac:	eeb0 0a68 	vmov.f32	s0, s17
 80052b0:	e5ae      	b.n	8004e10 <__ieee754_powf+0xa8>
 80052b2:	eeb0 0a48 	vmov.f32	s0, s16
 80052b6:	e5ab      	b.n	8004e10 <__ieee754_powf+0xa8>
 80052b8:	2600      	movs	r6, #0
 80052ba:	e590      	b.n	8004dde <__ieee754_powf+0x76>
 80052bc:	007fffff 	.word	0x007fffff
 80052c0:	3f317218 	.word	0x3f317218
 80052c4:	35bfbe8c 	.word	0x35bfbe8c
 80052c8:	3f317200 	.word	0x3f317200
 80052cc:	3331bb4c 	.word	0x3331bb4c
 80052d0:	b5ddea0e 	.word	0xb5ddea0e
 80052d4:	388ab355 	.word	0x388ab355
 80052d8:	bb360b61 	.word	0xbb360b61
 80052dc:	3e2aaaab 	.word	0x3e2aaaab
 80052e0:	43160000 	.word	0x43160000
 80052e4:	0da24260 	.word	0x0da24260

080052e8 <__ieee754_sqrtf>:
 80052e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80052ec:	4770      	bx	lr

080052ee <fabsf>:
 80052ee:	ee10 3a10 	vmov	r3, s0
 80052f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052f6:	ee00 3a10 	vmov	s0, r3
 80052fa:	4770      	bx	lr

080052fc <finitef>:
 80052fc:	b082      	sub	sp, #8
 80052fe:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005302:	9801      	ldr	r0, [sp, #4]
 8005304:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005308:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800530c:	bfac      	ite	ge
 800530e:	2000      	movge	r0, #0
 8005310:	2001      	movlt	r0, #1
 8005312:	b002      	add	sp, #8
 8005314:	4770      	bx	lr
	...

08005318 <nanf>:
 8005318:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005320 <nanf+0x8>
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	7fc00000 	.word	0x7fc00000

08005324 <rintf>:
 8005324:	ee10 2a10 	vmov	r2, s0
 8005328:	b513      	push	{r0, r1, r4, lr}
 800532a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800532e:	397f      	subs	r1, #127	; 0x7f
 8005330:	2916      	cmp	r1, #22
 8005332:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8005336:	dc47      	bgt.n	80053c8 <rintf+0xa4>
 8005338:	b32b      	cbz	r3, 8005386 <rintf+0x62>
 800533a:	2900      	cmp	r1, #0
 800533c:	ee10 3a10 	vmov	r3, s0
 8005340:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8005344:	da21      	bge.n	800538a <rintf+0x66>
 8005346:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800534a:	425b      	negs	r3, r3
 800534c:	4921      	ldr	r1, [pc, #132]	; (80053d4 <rintf+0xb0>)
 800534e:	0a5b      	lsrs	r3, r3, #9
 8005350:	0d12      	lsrs	r2, r2, #20
 8005352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005356:	0512      	lsls	r2, r2, #20
 8005358:	4313      	orrs	r3, r2
 800535a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	edd1 6a00 	vldr	s13, [r1]
 8005366:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800536a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800536e:	eddd 7a01 	vldr	s15, [sp, #4]
 8005372:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005376:	ee17 3a90 	vmov	r3, s15
 800537a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800537e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8005382:	ee00 3a10 	vmov	s0, r3
 8005386:	b002      	add	sp, #8
 8005388:	bd10      	pop	{r4, pc}
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <rintf+0xb4>)
 800538c:	410a      	asrs	r2, r1
 800538e:	4213      	tst	r3, r2
 8005390:	d0f9      	beq.n	8005386 <rintf+0x62>
 8005392:	0854      	lsrs	r4, r2, #1
 8005394:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8005398:	d006      	beq.n	80053a8 <rintf+0x84>
 800539a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800539e:	ea23 0304 	bic.w	r3, r3, r4
 80053a2:	fa42 f101 	asr.w	r1, r2, r1
 80053a6:	430b      	orrs	r3, r1
 80053a8:	4a0a      	ldr	r2, [pc, #40]	; (80053d4 <rintf+0xb0>)
 80053aa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80053ae:	ed90 7a00 	vldr	s14, [r0]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80053be:	ed9d 0a01 	vldr	s0, [sp, #4]
 80053c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80053c6:	e7de      	b.n	8005386 <rintf+0x62>
 80053c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80053cc:	d3db      	bcc.n	8005386 <rintf+0x62>
 80053ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80053d2:	e7d8      	b.n	8005386 <rintf+0x62>
 80053d4:	08005748 	.word	0x08005748
 80053d8:	007fffff 	.word	0x007fffff

080053dc <scalbnf>:
 80053dc:	ee10 3a10 	vmov	r3, s0
 80053e0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80053e4:	d025      	beq.n	8005432 <scalbnf+0x56>
 80053e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80053ea:	d302      	bcc.n	80053f2 <scalbnf+0x16>
 80053ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80053f0:	4770      	bx	lr
 80053f2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80053f6:	d122      	bne.n	800543e <scalbnf+0x62>
 80053f8:	4b2a      	ldr	r3, [pc, #168]	; (80054a4 <scalbnf+0xc8>)
 80053fa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80054a8 <scalbnf+0xcc>
 80053fe:	4298      	cmp	r0, r3
 8005400:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005404:	db16      	blt.n	8005434 <scalbnf+0x58>
 8005406:	ee10 3a10 	vmov	r3, s0
 800540a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800540e:	3a19      	subs	r2, #25
 8005410:	4402      	add	r2, r0
 8005412:	2afe      	cmp	r2, #254	; 0xfe
 8005414:	dd15      	ble.n	8005442 <scalbnf+0x66>
 8005416:	ee10 3a10 	vmov	r3, s0
 800541a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80054ac <scalbnf+0xd0>
 800541e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80054b0 <scalbnf+0xd4>
 8005422:	2b00      	cmp	r3, #0
 8005424:	eeb0 7a67 	vmov.f32	s14, s15
 8005428:	bfb8      	it	lt
 800542a:	eef0 7a66 	vmovlt.f32	s15, s13
 800542e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005432:	4770      	bx	lr
 8005434:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80054b4 <scalbnf+0xd8>
 8005438:	ee20 0a27 	vmul.f32	s0, s0, s15
 800543c:	4770      	bx	lr
 800543e:	0dd2      	lsrs	r2, r2, #23
 8005440:	e7e6      	b.n	8005410 <scalbnf+0x34>
 8005442:	2a00      	cmp	r2, #0
 8005444:	dd06      	ble.n	8005454 <scalbnf+0x78>
 8005446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800544a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800544e:	ee00 3a10 	vmov	s0, r3
 8005452:	4770      	bx	lr
 8005454:	f112 0f16 	cmn.w	r2, #22
 8005458:	da1a      	bge.n	8005490 <scalbnf+0xb4>
 800545a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800545e:	4298      	cmp	r0, r3
 8005460:	ee10 3a10 	vmov	r3, s0
 8005464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005468:	dd0a      	ble.n	8005480 <scalbnf+0xa4>
 800546a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80054ac <scalbnf+0xd0>
 800546e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80054b0 <scalbnf+0xd4>
 8005472:	eef0 7a40 	vmov.f32	s15, s0
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf18      	it	ne
 800547a:	eeb0 0a47 	vmovne.f32	s0, s14
 800547e:	e7db      	b.n	8005438 <scalbnf+0x5c>
 8005480:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80054b4 <scalbnf+0xd8>
 8005484:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80054b8 <scalbnf+0xdc>
 8005488:	eef0 7a40 	vmov.f32	s15, s0
 800548c:	2b00      	cmp	r3, #0
 800548e:	e7f3      	b.n	8005478 <scalbnf+0x9c>
 8005490:	3219      	adds	r2, #25
 8005492:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005496:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800549a:	eddf 7a08 	vldr	s15, [pc, #32]	; 80054bc <scalbnf+0xe0>
 800549e:	ee07 3a10 	vmov	s14, r3
 80054a2:	e7c4      	b.n	800542e <scalbnf+0x52>
 80054a4:	ffff3cb0 	.word	0xffff3cb0
 80054a8:	4c000000 	.word	0x4c000000
 80054ac:	7149f2ca 	.word	0x7149f2ca
 80054b0:	f149f2ca 	.word	0xf149f2ca
 80054b4:	0da24260 	.word	0x0da24260
 80054b8:	8da24260 	.word	0x8da24260
 80054bc:	33000000 	.word	0x33000000

080054c0 <abort>:
 80054c0:	b508      	push	{r3, lr}
 80054c2:	2006      	movs	r0, #6
 80054c4:	f000 f8d0 	bl	8005668 <raise>
 80054c8:	2001      	movs	r0, #1
 80054ca:	f7fb fa81 	bl	80009d0 <_exit>
	...

080054d0 <__errno>:
 80054d0:	4b01      	ldr	r3, [pc, #4]	; (80054d8 <__errno+0x8>)
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	20000410 	.word	0x20000410

080054dc <__libc_init_array>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4d0d      	ldr	r5, [pc, #52]	; (8005514 <__libc_init_array+0x38>)
 80054e0:	4c0d      	ldr	r4, [pc, #52]	; (8005518 <__libc_init_array+0x3c>)
 80054e2:	1b64      	subs	r4, r4, r5
 80054e4:	10a4      	asrs	r4, r4, #2
 80054e6:	2600      	movs	r6, #0
 80054e8:	42a6      	cmp	r6, r4
 80054ea:	d109      	bne.n	8005500 <__libc_init_array+0x24>
 80054ec:	4d0b      	ldr	r5, [pc, #44]	; (800551c <__libc_init_array+0x40>)
 80054ee:	4c0c      	ldr	r4, [pc, #48]	; (8005520 <__libc_init_array+0x44>)
 80054f0:	f000 f8e4 	bl	80056bc <_init>
 80054f4:	1b64      	subs	r4, r4, r5
 80054f6:	10a4      	asrs	r4, r4, #2
 80054f8:	2600      	movs	r6, #0
 80054fa:	42a6      	cmp	r6, r4
 80054fc:	d105      	bne.n	800550a <__libc_init_array+0x2e>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	f855 3b04 	ldr.w	r3, [r5], #4
 8005504:	4798      	blx	r3
 8005506:	3601      	adds	r6, #1
 8005508:	e7ee      	b.n	80054e8 <__libc_init_array+0xc>
 800550a:	f855 3b04 	ldr.w	r3, [r5], #4
 800550e:	4798      	blx	r3
 8005510:	3601      	adds	r6, #1
 8005512:	e7f2      	b.n	80054fa <__libc_init_array+0x1e>
 8005514:	08005758 	.word	0x08005758
 8005518:	08005758 	.word	0x08005758
 800551c:	08005758 	.word	0x08005758
 8005520:	0800575c 	.word	0x0800575c

08005524 <malloc>:
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <malloc+0xc>)
 8005526:	4601      	mov	r1, r0
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f000 b80b 	b.w	8005544 <_malloc_r>
 800552e:	bf00      	nop
 8005530:	20000410 	.word	0x20000410

08005534 <memset>:
 8005534:	4402      	add	r2, r0
 8005536:	4603      	mov	r3, r0
 8005538:	4293      	cmp	r3, r2
 800553a:	d100      	bne.n	800553e <memset+0xa>
 800553c:	4770      	bx	lr
 800553e:	f803 1b01 	strb.w	r1, [r3], #1
 8005542:	e7f9      	b.n	8005538 <memset+0x4>

08005544 <_malloc_r>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	1ccd      	adds	r5, r1, #3
 8005548:	f025 0503 	bic.w	r5, r5, #3
 800554c:	3508      	adds	r5, #8
 800554e:	2d0c      	cmp	r5, #12
 8005550:	bf38      	it	cc
 8005552:	250c      	movcc	r5, #12
 8005554:	2d00      	cmp	r5, #0
 8005556:	4606      	mov	r6, r0
 8005558:	db01      	blt.n	800555e <_malloc_r+0x1a>
 800555a:	42a9      	cmp	r1, r5
 800555c:	d903      	bls.n	8005566 <_malloc_r+0x22>
 800555e:	230c      	movs	r3, #12
 8005560:	6033      	str	r3, [r6, #0]
 8005562:	2000      	movs	r0, #0
 8005564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005566:	f000 f89b 	bl	80056a0 <__malloc_lock>
 800556a:	4921      	ldr	r1, [pc, #132]	; (80055f0 <_malloc_r+0xac>)
 800556c:	680a      	ldr	r2, [r1, #0]
 800556e:	4614      	mov	r4, r2
 8005570:	b99c      	cbnz	r4, 800559a <_malloc_r+0x56>
 8005572:	4f20      	ldr	r7, [pc, #128]	; (80055f4 <_malloc_r+0xb0>)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	b923      	cbnz	r3, 8005582 <_malloc_r+0x3e>
 8005578:	4621      	mov	r1, r4
 800557a:	4630      	mov	r0, r6
 800557c:	f000 f83c 	bl	80055f8 <_sbrk_r>
 8005580:	6038      	str	r0, [r7, #0]
 8005582:	4629      	mov	r1, r5
 8005584:	4630      	mov	r0, r6
 8005586:	f000 f837 	bl	80055f8 <_sbrk_r>
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	d123      	bne.n	80055d6 <_malloc_r+0x92>
 800558e:	230c      	movs	r3, #12
 8005590:	6033      	str	r3, [r6, #0]
 8005592:	4630      	mov	r0, r6
 8005594:	f000 f88a 	bl	80056ac <__malloc_unlock>
 8005598:	e7e3      	b.n	8005562 <_malloc_r+0x1e>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	1b5b      	subs	r3, r3, r5
 800559e:	d417      	bmi.n	80055d0 <_malloc_r+0x8c>
 80055a0:	2b0b      	cmp	r3, #11
 80055a2:	d903      	bls.n	80055ac <_malloc_r+0x68>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	441c      	add	r4, r3
 80055a8:	6025      	str	r5, [r4, #0]
 80055aa:	e004      	b.n	80055b6 <_malloc_r+0x72>
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	42a2      	cmp	r2, r4
 80055b0:	bf0c      	ite	eq
 80055b2:	600b      	streq	r3, [r1, #0]
 80055b4:	6053      	strne	r3, [r2, #4]
 80055b6:	4630      	mov	r0, r6
 80055b8:	f000 f878 	bl	80056ac <__malloc_unlock>
 80055bc:	f104 000b 	add.w	r0, r4, #11
 80055c0:	1d23      	adds	r3, r4, #4
 80055c2:	f020 0007 	bic.w	r0, r0, #7
 80055c6:	1ac2      	subs	r2, r0, r3
 80055c8:	d0cc      	beq.n	8005564 <_malloc_r+0x20>
 80055ca:	1a1b      	subs	r3, r3, r0
 80055cc:	50a3      	str	r3, [r4, r2]
 80055ce:	e7c9      	b.n	8005564 <_malloc_r+0x20>
 80055d0:	4622      	mov	r2, r4
 80055d2:	6864      	ldr	r4, [r4, #4]
 80055d4:	e7cc      	b.n	8005570 <_malloc_r+0x2c>
 80055d6:	1cc4      	adds	r4, r0, #3
 80055d8:	f024 0403 	bic.w	r4, r4, #3
 80055dc:	42a0      	cmp	r0, r4
 80055de:	d0e3      	beq.n	80055a8 <_malloc_r+0x64>
 80055e0:	1a21      	subs	r1, r4, r0
 80055e2:	4630      	mov	r0, r6
 80055e4:	f000 f808 	bl	80055f8 <_sbrk_r>
 80055e8:	3001      	adds	r0, #1
 80055ea:	d1dd      	bne.n	80055a8 <_malloc_r+0x64>
 80055ec:	e7cf      	b.n	800558e <_malloc_r+0x4a>
 80055ee:	bf00      	nop
 80055f0:	200004b0 	.word	0x200004b0
 80055f4:	200004b4 	.word	0x200004b4

080055f8 <_sbrk_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d06      	ldr	r5, [pc, #24]	; (8005614 <_sbrk_r+0x1c>)
 80055fc:	2300      	movs	r3, #0
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	f7fb f9ea 	bl	80009dc <_sbrk>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_sbrk_r+0x1a>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_sbrk_r+0x1a>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	200006c4 	.word	0x200006c4

08005618 <_raise_r>:
 8005618:	291f      	cmp	r1, #31
 800561a:	b538      	push	{r3, r4, r5, lr}
 800561c:	4604      	mov	r4, r0
 800561e:	460d      	mov	r5, r1
 8005620:	d904      	bls.n	800562c <_raise_r+0x14>
 8005622:	2316      	movs	r3, #22
 8005624:	6003      	str	r3, [r0, #0]
 8005626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800562e:	b112      	cbz	r2, 8005636 <_raise_r+0x1e>
 8005630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005634:	b94b      	cbnz	r3, 800564a <_raise_r+0x32>
 8005636:	4620      	mov	r0, r4
 8005638:	f000 f830 	bl	800569c <_getpid_r>
 800563c:	462a      	mov	r2, r5
 800563e:	4601      	mov	r1, r0
 8005640:	4620      	mov	r0, r4
 8005642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005646:	f000 b817 	b.w	8005678 <_kill_r>
 800564a:	2b01      	cmp	r3, #1
 800564c:	d00a      	beq.n	8005664 <_raise_r+0x4c>
 800564e:	1c59      	adds	r1, r3, #1
 8005650:	d103      	bne.n	800565a <_raise_r+0x42>
 8005652:	2316      	movs	r3, #22
 8005654:	6003      	str	r3, [r0, #0]
 8005656:	2001      	movs	r0, #1
 8005658:	e7e7      	b.n	800562a <_raise_r+0x12>
 800565a:	2400      	movs	r4, #0
 800565c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005660:	4628      	mov	r0, r5
 8005662:	4798      	blx	r3
 8005664:	2000      	movs	r0, #0
 8005666:	e7e0      	b.n	800562a <_raise_r+0x12>

08005668 <raise>:
 8005668:	4b02      	ldr	r3, [pc, #8]	; (8005674 <raise+0xc>)
 800566a:	4601      	mov	r1, r0
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	f7ff bfd3 	b.w	8005618 <_raise_r>
 8005672:	bf00      	nop
 8005674:	20000410 	.word	0x20000410

08005678 <_kill_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d07      	ldr	r5, [pc, #28]	; (8005698 <_kill_r+0x20>)
 800567c:	2300      	movs	r3, #0
 800567e:	4604      	mov	r4, r0
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	602b      	str	r3, [r5, #0]
 8005686:	f7fb f99b 	bl	80009c0 <_kill>
 800568a:	1c43      	adds	r3, r0, #1
 800568c:	d102      	bne.n	8005694 <_kill_r+0x1c>
 800568e:	682b      	ldr	r3, [r5, #0]
 8005690:	b103      	cbz	r3, 8005694 <_kill_r+0x1c>
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	bd38      	pop	{r3, r4, r5, pc}
 8005696:	bf00      	nop
 8005698:	200006c4 	.word	0x200006c4

0800569c <_getpid_r>:
 800569c:	f7fb b98e 	b.w	80009bc <_getpid>

080056a0 <__malloc_lock>:
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <__malloc_lock+0x8>)
 80056a2:	f000 b809 	b.w	80056b8 <__retarget_lock_acquire_recursive>
 80056a6:	bf00      	nop
 80056a8:	200006cc 	.word	0x200006cc

080056ac <__malloc_unlock>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__malloc_unlock+0x8>)
 80056ae:	f000 b804 	b.w	80056ba <__retarget_lock_release_recursive>
 80056b2:	bf00      	nop
 80056b4:	200006cc 	.word	0x200006cc

080056b8 <__retarget_lock_acquire_recursive>:
 80056b8:	4770      	bx	lr

080056ba <__retarget_lock_release_recursive>:
 80056ba:	4770      	bx	lr

080056bc <_init>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr

080056c8 <_fini>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	bf00      	nop
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr
