
STM-FWT-Sampler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf0  08002cf0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cf8  08002cf8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000070  08002d70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08002d70  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011715  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ea  00000000  00000000  000317b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  000341a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  00034a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005383  00000000  00000000  00035320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012599  00000000  00000000  0003a6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7a00  00000000  00000000  0004cc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011463c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001844  00000000  00000000  00114690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00008a89  00000000  00000000  00115ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002cb8 	.word	0x08002cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08002cb8 	.word	0x08002cb8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b510      	push	{r4, lr}
 80004c2:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c4:	2400      	movs	r4, #0
 80004c6:	9401      	str	r4, [sp, #4]
 80004c8:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <MX_DMA_Init+0x40>)
 80004ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004cc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80004d0:	631a      	str	r2, [r3, #48]	; 0x30
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80004dc:	4622      	mov	r2, r4
 80004de:	4621      	mov	r1, r4
 80004e0:	200e      	movs	r0, #14
 80004e2:	f000 fbed 	bl	8000cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80004e6:	200e      	movs	r0, #14
 80004e8:	f000 fc1e 	bl	8000d28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80004ec:	4622      	mov	r2, r4
 80004ee:	4621      	mov	r1, r4
 80004f0:	2011      	movs	r0, #17
 80004f2:	f000 fbe5 	bl	8000cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80004f6:	2011      	movs	r0, #17
 80004f8:	f000 fc16 	bl	8000d28 <HAL_NVIC_EnableIRQ>

}
 80004fc:	b002      	add	sp, #8
 80004fe:	bd10      	pop	{r4, pc}
 8000500:	40023800 	.word	0x40023800

08000504 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000508:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	2400      	movs	r4, #0
 800050c:	9407      	str	r4, [sp, #28]
 800050e:	9408      	str	r4, [sp, #32]
 8000510:	9409      	str	r4, [sp, #36]	; 0x24
 8000512:	940a      	str	r4, [sp, #40]	; 0x28
 8000514:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000516:	9401      	str	r4, [sp, #4]
 8000518:	4b6c      	ldr	r3, [pc, #432]	; (80006cc <MX_GPIO_Init+0x1c8>)
 800051a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051c:	f042 0210 	orr.w	r2, r2, #16
 8000520:	631a      	str	r2, [r3, #48]	; 0x30
 8000522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000524:	f002 0210 	and.w	r2, r2, #16
 8000528:	9201      	str	r2, [sp, #4]
 800052a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052c:	9402      	str	r4, [sp, #8]
 800052e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000530:	f042 0204 	orr.w	r2, r2, #4
 8000534:	631a      	str	r2, [r3, #48]	; 0x30
 8000536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000538:	f002 0204 	and.w	r2, r2, #4
 800053c:	9202      	str	r2, [sp, #8]
 800053e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000540:	9403      	str	r4, [sp, #12]
 8000542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000544:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000548:	631a      	str	r2, [r3, #48]	; 0x30
 800054a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800054c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000550:	9203      	str	r2, [sp, #12]
 8000552:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	9404      	str	r4, [sp, #16]
 8000556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000558:	f042 0201 	orr.w	r2, r2, #1
 800055c:	631a      	str	r2, [r3, #48]	; 0x30
 800055e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000560:	f002 0201 	and.w	r2, r2, #1
 8000564:	9204      	str	r2, [sp, #16]
 8000566:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000568:	9405      	str	r4, [sp, #20]
 800056a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800056c:	f042 0202 	orr.w	r2, r2, #2
 8000570:	631a      	str	r2, [r3, #48]	; 0x30
 8000572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000574:	f002 0202 	and.w	r2, r2, #2
 8000578:	9205      	str	r2, [sp, #20]
 800057a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057c:	9406      	str	r4, [sp, #24]
 800057e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000580:	f042 0208 	orr.w	r2, r2, #8
 8000584:	631a      	str	r2, [r3, #48]	; 0x30
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	f003 0308 	and.w	r3, r3, #8
 800058c:	9306      	str	r3, [sp, #24]
 800058e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000590:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80006d8 <MX_GPIO_Init+0x1d4>
 8000594:	4622      	mov	r2, r4
 8000596:	2108      	movs	r1, #8
 8000598:	4640      	mov	r0, r8
 800059a:	f000 ff39 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800059e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80006dc <MX_GPIO_Init+0x1d8>
 80005a2:	2201      	movs	r2, #1
 80005a4:	4611      	mov	r1, r2
 80005a6:	4650      	mov	r0, sl
 80005a8:	f000 ff32 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005ac:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80006e0 <MX_GPIO_Init+0x1dc>
 80005b0:	4622      	mov	r2, r4
 80005b2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b6:	4648      	mov	r0, r9
 80005b8:	f000 ff2a 	bl	8001410 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005bc:	2308      	movs	r3, #8
 80005be:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2701      	movs	r7, #1
 80005c2:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005c8:	a907      	add	r1, sp, #28
 80005ca:	4640      	mov	r0, r8
 80005cc:	f000 fe36 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005d0:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d8:	a907      	add	r1, sp, #28
 80005da:	4650      	mov	r0, sl
 80005dc:	f000 fe2e 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e0:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005e2:	f44f 1b90 	mov.w	fp, #1179648	; 0x120000
 80005e6:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ec:	4e38      	ldr	r6, [pc, #224]	; (80006d0 <MX_GPIO_Init+0x1cc>)
 80005ee:	a907      	add	r1, sp, #28
 80005f0:	4630      	mov	r0, r6
 80005f2:	f000 fe23 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80005f6:	2310      	movs	r3, #16
 80005f8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2502      	movs	r5, #2
 80005fc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000602:	2306      	movs	r3, #6
 8000604:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000606:	a907      	add	r1, sp, #28
 8000608:	4630      	mov	r0, r6
 800060a:	f000 fe17 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800060e:	23e0      	movs	r3, #224	; 0xe0
 8000610:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000618:	2305      	movs	r3, #5
 800061a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	a907      	add	r1, sp, #28
 800061e:	4630      	mov	r0, r6
 8000620:	f000 fe0c 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000624:	2304      	movs	r3, #4
 8000626:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800062c:	a907      	add	r1, sp, #28
 800062e:	4829      	ldr	r0, [pc, #164]	; (80006d4 <MX_GPIO_Init+0x1d0>)
 8000630:	f000 fe04 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000634:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000638:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000640:	a907      	add	r1, sp, #28
 8000642:	4648      	mov	r0, r9
 8000644:	f000 fdfa 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000648:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800064c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000654:	2306      	movs	r3, #6
 8000656:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000658:	a907      	add	r1, sp, #28
 800065a:	4650      	mov	r0, sl
 800065c:	f000 fdee 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000664:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000666:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800066a:	a907      	add	r1, sp, #28
 800066c:	4630      	mov	r0, r6
 800066e:	f000 fde5 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000672:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000676:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800067e:	230a      	movs	r3, #10
 8000680:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	a907      	add	r1, sp, #28
 8000684:	4630      	mov	r0, r6
 8000686:	f000 fdd9 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800068a:	2320      	movs	r3, #32
 800068c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000692:	a907      	add	r1, sp, #28
 8000694:	4648      	mov	r0, r9
 8000696:	f000 fdd1 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800069a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800069e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a0:	2312      	movs	r3, #18
 80006a2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a8:	2304      	movs	r3, #4
 80006aa:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	a907      	add	r1, sp, #28
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <MX_GPIO_Init+0x1d0>)
 80006b0:	f000 fdc4 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006b4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b6:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006bc:	a907      	add	r1, sp, #28
 80006be:	4640      	mov	r0, r8
 80006c0:	f000 fdbc 	bl	800123c <HAL_GPIO_Init>

}
 80006c4:	b00d      	add	sp, #52	; 0x34
 80006c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40020400 	.word	0x40020400
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80006e4:	b508      	push	{r3, lr}
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_I2S2_Init+0x34>)
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2S2_Init+0x38>)
 80006ea:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80006ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f0:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80006f2:	2310      	movs	r3, #16
 80006f4:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006fa:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80006fc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000700:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8000702:	2208      	movs	r2, #8
 8000704:	6182      	str	r2, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000706:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000708:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800070a:	f000 fe91 	bl	8001430 <HAL_I2S_Init>
 800070e:	b900      	cbnz	r0, 8000712 <MX_I2S2_Init+0x2e>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000710:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000712:	f000 f88d 	bl	8000830 <Error_Handler>
}
 8000716:	e7fb      	b.n	8000710 <MX_I2S2_Init+0x2c>
 8000718:	200000fc 	.word	0x200000fc
 800071c:	40003800 	.word	0x40003800

08000720 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000722:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	2300      	movs	r3, #0
 8000726:	9307      	str	r3, [sp, #28]
 8000728:	9308      	str	r3, [sp, #32]
 800072a:	9309      	str	r3, [sp, #36]	; 0x24
 800072c:	930a      	str	r3, [sp, #40]	; 0x28
 800072e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000730:	9306      	str	r3, [sp, #24]
  if(i2sHandle->Instance==SPI2)
 8000732:	6802      	ldr	r2, [r0, #0]
 8000734:	4b38      	ldr	r3, [pc, #224]	; (8000818 <HAL_I2S_MspInit+0xf8>)
 8000736:	429a      	cmp	r2, r3
 8000738:	d001      	beq.n	800073e <HAL_I2S_MspInit+0x1e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800073a:	b00d      	add	sp, #52	; 0x34
 800073c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073e:	4604      	mov	r4, r0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000740:	2301      	movs	r3, #1
 8000742:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000744:	23c0      	movs	r3, #192	; 0xc0
 8000746:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074c:	a803      	add	r0, sp, #12
 800074e:	f001 fd4b 	bl	80021e8 <HAL_RCCEx_PeriphCLKConfig>
 8000752:	2800      	cmp	r0, #0
 8000754:	d15a      	bne.n	800080c <HAL_I2S_MspInit+0xec>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000756:	2500      	movs	r5, #0
 8000758:	9500      	str	r5, [sp, #0]
 800075a:	4b30      	ldr	r3, [pc, #192]	; (800081c <HAL_I2S_MspInit+0xfc>)
 800075c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800075e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000762:	641a      	str	r2, [r3, #64]	; 0x40
 8000764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000766:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800076a:	9200      	str	r2, [sp, #0]
 800076c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	9501      	str	r5, [sp, #4]
 8000770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000772:	f042 0204 	orr.w	r2, r2, #4
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
 8000778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800077a:	f002 0204 	and.w	r2, r2, #4
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	9502      	str	r5, [sp, #8]
 8000784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000786:	f042 0202 	orr.w	r2, r2, #2
 800078a:	631a      	str	r2, [r3, #48]	; 0x30
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	9302      	str	r3, [sp, #8]
 8000794:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000796:	2308      	movs	r3, #8
 8000798:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2702      	movs	r7, #2
 800079c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007a2:	2605      	movs	r6, #5
 80007a4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007a6:	a907      	add	r1, sp, #28
 80007a8:	481d      	ldr	r0, [pc, #116]	; (8000820 <HAL_I2S_MspInit+0x100>)
 80007aa:	f000 fd47 	bl	800123c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80007ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ba:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	a907      	add	r1, sp, #28
 80007be:	4819      	ldr	r0, [pc, #100]	; (8000824 <HAL_I2S_MspInit+0x104>)
 80007c0:	f000 fd3c 	bl	800123c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80007c4:	4818      	ldr	r0, [pc, #96]	; (8000828 <HAL_I2S_MspInit+0x108>)
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_I2S_MspInit+0x10c>)
 80007c8:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80007ca:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007cc:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ce:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d4:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007da:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e0:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80007e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e6:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80007e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007ec:	6203      	str	r3, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007ee:	2304      	movs	r3, #4
 80007f0:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007f2:	2303      	movs	r3, #3
 80007f4:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_INC8;
 80007f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007fa:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80007fc:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80007fe:	f000 fb37 	bl	8000e70 <HAL_DMA_Init>
 8000802:	b930      	cbnz	r0, 8000812 <HAL_I2S_MspInit+0xf2>
    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_I2S_MspInit+0x108>)
 8000806:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000808:	639c      	str	r4, [r3, #56]	; 0x38
}
 800080a:	e796      	b.n	800073a <HAL_I2S_MspInit+0x1a>
      Error_Handler();
 800080c:	f000 f810 	bl	8000830 <Error_Handler>
 8000810:	e7a1      	b.n	8000756 <HAL_I2S_MspInit+0x36>
      Error_Handler();
 8000812:	f000 f80d 	bl	8000830 <Error_Handler>
 8000816:	e7f5      	b.n	8000804 <HAL_I2S_MspInit+0xe4>
 8000818:	40003800 	.word	0x40003800
 800081c:	40023800 	.word	0x40023800
 8000820:	40020800 	.word	0x40020800
 8000824:	40020400 	.word	0x40020400
 8000828:	2000009c 	.word	0x2000009c
 800082c:	40026058 	.word	0x40026058

08000830 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000832:	e7fe      	b.n	8000832 <Error_Handler+0x2>

08000834 <SystemClock_Config>:
{
 8000834:	b500      	push	{lr}
 8000836:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000838:	2230      	movs	r2, #48	; 0x30
 800083a:	2100      	movs	r1, #0
 800083c:	a808      	add	r0, sp, #32
 800083e:	f002 f9bb 	bl	8002bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000842:	2300      	movs	r3, #0
 8000844:	9303      	str	r3, [sp, #12]
 8000846:	9304      	str	r3, [sp, #16]
 8000848:	9305      	str	r3, [sp, #20]
 800084a:	9306      	str	r3, [sp, #24]
 800084c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <SystemClock_Config+0xa4>)
 8000852:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000854:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000858:	6411      	str	r1, [r2, #64]	; 0x40
 800085a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800085c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000860:	9201      	str	r2, [sp, #4]
 8000862:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000864:	9302      	str	r3, [sp, #8]
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <SystemClock_Config+0xa8>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	9302      	str	r3, [sp, #8]
 8000878:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087a:	2301      	movs	r3, #1
 800087c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000882:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000888:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800088c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800088e:	2208      	movs	r2, #8
 8000890:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000892:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000896:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800089a:	2307      	movs	r3, #7
 800089c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	a808      	add	r0, sp, #32
 80008a0:	f001 f96a 	bl	8001b78 <HAL_RCC_OscConfig>
 80008a4:	b998      	cbnz	r0, 80008ce <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2302      	movs	r3, #2
 80008ac:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008be:	2105      	movs	r1, #5
 80008c0:	a803      	add	r0, sp, #12
 80008c2:	f001 fbbb 	bl	800203c <HAL_RCC_ClockConfig>
 80008c6:	b920      	cbnz	r0, 80008d2 <SystemClock_Config+0x9e>
}
 80008c8:	b015      	add	sp, #84	; 0x54
 80008ca:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008ce:	f7ff ffaf 	bl	8000830 <Error_Handler>
    Error_Handler();
 80008d2:	f7ff ffad 	bl	8000830 <Error_Handler>
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b500      	push	{lr}
 80008e2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e4:	2100      	movs	r1, #0
 80008e6:	9100      	str	r1, [sp, #0]
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x3c>)
 80008ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008f0:	645a      	str	r2, [r3, #68]	; 0x44
 80008f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008f4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	9101      	str	r1, [sp, #4]
 80008fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000900:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000904:	641a      	str	r2, [r3, #64]	; 0x40
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000910:	2007      	movs	r0, #7
 8000912:	f000 f9c3 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	b003      	add	sp, #12
 8000918:	f85d fb04 	ldr.w	pc, [sp], #4
 800091c:	40023800 	.word	0x40023800

08000920 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler>

08000922 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler>

08000924 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler>

08000926 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler>

08000928 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler>

0800092a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	4770      	bx	lr

0800092e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000932:	f000 f9a1 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000936:	bd08      	pop	{r3, pc}

08000938 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800093a:	4802      	ldr	r0, [pc, #8]	; (8000944 <DMA1_Stream3_IRQHandler+0xc>)
 800093c:	f000 fb90 	bl	8001060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000940:	bd08      	pop	{r3, pc}
 8000942:	bf00      	nop
 8000944:	2000009c 	.word	0x2000009c

08000948 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000948:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800094a:	4802      	ldr	r0, [pc, #8]	; (8000954 <DMA1_Stream6_IRQHandler+0xc>)
 800094c:	f000 fb88 	bl	8001060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000950:	bd08      	pop	{r3, pc}
 8000952:	bf00      	nop
 8000954:	20000144 	.word	0x20000144

08000958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000958:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800095a:	4802      	ldr	r0, [pc, #8]	; (8000964 <USART2_IRQHandler+0xc>)
 800095c:	f001 ff82 	bl	8002864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000960:	bd08      	pop	{r3, pc}
 8000962:	bf00      	nop
 8000964:	200001a4 	.word	0x200001a4

08000968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000968:	b508      	push	{r3, lr}
 800096a:	4603      	mov	r3, r0
  extern uint8_t _eheap; /* Symbol defined in the linker script */
  const uint8_t *max_heap = (uint8_t*)&_eheap;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <_sbrk+0x34>)
 800096e:	6812      	ldr	r2, [r2, #0]
 8000970:	b142      	cbz	r2, 8000984 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <_sbrk+0x34>)
 8000974:	6810      	ldr	r0, [r2, #0]
 8000976:	4403      	add	r3, r0
 8000978:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <_sbrk+0x38>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d806      	bhi.n	800098c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800097e:	4a07      	ldr	r2, [pc, #28]	; (800099c <_sbrk+0x34>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000982:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <_sbrk+0x34>)
 8000986:	4907      	ldr	r1, [pc, #28]	; (80009a4 <_sbrk+0x3c>)
 8000988:	6011      	str	r1, [r2, #0]
 800098a:	e7f2      	b.n	8000972 <_sbrk+0xa>
    errno = ENOMEM;
 800098c:	f002 f8e2 	bl	8002b54 <__errno>
 8000990:	230c      	movs	r3, #12
 8000992:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000998:	e7f3      	b.n	8000982 <_sbrk+0x1a>
 800099a:	bf00      	nop
 800099c:	2000008c 	.word	0x2000008c
 80009a0:	20020000 	.word	0x20020000
 80009a4:	20000200 	.word	0x20000200

080009a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <SystemInit+0x10>)
 80009aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80009ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009bc:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009be:	480a      	ldr	r0, [pc, #40]	; (80009e8 <MX_USART2_UART_Init+0x2c>)
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_USART2_UART_Init+0x30>)
 80009c2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80009c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80009c8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	2300      	movs	r3, #0
 80009cc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ce:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d2:	220c      	movs	r2, #12
 80009d4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009da:	f001 fde5 	bl	80025a8 <HAL_UART_Init>
 80009de:	b900      	cbnz	r0, 80009e2 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009e2:	f7ff ff25 	bl	8000830 <Error_Handler>
}
 80009e6:	e7fb      	b.n	80009e0 <MX_USART2_UART_Init+0x24>
 80009e8:	200001a4 	.word	0x200001a4
 80009ec:	40004400 	.word	0x40004400

080009f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f0:	b530      	push	{r4, r5, lr}
 80009f2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	2300      	movs	r3, #0
 80009f6:	9303      	str	r3, [sp, #12]
 80009f8:	9304      	str	r3, [sp, #16]
 80009fa:	9305      	str	r3, [sp, #20]
 80009fc:	9306      	str	r3, [sp, #24]
 80009fe:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8000a00:	6802      	ldr	r2, [r0, #0]
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <HAL_UART_MspInit+0xac>)
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d001      	beq.n	8000a0c <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a08:	b009      	add	sp, #36	; 0x24
 8000a0a:	bd30      	pop	{r4, r5, pc}
 8000a0c:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	2500      	movs	r5, #0
 8000a10:	9501      	str	r5, [sp, #4]
 8000a12:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a20:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000a24:	9201      	str	r2, [sp, #4]
 8000a26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	9502      	str	r5, [sp, #8]
 8000a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a2c:	f042 0201 	orr.w	r2, r2, #1
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	a903      	add	r1, sp, #12
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <HAL_UART_MspInit+0xb0>)
 8000a52:	f000 fbf3 	bl	800123c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000a56:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <HAL_UART_MspInit+0xb4>)
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_UART_MspInit+0xb8>)
 8000a5a:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a60:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a62:	2340      	movs	r3, #64	; 0x40
 8000a64:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a66:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a6e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a70:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a72:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a74:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a76:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a78:	f000 f9fa 	bl	8000e70 <HAL_DMA_Init>
 8000a7c:	b958      	cbnz	r0, 8000a96 <HAL_UART_MspInit+0xa6>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_UART_MspInit+0xb4>)
 8000a80:	6363      	str	r3, [r4, #52]	; 0x34
 8000a82:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	4611      	mov	r1, r2
 8000a88:	2026      	movs	r0, #38	; 0x26
 8000a8a:	f000 f919 	bl	8000cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a8e:	2026      	movs	r0, #38	; 0x26
 8000a90:	f000 f94a 	bl	8000d28 <HAL_NVIC_EnableIRQ>
}
 8000a94:	e7b8      	b.n	8000a08 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8000a96:	f7ff fecb 	bl	8000830 <Error_Handler>
 8000a9a:	e7f0      	b.n	8000a7e <HAL_UART_MspInit+0x8e>
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	20000144 	.word	0x20000144
 8000aa8:	400260a0 	.word	0x400260a0

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	; (8000aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ff67 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f002 f841 	bl	8002b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f000 f80f 	bl	8000b00 <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ae4:	10010000 	.word	0x10010000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000af0:	08002d00 	.word	0x08002d00
  ldr r2, =_sbss
 8000af4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000af8:	200001fc 	.word	0x200001fc

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <main>:
volatile bool doReq = false;

uint8_t dummy = 0;

int main(void)
{
 8000b00:	b510      	push	{r4, lr}
	/* FPU initialization */
	SCB->CPACR |= ((3 << 10*2) | (3 << 11*2));
 8000b02:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <main+0x70>)
 8000b04:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	const size_t size = 16384;
	uint16_t* buffer = (uint16_t*) malloc(size);
 8000b10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b14:	f002 f848 	bl	8002ba8 <malloc>
 8000b18:	4604      	mov	r4, r0

//	const char* str = "Twoja stara\n";
//	const size_t strLen = strlen(str);

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b1a:	f000 f893 	bl	8000c44 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000b1e:	f7ff fe89 	bl	8000834 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b22:	f7ff fcef 	bl	8000504 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b26:	f7ff fccb 	bl	80004c0 <MX_DMA_Init>
	MX_I2S2_Init();
 8000b2a:	f7ff fddb 	bl	80006e4 <MX_I2S2_Init>
	MX_USART2_UART_Init();
 8000b2e:	f7ff ff45 	bl	80009bc <MX_USART2_UART_Init>

	HAL_I2S_Receive_DMA(&hi2s2, buffer, size);
 8000b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b36:	4621      	mov	r1, r4
 8000b38:	480e      	ldr	r0, [pc, #56]	; (8000b74 <main+0x74>)
 8000b3a:	f000 fd45 	bl	80015c8 <HAL_I2S_Receive_DMA>
	HAL_UART_Receive_IT(&huart2, &dummy, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	490d      	ldr	r1, [pc, #52]	; (8000b78 <main+0x78>)
 8000b42:	480e      	ldr	r0, [pc, #56]	; (8000b7c <main+0x7c>)
 8000b44:	f001 ffe9 	bl	8002b1a <HAL_UART_Receive_IT>

	while (1) if (doSend && doReq)
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <main+0x80>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0fb      	beq.n	8000b48 <main+0x48>
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <main+0x84>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f7      	beq.n	8000b48 <main+0x48>
	{
//		HAL_UART_Transmit(&huart2, str, strLen, 1000);
//		HAL_Delay(10000);

		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) buffer, size*2);
 8000b58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <main+0x7c>)
 8000b60:	f001 fd52 	bl	8002608 <HAL_UART_Transmit_DMA>

		doSend = doReq = false;
 8000b64:	2300      	movs	r3, #0
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <main+0x84>)
 8000b68:	7013      	strb	r3, [r2, #0]
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <main+0x80>)
 8000b6c:	7013      	strb	r3, [r2, #0]
 8000b6e:	e7eb      	b.n	8000b48 <main+0x48>
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	200000fc 	.word	0x200000fc
 8000b78:	20000092 	.word	0x20000092
 8000b7c:	200001a4 	.word	0x200001a4
 8000b80:	20000091 	.word	0x20000091
 8000b84:	20000090 	.word	0x20000090

08000b88 <HAL_I2S_RxHalfCpltCallback>:
}

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{

}
 8000b88:	4770      	bx	lr
	...

08000b8c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b8c:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_I2S_RxCpltCallback+0x1c>)
 8000b94:	f000 fc42 	bl	800141c <HAL_GPIO_TogglePin>

	if (!doSend) doSend = true;
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <HAL_I2S_RxCpltCallback+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b913      	cbnz	r3, 8000ba4 <HAL_I2S_RxCpltCallback+0x18>
 8000b9e:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_I2S_RxCpltCallback+0x20>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
}
 8000ba4:	bd08      	pop	{r3, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40020c00 	.word	0x40020c00
 8000bac:	20000091 	.word	0x20000091

08000bb0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <HAL_UART_RxCpltCallback+0x28>)
 8000bba:	f000 fc2f 	bl	800141c <HAL_GPIO_TogglePin>

	if (!doReq) doReq = true;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <HAL_UART_RxCpltCallback+0x2c>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b913      	cbnz	r3, 8000bca <HAL_UART_RxCpltCallback+0x1a>
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_UART_RxCpltCallback+0x2c>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(huart, &dummy, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4904      	ldr	r1, [pc, #16]	; (8000be0 <HAL_UART_RxCpltCallback+0x30>)
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f001 ffa3 	bl	8002b1a <HAL_UART_Receive_IT>
}
 8000bd4:	bd10      	pop	{r4, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	20000090 	.word	0x20000090
 8000be0:	20000092 	.word	0x20000092

08000be4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be4:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8000be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bea:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <HAL_UART_TxCpltCallback+0x10>)
 8000bec:	f000 fc16 	bl	800141c <HAL_GPIO_TogglePin>
}
 8000bf0:	bd08      	pop	{r3, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40020c00 	.word	0x40020c00

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b510      	push	{r4, lr}
 8000bfa:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_InitTick+0x40>)
 8000bfe:	7818      	ldrb	r0, [r3, #0]
 8000c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c04:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <HAL_InitTick+0x44>)
 8000c0a:	6810      	ldr	r0, [r2, #0]
 8000c0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c10:	f000 f898 	bl	8000d44 <HAL_SYSTICK_Config>
 8000c14:	b968      	cbnz	r0, 8000c32 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	2c0f      	cmp	r4, #15
 8000c18:	d901      	bls.n	8000c1e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	e00a      	b.n	8000c34 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4621      	mov	r1, r4
 8000c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c26:	f000 f84b 	bl	8000cc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_InitTick+0x48>)
 8000c2c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2000      	movs	r0, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000c32:	2001      	movs	r0, #1
}
 8000c34:	bd10      	pop	{r4, pc}
 8000c36:	bf00      	nop
 8000c38:	20000004 	.word	0x20000004
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000008 	.word	0x20000008

08000c44 <HAL_Init>:
{
 8000c44:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x30>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c56:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c5e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f81b 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ffc6 	bl	8000bf8 <HAL_InitTick>
  HAL_MspInit();
 8000c6c:	f7ff fe38 	bl	80008e0 <HAL_MspInit>
}
 8000c70:	2000      	movs	r0, #0
 8000c72:	bd08      	pop	{r3, pc}
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_IncTick+0x10>)
 8000c7a:	6811      	ldr	r1, [r2, #0]
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_IncTick+0x14>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	440b      	add	r3, r1
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200001e8 	.word	0x200001e8
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c90:	4b01      	ldr	r3, [pc, #4]	; (8000c98 <HAL_GetTick+0x8>)
 8000c92:	6818      	ldr	r0, [r3, #0]
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	200001e8 	.word	0x200001e8

08000c9c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c9e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	0200      	lsls	r0, r0, #8
 8000caa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cae:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000cb8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_NVIC_SetPriority+0x60>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cca:	f1c3 0407 	rsb	r4, r3, #7
 8000cce:	2c04      	cmp	r4, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd4:	1d1d      	adds	r5, r3, #4
 8000cd6:	2d06      	cmp	r5, #6
 8000cd8:	d918      	bls.n	8000d0c <HAL_NVIC_SetPriority+0x4c>
 8000cda:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000ce0:	fa05 f404 	lsl.w	r4, r5, r4
 8000ce4:	ea21 0104 	bic.w	r1, r1, r4
 8000ce8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cea:	fa05 f303 	lsl.w	r3, r5, r3
 8000cee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	db0b      	blt.n	8000d10 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	0109      	lsls	r1, r1, #4
 8000cfa:	b2c9      	uxtb	r1, r1
 8000cfc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d00:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d04:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d08:	bc30      	pop	{r4, r5}
 8000d0a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e7e5      	b.n	8000cdc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	f000 000f 	and.w	r0, r0, #15
 8000d14:	0109      	lsls	r1, r1, #4
 8000d16:	b2c9      	uxtb	r1, r1
 8000d18:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <HAL_NVIC_SetPriority+0x64>)
 8000d1a:	5419      	strb	r1, [r3, r0]
 8000d1c:	e7f4      	b.n	8000d08 <HAL_NVIC_SetPriority+0x48>
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	e000ed14 	.word	0xe000ed14

08000d28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	db07      	blt.n	8000d3c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2c:	f000 021f 	and.w	r2, r0, #31
 8000d30:	0940      	lsrs	r0, r0, #5
 8000d32:	2301      	movs	r3, #1
 8000d34:	4093      	lsls	r3, r2
 8000d36:	4a02      	ldr	r2, [pc, #8]	; (8000d40 <HAL_NVIC_EnableIRQ+0x18>)
 8000d38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	3801      	subs	r0, #1
 8000d46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d4a:	d20a      	bcs.n	8000d62 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_SYSTICK_Config+0x24>)
 8000d4e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_SYSTICK_Config+0x28>)
 8000d52:	21f0      	movs	r1, #240	; 0xf0
 8000d54:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	2000      	movs	r0, #0
 8000d5a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d70:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d72:	6805      	ldr	r5, [r0, #0]
 8000d74:	682c      	ldr	r4, [r5, #0]
 8000d76:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000d7a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d7c:	6804      	ldr	r4, [r0, #0]
 8000d7e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d80:	6883      	ldr	r3, [r0, #8]
 8000d82:	2b40      	cmp	r3, #64	; 0x40
 8000d84:	d005      	beq.n	8000d92 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000d86:	6803      	ldr	r3, [r0, #0]
 8000d88:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000d8a:	6803      	ldr	r3, [r0, #0]
 8000d8c:	60da      	str	r2, [r3, #12]
  }
}
 8000d8e:	bc30      	pop	{r4, r5}
 8000d90:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000d92:	6803      	ldr	r3, [r0, #0]
 8000d94:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000d96:	6803      	ldr	r3, [r0, #0]
 8000d98:	60d9      	str	r1, [r3, #12]
 8000d9a:	e7f8      	b.n	8000d8e <DMA_SetConfig+0x1e>

08000d9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d9e:	6803      	ldr	r3, [r0, #0]
 8000da0:	b2d9      	uxtb	r1, r3
 8000da2:	3910      	subs	r1, #16
 8000da4:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <DMA_CalcBaseAndBitshift+0x3c>)
 8000da6:	fba2 4201 	umull	r4, r2, r2, r1
 8000daa:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000dac:	4c0b      	ldr	r4, [pc, #44]	; (8000ddc <DMA_CalcBaseAndBitshift+0x40>)
 8000dae:	5ca2      	ldrb	r2, [r4, r2]
 8000db0:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000db2:	295f      	cmp	r1, #95	; 0x5f
 8000db4:	d909      	bls.n	8000dca <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000db6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000dc2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dc8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000dca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dce:	f023 0303 	bic.w	r3, r3, #3
 8000dd2:	6583      	str	r3, [r0, #88]	; 0x58
 8000dd4:	e7f5      	b.n	8000dc2 <DMA_CalcBaseAndBitshift+0x26>
 8000dd6:	bf00      	nop
 8000dd8:	aaaaaaab 	.word	0xaaaaaaab
 8000ddc:	08002ce8 	.word	0x08002ce8

08000de0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000de0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000de2:	6982      	ldr	r2, [r0, #24]
 8000de4:	b992      	cbnz	r2, 8000e0c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d00a      	beq.n	8000e00 <DMA_CheckFifoParam+0x20>
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d002      	beq.n	8000df4 <DMA_CheckFifoParam+0x14>
 8000dee:	b10b      	cbz	r3, 8000df4 <DMA_CheckFifoParam+0x14>
 8000df0:	2000      	movs	r0, #0
 8000df2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000df4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000df6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000dfa:	d128      	bne.n	8000e4e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e06:	d024      	beq.n	8000e52 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000e08:	2000      	movs	r0, #0
 8000e0a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e0c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e10:	d009      	beq.n	8000e26 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d925      	bls.n	8000e62 <DMA_CheckFifoParam+0x82>
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d125      	bne.n	8000e66 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000e20:	d123      	bne.n	8000e6a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000e22:	2000      	movs	r0, #0
 8000e24:	4770      	bx	lr
    switch (tmp)
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d803      	bhi.n	8000e32 <DMA_CheckFifoParam+0x52>
 8000e2a:	e8df f003 	tbb	[pc, r3]
 8000e2e:	0414      	.short	0x0414
 8000e30:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e32:	2000      	movs	r0, #0
 8000e34:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e38:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000e3c:	d10d      	bne.n	8000e5a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000e3e:	2000      	movs	r0, #0
 8000e40:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e48:	d009      	beq.n	8000e5e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	4770      	bx	lr
        status = HAL_ERROR;
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4770      	bx	lr
        status = HAL_ERROR;
 8000e52:	2001      	movs	r0, #1
 8000e54:	4770      	bx	lr
      status = HAL_ERROR;
 8000e56:	2001      	movs	r0, #1
 8000e58:	4770      	bx	lr
        status = HAL_ERROR;
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	4770      	bx	lr
        status = HAL_ERROR;
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4770      	bx	lr
      status = HAL_ERROR;
 8000e62:	2001      	movs	r0, #1
 8000e64:	4770      	bx	lr
    switch (tmp)
 8000e66:	2000      	movs	r0, #0
 8000e68:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000e6a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000e6c:	4770      	bx	lr
	...

08000e70 <HAL_DMA_Init>:
{
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff ff0c 	bl	8000c90 <HAL_GetTick>
  if(hdma == NULL)
 8000e78:	2c00      	cmp	r4, #0
 8000e7a:	d05b      	beq.n	8000f34 <HAL_DMA_Init+0xc4>
 8000e7c:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8000e84:	2300      	movs	r3, #0
 8000e86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000e8a:	6822      	ldr	r2, [r4, #0]
 8000e8c:	6813      	ldr	r3, [r2, #0]
 8000e8e:	f023 0301 	bic.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	f012 0f01 	tst.w	r2, #1
 8000e9c:	d00a      	beq.n	8000eb4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e9e:	f7ff fef7 	bl	8000c90 <HAL_GetTick>
 8000ea2:	1b43      	subs	r3, r0, r5
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d9f5      	bls.n	8000e94 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eac:	2003      	movs	r0, #3
 8000eae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000eb4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000eb6:	4820      	ldr	r0, [pc, #128]	; (8000f38 <HAL_DMA_Init+0xc8>)
 8000eb8:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eba:	6861      	ldr	r1, [r4, #4]
 8000ebc:	68a2      	ldr	r2, [r4, #8]
 8000ebe:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec0:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec4:	6921      	ldr	r1, [r4, #16]
 8000ec6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec8:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eca:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ecc:	69a1      	ldr	r1, [r4, #24]
 8000ece:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed0:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed4:	6a21      	ldr	r1, [r4, #32]
 8000ed6:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ed8:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eda:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000edc:	2904      	cmp	r1, #4
 8000ede:	d01e      	beq.n	8000f1e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000ee0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000ee2:	6826      	ldr	r6, [r4, #0]
 8000ee4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ee6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eec:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	d107      	bne.n	8000f02 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000ef2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ef4:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ef6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ef8:	b11b      	cbz	r3, 8000f02 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff ff70 	bl	8000de0 <DMA_CheckFifoParam>
 8000f00:	b990      	cbnz	r0, 8000f28 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000f02:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f04:	4620      	mov	r0, r4
 8000f06:	f7ff ff49 	bl	8000d9c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f0a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f0c:	233f      	movs	r3, #63	; 0x3f
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f12:	2000      	movs	r0, #0
 8000f14:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000f1c:	e7c9      	b.n	8000eb2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f20:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000f22:	4301      	orrs	r1, r0
 8000f24:	430a      	orrs	r2, r1
 8000f26:	e7db      	b.n	8000ee0 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f28:	2340      	movs	r3, #64	; 0x40
 8000f2a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000f32:	e7be      	b.n	8000eb2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000f34:	2001      	movs	r0, #1
 8000f36:	e7bc      	b.n	8000eb2 <HAL_DMA_Init+0x42>
 8000f38:	f010803f 	.word	0xf010803f

08000f3c <HAL_DMA_Start_IT>:
{
 8000f3c:	b538      	push	{r3, r4, r5, lr}
 8000f3e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f40:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000f42:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000f46:	2801      	cmp	r0, #1
 8000f48:	d02b      	beq.n	8000fa2 <HAL_DMA_Start_IT+0x66>
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f50:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000f54:	b2c0      	uxtb	r0, r0
 8000f56:	2801      	cmp	r0, #1
 8000f58:	d004      	beq.n	8000f64 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8000f60:	2002      	movs	r0, #2
}
 8000f62:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f64:	2002      	movs	r0, #2
 8000f66:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f7ff fefe 	bl	8000d70 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f74:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f76:	233f      	movs	r3, #63	; 0x3f
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	6813      	ldr	r3, [r2, #0]
 8000f80:	f043 0316 	orr.w	r3, r3, #22
 8000f84:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f88:	b123      	cbz	r3, 8000f94 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f8a:	6822      	ldr	r2, [r4, #0]
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000f94:	6822      	ldr	r2, [r4, #0]
 8000f96:	6813      	ldr	r3, [r2, #0]
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	e7df      	b.n	8000f62 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	e7dd      	b.n	8000f62 <HAL_DMA_Start_IT+0x26>

08000fa6 <HAL_DMA_Abort>:
{
 8000fa6:	b570      	push	{r4, r5, r6, lr}
 8000fa8:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000faa:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff fe70 	bl	8000c90 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d006      	beq.n	8000fc8 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8000fc4:	2001      	movs	r0, #1
}
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
 8000fc8:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fca:	6822      	ldr	r2, [r4, #0]
 8000fcc:	6813      	ldr	r3, [r2, #0]
 8000fce:	f023 0316 	bic.w	r3, r3, #22
 8000fd2:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fd4:	6822      	ldr	r2, [r4, #0]
 8000fd6:	6953      	ldr	r3, [r2, #20]
 8000fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fdc:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fe0:	b1e3      	cbz	r3, 800101c <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	6813      	ldr	r3, [r2, #0]
 8000fe6:	f023 0308 	bic.w	r3, r3, #8
 8000fea:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000fec:	6822      	ldr	r2, [r4, #0]
 8000fee:	6813      	ldr	r3, [r2, #0]
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f013 0f01 	tst.w	r3, #1
 8000ffe:	d011      	beq.n	8001024 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001000:	f7ff fe46 	bl	8000c90 <HAL_GetTick>
 8001004:	1b43      	subs	r3, r0, r5
 8001006:	2b05      	cmp	r3, #5
 8001008:	d9f5      	bls.n	8000ff6 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800100a:	2320      	movs	r3, #32
 800100c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800100e:	2003      	movs	r0, #3
 8001010:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001014:	2300      	movs	r3, #0
 8001016:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800101a:	e7d4      	b.n	8000fc6 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800101c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1df      	bne.n	8000fe2 <HAL_DMA_Abort+0x3c>
 8001022:	e7e3      	b.n	8000fec <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001024:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001026:	233f      	movs	r3, #63	; 0x3f
 8001028:	4093      	lsls	r3, r2
 800102a:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800102c:	2301      	movs	r3, #1
 800102e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001032:	2000      	movs	r0, #0
 8001034:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8001038:	e7c5      	b.n	8000fc6 <HAL_DMA_Abort+0x20>

0800103a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800103a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d003      	beq.n	800104c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001048:	2001      	movs	r0, #1
 800104a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800104c:	2305      	movs	r3, #5
 800104e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001052:	6802      	ldr	r2, [r0, #0]
 8001054:	6813      	ldr	r3, [r2, #0]
 8001056:	f023 0301 	bic.w	r3, r3, #1
 800105a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800105c:	2000      	movs	r0, #0
}
 800105e:	4770      	bx	lr

08001060 <HAL_DMA_IRQHandler>:
{
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001062:	b083      	sub	sp, #12
 8001064:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800106a:	4b72      	ldr	r3, [pc, #456]	; (8001234 <HAL_DMA_IRQHandler+0x1d4>)
 800106c:	681d      	ldr	r5, [r3, #0]
 800106e:	4b72      	ldr	r3, [pc, #456]	; (8001238 <HAL_DMA_IRQHandler+0x1d8>)
 8001070:	fba3 3505 	umull	r3, r5, r3, r5
 8001074:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001076:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001078:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800107a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800107c:	2308      	movs	r3, #8
 800107e:	4093      	lsls	r3, r2
 8001080:	4233      	tst	r3, r6
 8001082:	d010      	beq.n	80010a6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001084:	6803      	ldr	r3, [r0, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	f012 0f04 	tst.w	r2, #4
 800108c:	d00b      	beq.n	80010a6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	f022 0204 	bic.w	r2, r2, #4
 8001094:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001096:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001098:	2308      	movs	r3, #8
 800109a:	4093      	lsls	r3, r2
 800109c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800109e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010a8:	2301      	movs	r3, #1
 80010aa:	4093      	lsls	r3, r2
 80010ac:	4233      	tst	r3, r6
 80010ae:	d009      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010b0:	6822      	ldr	r2, [r4, #0]
 80010b2:	6952      	ldr	r2, [r2, #20]
 80010b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80010b8:	d004      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010ba:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010c6:	2304      	movs	r3, #4
 80010c8:	4093      	lsls	r3, r2
 80010ca:	4233      	tst	r3, r6
 80010cc:	d009      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	f012 0f02 	tst.w	r2, #2
 80010d6:	d004      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010d8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010e4:	2310      	movs	r3, #16
 80010e6:	4093      	lsls	r3, r2
 80010e8:	4233      	tst	r3, r6
 80010ea:	d024      	beq.n	8001136 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010ec:	6822      	ldr	r2, [r4, #0]
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	f012 0f08 	tst.w	r2, #8
 80010f4:	d01f      	beq.n	8001136 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010f6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001100:	d00d      	beq.n	800111e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001108:	d104      	bne.n	8001114 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800110a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800110c:	b19b      	cbz	r3, 8001136 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800110e:	4620      	mov	r0, r4
 8001110:	4798      	blx	r3
 8001112:	e010      	b.n	8001136 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001114:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001116:	b173      	cbz	r3, 8001136 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001118:	4620      	mov	r0, r4
 800111a:	4798      	blx	r3
 800111c:	e00b      	b.n	8001136 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001124:	d103      	bne.n	800112e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	f022 0208 	bic.w	r2, r2, #8
 800112c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800112e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001130:	b10b      	cbz	r3, 8001136 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001132:	4620      	mov	r0, r4
 8001134:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001136:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001138:	2320      	movs	r3, #32
 800113a:	4093      	lsls	r3, r2
 800113c:	4233      	tst	r3, r6
 800113e:	d055      	beq.n	80011ec <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001140:	6822      	ldr	r2, [r4, #0]
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	f012 0f10 	tst.w	r2, #16
 8001148:	d050      	beq.n	80011ec <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800114a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800114c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b05      	cmp	r3, #5
 8001154:	d00e      	beq.n	8001174 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800115e:	d033      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001166:	d12a      	bne.n	80011be <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001168:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800116a:	2b00      	cmp	r3, #0
 800116c:	d03e      	beq.n	80011ec <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800116e:	4620      	mov	r0, r4
 8001170:	4798      	blx	r3
 8001172:	e03b      	b.n	80011ec <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001174:	6822      	ldr	r2, [r4, #0]
 8001176:	6813      	ldr	r3, [r2, #0]
 8001178:	f023 0316 	bic.w	r3, r3, #22
 800117c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800117e:	6822      	ldr	r2, [r4, #0]
 8001180:	6953      	ldr	r3, [r2, #20]
 8001182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001186:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800118a:	b1a3      	cbz	r3, 80011b6 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800118c:	6822      	ldr	r2, [r4, #0]
 800118e:	6813      	ldr	r3, [r2, #0]
 8001190:	f023 0308 	bic.w	r3, r3, #8
 8001194:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001196:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001198:	233f      	movs	r3, #63	; 0x3f
 800119a:	4093      	lsls	r3, r2
 800119c:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800119e:	2301      	movs	r3, #1
 80011a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80011a4:	2300      	movs	r3, #0
 80011a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80011aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d03f      	beq.n	8001230 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80011b0:	4620      	mov	r0, r4
 80011b2:	4798      	blx	r3
        return;
 80011b4:	e03c      	b.n	8001230 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1e7      	bne.n	800118c <HAL_DMA_IRQHandler+0x12c>
 80011bc:	e7eb      	b.n	8001196 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80011be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011c0:	b1a3      	cbz	r3, 80011ec <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80011c2:	4620      	mov	r0, r4
 80011c4:	4798      	blx	r3
 80011c6:	e011      	b.n	80011ec <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	f412 7f80 	tst.w	r2, #256	; 0x100
 80011ce:	d109      	bne.n	80011e4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	f022 0210 	bic.w	r2, r2, #16
 80011d6:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80011d8:	2301      	movs	r3, #1
 80011da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80011de:	2300      	movs	r3, #0
 80011e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80011e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011e6:	b10b      	cbz	r3, 80011ec <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80011e8:	4620      	mov	r0, r4
 80011ea:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011ee:	b1fb      	cbz	r3, 8001230 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011f2:	f013 0f01 	tst.w	r3, #1
 80011f6:	d017      	beq.n	8001228 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80011f8:	2305      	movs	r3, #5
 80011fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80011fe:	6822      	ldr	r2, [r4, #0]
 8001200:	6813      	ldr	r3, [r2, #0]
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001208:	9b01      	ldr	r3, [sp, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	42ab      	cmp	r3, r5
 8001210:	d804      	bhi.n	800121c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f013 0f01 	tst.w	r3, #1
 800121a:	d1f5      	bne.n	8001208 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 800121c:	2301      	movs	r3, #1
 800121e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001222:	2300      	movs	r3, #0
 8001224:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001228:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800122a:	b10b      	cbz	r3, 8001230 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 800122c:	4620      	mov	r0, r4
 800122e:	4798      	blx	r3
}
 8001230:	b003      	add	sp, #12
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001234:	20000000 	.word	0x20000000
 8001238:	1b4e81b5 	.word	0x1b4e81b5

0800123c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123c:	2300      	movs	r3, #0
 800123e:	2b0f      	cmp	r3, #15
 8001240:	f200 80dd 	bhi.w	80013fe <HAL_GPIO_Init+0x1c2>
{
 8001244:	b4f0      	push	{r4, r5, r6, r7}
 8001246:	b082      	sub	sp, #8
 8001248:	e05d      	b.n	8001306 <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124c:	005f      	lsls	r7, r3, #1
 800124e:	2403      	movs	r4, #3
 8001250:	40bc      	lsls	r4, r7
 8001252:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001256:	68cc      	ldr	r4, [r1, #12]
 8001258:	40bc      	lsls	r4, r7
 800125a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800125c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001260:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001264:	684c      	ldr	r4, [r1, #4]
 8001266:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800126a:	409a      	lsls	r2, r3
 800126c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800126e:	6042      	str	r2, [r0, #4]
 8001270:	e057      	b.n	8001322 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001272:	08dc      	lsrs	r4, r3, #3
 8001274:	3408      	adds	r4, #8
 8001276:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127a:	f003 0207 	and.w	r2, r3, #7
 800127e:	0096      	lsls	r6, r2, #2
 8001280:	220f      	movs	r2, #15
 8001282:	40b2      	lsls	r2, r6
 8001284:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001288:	690a      	ldr	r2, [r1, #16]
 800128a:	40b2      	lsls	r2, r6
 800128c:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001292:	e05a      	b.n	800134a <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001294:	2207      	movs	r2, #7
 8001296:	e000      	b.n	800129a <HAL_GPIO_Init+0x5e>
 8001298:	2200      	movs	r2, #0
 800129a:	40b2      	lsls	r2, r6
 800129c:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129e:	3402      	adds	r4, #2
 80012a0:	4e57      	ldr	r6, [pc, #348]	; (8001400 <HAL_GPIO_Init+0x1c4>)
 80012a2:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a6:	4a57      	ldr	r2, [pc, #348]	; (8001404 <HAL_GPIO_Init+0x1c8>)
 80012a8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	43ea      	mvns	r2, r5
 80012ac:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b0:	684f      	ldr	r7, [r1, #4]
 80012b2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80012b6:	d001      	beq.n	80012bc <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 80012b8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80012bc:	4c51      	ldr	r4, [pc, #324]	; (8001404 <HAL_GPIO_Init+0x1c8>)
 80012be:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80012c0:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c6:	684f      	ldr	r7, [r1, #4]
 80012c8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80012cc:	d001      	beq.n	80012d2 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 80012ce:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80012d2:	4c4c      	ldr	r4, [pc, #304]	; (8001404 <HAL_GPIO_Init+0x1c8>)
 80012d4:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012dc:	684f      	ldr	r7, [r1, #4]
 80012de:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80012e2:	d001      	beq.n	80012e8 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80012e4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80012e8:	4c46      	ldr	r4, [pc, #280]	; (8001404 <HAL_GPIO_Init+0x1c8>)
 80012ea:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80012ec:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f0:	684e      	ldr	r6, [r1, #4]
 80012f2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80012f6:	d001      	beq.n	80012fc <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80012f8:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80012fc:	4c41      	ldr	r4, [pc, #260]	; (8001404 <HAL_GPIO_Init+0x1c8>)
 80012fe:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001300:	3301      	adds	r3, #1
 8001302:	2b0f      	cmp	r3, #15
 8001304:	d878      	bhi.n	80013f8 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 8001306:	2201      	movs	r2, #1
 8001308:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	680c      	ldr	r4, [r1, #0]
 800130c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001310:	ea32 0404 	bics.w	r4, r2, r4
 8001314:	d1f4      	bne.n	8001300 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001316:	684c      	ldr	r4, [r1, #4]
 8001318:	f004 0403 	and.w	r4, r4, #3
 800131c:	3c01      	subs	r4, #1
 800131e:	2c01      	cmp	r4, #1
 8001320:	d993      	bls.n	800124a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001322:	684a      	ldr	r2, [r1, #4]
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	2a03      	cmp	r2, #3
 800132a:	d009      	beq.n	8001340 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 800132c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800132e:	005e      	lsls	r6, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	40b2      	lsls	r2, r6
 8001334:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001338:	688a      	ldr	r2, [r1, #8]
 800133a:	40b2      	lsls	r2, r6
 800133c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800133e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001340:	684a      	ldr	r2, [r1, #4]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	2a02      	cmp	r2, #2
 8001348:	d093      	beq.n	8001272 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 800134a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134c:	005e      	lsls	r6, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	40b2      	lsls	r2, r6
 8001352:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001356:	684a      	ldr	r2, [r1, #4]
 8001358:	f002 0203 	and.w	r2, r2, #3
 800135c:	40b2      	lsls	r2, r6
 800135e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001360:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001362:	684a      	ldr	r2, [r1, #4]
 8001364:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001368:	d0ca      	beq.n	8001300 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2200      	movs	r2, #0
 800136c:	9201      	str	r2, [sp, #4]
 800136e:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_GPIO_Init+0x1cc>)
 8001370:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001372:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001376:	6454      	str	r4, [r2, #68]	; 0x44
 8001378:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800137a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800137e:	9201      	str	r2, [sp, #4]
 8001380:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001382:	089c      	lsrs	r4, r3, #2
 8001384:	1ca6      	adds	r6, r4, #2
 8001386:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_GPIO_Init+0x1c4>)
 8001388:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138c:	f003 0203 	and.w	r2, r3, #3
 8001390:	0096      	lsls	r6, r2, #2
 8001392:	220f      	movs	r2, #15
 8001394:	40b2      	lsls	r2, r6
 8001396:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <HAL_GPIO_Init+0x1d0>)
 800139c:	4290      	cmp	r0, r2
 800139e:	f43f af7b 	beq.w	8001298 <HAL_GPIO_Init+0x5c>
 80013a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013a6:	4290      	cmp	r0, r2
 80013a8:	d01a      	beq.n	80013e0 <HAL_GPIO_Init+0x1a4>
 80013aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ae:	4290      	cmp	r0, r2
 80013b0:	d018      	beq.n	80013e4 <HAL_GPIO_Init+0x1a8>
 80013b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013b6:	4290      	cmp	r0, r2
 80013b8:	d016      	beq.n	80013e8 <HAL_GPIO_Init+0x1ac>
 80013ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013be:	4290      	cmp	r0, r2
 80013c0:	d014      	beq.n	80013ec <HAL_GPIO_Init+0x1b0>
 80013c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013c6:	4290      	cmp	r0, r2
 80013c8:	d012      	beq.n	80013f0 <HAL_GPIO_Init+0x1b4>
 80013ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ce:	4290      	cmp	r0, r2
 80013d0:	d010      	beq.n	80013f4 <HAL_GPIO_Init+0x1b8>
 80013d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d6:	4290      	cmp	r0, r2
 80013d8:	f43f af5c 	beq.w	8001294 <HAL_GPIO_Init+0x58>
 80013dc:	2208      	movs	r2, #8
 80013de:	e75c      	b.n	800129a <HAL_GPIO_Init+0x5e>
 80013e0:	2201      	movs	r2, #1
 80013e2:	e75a      	b.n	800129a <HAL_GPIO_Init+0x5e>
 80013e4:	2202      	movs	r2, #2
 80013e6:	e758      	b.n	800129a <HAL_GPIO_Init+0x5e>
 80013e8:	2203      	movs	r2, #3
 80013ea:	e756      	b.n	800129a <HAL_GPIO_Init+0x5e>
 80013ec:	2204      	movs	r2, #4
 80013ee:	e754      	b.n	800129a <HAL_GPIO_Init+0x5e>
 80013f0:	2205      	movs	r2, #5
 80013f2:	e752      	b.n	800129a <HAL_GPIO_Init+0x5e>
 80013f4:	2206      	movs	r2, #6
 80013f6:	e750      	b.n	800129a <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 80013f8:	b002      	add	sp, #8
 80013fa:	bcf0      	pop	{r4, r5, r6, r7}
 80013fc:	4770      	bx	lr
 80013fe:	4770      	bx	lr
 8001400:	40013800 	.word	0x40013800
 8001404:	40013c00 	.word	0x40013c00
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	b10a      	cbz	r2, 8001416 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	6181      	str	r1, [r0, #24]
 8001414:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001416:	0409      	lsls	r1, r1, #16
 8001418:	6181      	str	r1, [r0, #24]
  }
}
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800141c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800141e:	ea01 0203 	and.w	r2, r1, r3
 8001422:	ea21 0103 	bic.w	r1, r1, r3
 8001426:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800142a:	6181      	str	r1, [r0, #24]
}
 800142c:	4770      	bx	lr
	...

08001430 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001430:	2800      	cmp	r0, #0
 8001432:	f000 80bd 	beq.w	80015b0 <HAL_I2S_Init+0x180>
{
 8001436:	b570      	push	{r4, r5, r6, lr}
 8001438:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800143a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800143e:	2b00      	cmp	r3, #0
 8001440:	d051      	beq.n	80014e6 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001442:	2202      	movs	r2, #2
 8001444:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001448:	6821      	ldr	r1, [r4, #0]
 800144a:	69cb      	ldr	r3, [r1, #28]
 800144c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001450:	f023 030f 	bic.w	r3, r3, #15
 8001454:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800145a:	6963      	ldr	r3, [r4, #20]
 800145c:	4293      	cmp	r3, r2
 800145e:	d063      	beq.n	8001528 <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001460:	68e3      	ldr	r3, [r4, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d146      	bne.n	80014f4 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001466:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001468:	68a3      	ldr	r3, [r4, #8]
 800146a:	2b20      	cmp	r3, #32
 800146c:	d800      	bhi.n	8001470 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800146e:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001470:	2001      	movs	r0, #1
 8001472:	f000 ff63 	bl	800233c <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001476:	6923      	ldr	r3, [r4, #16]
 8001478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800147c:	d03c      	beq.n	80014f8 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800147e:	fbb0 f0f5 	udiv	r0, r0, r5
 8001482:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001486:	0043      	lsls	r3, r0, #1
 8001488:	6960      	ldr	r0, [r4, #20]
 800148a:	fbb3 f3f0 	udiv	r3, r3, r0
 800148e:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001490:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <HAL_I2S_Init+0x184>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001496:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800149a:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 800149e:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80014a0:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80014a2:	1e9a      	subs	r2, r3, #2
 80014a4:	2afd      	cmp	r2, #253	; 0xfd
 80014a6:	d841      	bhi.n	800152c <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80014a8:	6922      	ldr	r2, [r4, #16]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	6821      	ldr	r1, [r4, #0]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80014b2:	6821      	ldr	r1, [r4, #0]
 80014b4:	69cb      	ldr	r3, [r1, #28]
 80014b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80014ba:	f023 030f 	bic.w	r3, r3, #15
 80014be:	6862      	ldr	r2, [r4, #4]
 80014c0:	68a0      	ldr	r0, [r4, #8]
 80014c2:	4302      	orrs	r2, r0
 80014c4:	68e0      	ldr	r0, [r4, #12]
 80014c6:	4302      	orrs	r2, r0
 80014c8:	69a0      	ldr	r0, [r4, #24]
 80014ca:	4302      	orrs	r2, r0
 80014cc:	4313      	orrs	r3, r2
 80014ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d2:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80014d4:	6a23      	ldr	r3, [r4, #32]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d02e      	beq.n	8001538 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80014da:	2000      	movs	r0, #0
 80014dc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80014de:	2301      	movs	r3, #1
 80014e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 80014e4:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->Lock = HAL_UNLOCKED;
 80014e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80014ea:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <HAL_I2S_Init+0x188>)
 80014ec:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 80014ee:	f7ff f917 	bl	8000720 <HAL_I2S_MspInit>
 80014f2:	e7a6      	b.n	8001442 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 80014f4:	2520      	movs	r5, #32
 80014f6:	e7b7      	b.n	8001468 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80014f8:	68e3      	ldr	r3, [r4, #12]
 80014fa:	b153      	cbz	r3, 8001512 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80014fc:	00ad      	lsls	r5, r5, #2
 80014fe:	fbb0 f0f5 	udiv	r0, r0, r5
 8001502:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001506:	0043      	lsls	r3, r0, #1
 8001508:	6960      	ldr	r0, [r4, #20]
 800150a:	fbb3 f3f0 	udiv	r3, r3, r0
 800150e:	3305      	adds	r3, #5
 8001510:	e7be      	b.n	8001490 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001512:	00ed      	lsls	r5, r5, #3
 8001514:	fbb0 f0f5 	udiv	r0, r0, r5
 8001518:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800151c:	0043      	lsls	r3, r0, #1
 800151e:	6960      	ldr	r0, [r4, #20]
 8001520:	fbb3 f3f0 	udiv	r3, r3, r0
 8001524:	3305      	adds	r3, #5
 8001526:	e7b3      	b.n	8001490 <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8001528:	2100      	movs	r1, #0
 800152a:	e7ba      	b.n	80014a2 <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800152c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8001534:	2001      	movs	r0, #1
 8001536:	e7d5      	b.n	80014e4 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001538:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_I2S_Init+0x18c>)
 800153a:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_I2S_Init+0x190>)
 8001540:	429a      	cmp	r2, r3
 8001542:	d01f      	beq.n	8001584 <HAL_I2S_Init+0x154>
 8001544:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001548:	69d3      	ldr	r3, [r2, #28]
 800154a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800154e:	f023 030f 	bic.w	r3, r3, #15
 8001552:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001554:	6822      	ldr	r2, [r4, #0]
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_I2S_Init+0x190>)
 8001558:	429a      	cmp	r2, r3
 800155a:	d015      	beq.n	8001588 <HAL_I2S_Init+0x158>
 800155c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001560:	2202      	movs	r2, #2
 8001562:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_I2S_Init+0x190>)
 8001568:	429a      	cmp	r2, r3
 800156a:	d010      	beq.n	800158e <HAL_I2S_Init+0x15e>
 800156c:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8001570:	69eb      	ldr	r3, [r5, #28]
 8001572:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001574:	6862      	ldr	r2, [r4, #4]
 8001576:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800157a:	d00a      	beq.n	8001592 <HAL_I2S_Init+0x162>
 800157c:	b9b2      	cbnz	r2, 80015ac <HAL_I2S_Init+0x17c>
      tmp = I2S_MODE_SLAVE_RX;
 800157e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001582:	e008      	b.n	8001596 <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_I2S_Init+0x194>)
 8001586:	e7df      	b.n	8001548 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001588:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800158c:	e7e8      	b.n	8001560 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800158e:	4d0d      	ldr	r5, [pc, #52]	; (80015c4 <HAL_I2S_Init+0x194>)
 8001590:	e7ee      	b.n	8001570 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8001592:	f44f 7080 	mov.w	r0, #256	; 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 8001596:	8926      	ldrh	r6, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 8001598:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 800159a:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800159c:	4330      	orrs	r0, r6
 800159e:	4301      	orrs	r1, r0
 80015a0:	430a      	orrs	r2, r1
 80015a2:	4313      	orrs	r3, r2
 80015a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80015a8:	61eb      	str	r3, [r5, #28]
 80015aa:	e796      	b.n	80014da <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 80015ac:	2000      	movs	r0, #0
 80015ae:	e7f2      	b.n	8001596 <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 80015b0:	2001      	movs	r0, #1
}
 80015b2:	4770      	bx	lr
 80015b4:	cccccccd 	.word	0xcccccccd
 80015b8:	08001767 	.word	0x08001767
 80015bc:	080019a1 	.word	0x080019a1
 80015c0:	40003800 	.word	0x40003800
 80015c4:	40003400 	.word	0x40003400

080015c8 <HAL_I2S_Receive_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d06d      	beq.n	80016a8 <HAL_I2S_Receive_DMA+0xe0>
{
 80015cc:	b530      	push	{r4, r5, lr}
 80015ce:	b083      	sub	sp, #12
 80015d0:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 80015d2:	2a00      	cmp	r2, #0
 80015d4:	d06a      	beq.n	80016ac <HAL_I2S_Receive_DMA+0xe4>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80015d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d068      	beq.n	80016b2 <HAL_I2S_Receive_DMA+0xea>
 80015e0:	2301      	movs	r3, #1
 80015e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80015e6:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 80015ea:	b2ed      	uxtb	r5, r5
 80015ec:	429d      	cmp	r5, r3
 80015ee:	d110      	bne.n	8001612 <HAL_I2S_Receive_DMA+0x4a>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80015f0:	2304      	movs	r3, #4
 80015f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80015fa:	62e1      	str	r1, [r4, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001604:	2b03      	cmp	r3, #3
 8001606:	d009      	beq.n	800161c <HAL_I2S_Receive_DMA+0x54>
 8001608:	2b05      	cmp	r3, #5
 800160a:	d007      	beq.n	800161c <HAL_I2S_Receive_DMA+0x54>
    hi2s->RxXferSize = (Size << 1U);
    hi2s->RxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->RxXferSize = Size;
 800160c:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800160e:	8662      	strh	r2, [r4, #50]	; 0x32
 8001610:	e008      	b.n	8001624 <HAL_I2S_Receive_DMA+0x5c>
    __HAL_UNLOCK(hi2s);
 8001612:	2300      	movs	r3, #0
 8001614:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 8001618:	2002      	movs	r0, #2
 800161a:	e048      	b.n	80016ae <HAL_I2S_Receive_DMA+0xe6>
    hi2s->RxXferSize = (Size << 1U);
 800161c:	0052      	lsls	r2, r2, #1
 800161e:	b292      	uxth	r2, r2
 8001620:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001622:	8662      	strh	r2, [r4, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001624:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001626:	4a24      	ldr	r2, [pc, #144]	; (80016b8 <HAL_I2S_Receive_DMA+0xf0>)
 8001628:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800162a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <HAL_I2S_Receive_DMA+0xf4>)
 800162e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001630:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001632:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <HAL_I2S_Receive_DMA+0xf8>)
 8001634:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001636:	6821      	ldr	r1, [r4, #0]
 8001638:	69cb      	ldr	r3, [r1, #28]
 800163a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800163e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001642:	d01d      	beq.n	8001680 <HAL_I2S_Receive_DMA+0xb8>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
                                 hi2s->RxXferSize))
 8001644:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001646:	b29b      	uxth	r3, r3
 8001648:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800164a:	310c      	adds	r1, #12
 800164c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800164e:	f7ff fc75 	bl	8000f3c <HAL_DMA_Start_IT>
 8001652:	b9e8      	cbnz	r0, 8001690 <HAL_I2S_Receive_DMA+0xc8>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	69da      	ldr	r2, [r3, #28]
 8001658:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800165c:	d103      	bne.n	8001666 <HAL_I2S_Receive_DMA+0x9e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800165e:	69da      	ldr	r2, [r3, #28]
 8001660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001664:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	f012 0f01 	tst.w	r2, #1
 800166e:	d103      	bne.n	8001678 <HAL_I2S_Receive_DMA+0xb0>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001678:	2300      	movs	r3, #0
 800167a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 800167e:	e016      	b.n	80016ae <HAL_I2S_Receive_DMA+0xe6>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001680:	2300      	movs	r3, #0
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	68cb      	ldr	r3, [r1, #12]
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	688b      	ldr	r3, [r1, #8]
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	9b01      	ldr	r3, [sp, #4]
 800168e:	e7d9      	b.n	8001644 <HAL_I2S_Receive_DMA+0x7c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001690:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001698:	2301      	movs	r3, #1
 800169a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 800169e:	2300      	movs	r3, #0
 80016a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80016a4:	4628      	mov	r0, r5
 80016a6:	e002      	b.n	80016ae <HAL_I2S_Receive_DMA+0xe6>
    return  HAL_ERROR;
 80016a8:	2001      	movs	r0, #1
}
 80016aa:	4770      	bx	lr
    return  HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
}
 80016ae:	b003      	add	sp, #12
 80016b0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hi2s);
 80016b2:	2002      	movs	r0, #2
 80016b4:	e7fb      	b.n	80016ae <HAL_I2S_Receive_DMA+0xe6>
 80016b6:	bf00      	nop
 80016b8:	080016ff 	.word	0x080016ff
 80016bc:	08001741 	.word	0x08001741
 80016c0:	08001837 	.word	0x08001837

080016c4 <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80016c4:	4770      	bx	lr

080016c6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80016c6:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80016c8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80016ca:	6803      	ldr	r3, [r0, #0]
 80016cc:	8812      	ldrh	r2, [r2, #0]
 80016ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80016d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016d2:	3302      	adds	r3, #2
 80016d4:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 80016d6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29b      	uxth	r3, r3
 80016de:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80016e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b103      	cbz	r3, 80016e8 <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80016e6:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016e8:	6802      	ldr	r2, [r0, #0]
 80016ea:	6853      	ldr	r3, [r2, #4]
 80016ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80016f0:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80016f8:	f7ff ffe4 	bl	80016c4 <HAL_I2S_TxCpltCallback>
}
 80016fc:	e7f3      	b.n	80016e6 <I2S_Transmit_IT+0x20>

080016fe <I2S_DMARxHalfCplt>:
{
 80016fe:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001700:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001702:	f7ff fa41 	bl	8000b88 <HAL_I2S_RxHalfCpltCallback>
}
 8001706:	bd08      	pop	{r3, pc}

08001708 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001708:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800170a:	6803      	ldr	r3, [r0, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001710:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001712:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001714:	3302      	adds	r3, #2
 8001716:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001718:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001722:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001724:	b29b      	uxth	r3, r3
 8001726:	b103      	cbz	r3, 800172a <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001728:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800172a:	6802      	ldr	r2, [r0, #0]
 800172c:	6853      	ldr	r3, [r2, #4]
 800172e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001732:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001734:	2301      	movs	r3, #1
 8001736:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 800173a:	f7ff fa27 	bl	8000b8c <HAL_I2S_RxCpltCallback>
}
 800173e:	e7f3      	b.n	8001728 <I2S_Receive_IT+0x20>

08001740 <I2S_DMARxCplt>:
{
 8001740:	b508      	push	{r3, lr}
 8001742:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001744:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	b94b      	cbnz	r3, 800175e <I2S_DMARxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800174a:	6802      	ldr	r2, [r0, #0]
 800174c:	6853      	ldr	r3, [r2, #4]
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6053      	str	r3, [r2, #4]
    hi2s->RxXferCount = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001758:	2301      	movs	r3, #1
 800175a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 800175e:	f7ff fa15 	bl	8000b8c <HAL_I2S_RxCpltCallback>
}
 8001762:	bd08      	pop	{r3, pc}

08001764 <HAL_I2S_ErrorCallback>:
}
 8001764:	4770      	bx	lr

08001766 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001766:	b510      	push	{r4, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800176c:	6802      	ldr	r2, [r0, #0]
 800176e:	6893      	ldr	r3, [r2, #8]
 8001770:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001772:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b04      	cmp	r3, #4
 800177a:	d006      	beq.n	800178a <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800177c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b03      	cmp	r3, #3
 8001784:	d02c      	beq.n	80017e0 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001786:	b004      	add	sp, #16
 8001788:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800178a:	9b03      	ldr	r3, [sp, #12]
 800178c:	f013 0f01 	tst.w	r3, #1
 8001790:	d003      	beq.n	800179a <I2S_IRQHandler+0x34>
 8001792:	6853      	ldr	r3, [r2, #4]
 8001794:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001798:	d11f      	bne.n	80017da <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800179a:	9b03      	ldr	r3, [sp, #12]
 800179c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017a0:	d0ec      	beq.n	800177c <I2S_IRQHandler+0x16>
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	f012 0f20 	tst.w	r2, #32
 80017aa:	d0e7      	beq.n	800177c <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017b2:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80017b4:	2300      	movs	r3, #0
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	9201      	str	r2, [sp, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80017c4:	2301      	movs	r3, #1
 80017c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80017ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff ffc6 	bl	8001764 <HAL_I2S_ErrorCallback>
 80017d8:	e7d0      	b.n	800177c <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 80017da:	f7ff ff95 	bl	8001708 <I2S_Receive_IT>
 80017de:	e7dc      	b.n	800179a <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80017e0:	9b03      	ldr	r3, [sp, #12]
 80017e2:	f013 0f02 	tst.w	r3, #2
 80017e6:	d004      	beq.n	80017f2 <I2S_IRQHandler+0x8c>
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017f0:	d11d      	bne.n	800182e <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80017f2:	9b03      	ldr	r3, [sp, #12]
 80017f4:	f013 0f08 	tst.w	r3, #8
 80017f8:	d0c5      	beq.n	8001786 <I2S_IRQHandler+0x20>
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	f012 0f20 	tst.w	r2, #32
 8001802:	d0c0      	beq.n	8001786 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800180a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800180c:	2300      	movs	r3, #0
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001818:	2301      	movs	r3, #1
 800181a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800181e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001826:	4620      	mov	r0, r4
 8001828:	f7ff ff9c 	bl	8001764 <HAL_I2S_ErrorCallback>
}
 800182c:	e7ab      	b.n	8001786 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 800182e:	4620      	mov	r0, r4
 8001830:	f7ff ff49 	bl	80016c6 <I2S_Transmit_IT>
 8001834:	e7dd      	b.n	80017f2 <I2S_IRQHandler+0x8c>

08001836 <I2S_DMAError>:
{
 8001836:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001838:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800183a:	6802      	ldr	r2, [r0, #0]
 800183c:	6853      	ldr	r3, [r2, #4]
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001848:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 800184a:	2301      	movs	r3, #1
 800184c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001850:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8001858:	f7ff ff84 	bl	8001764 <HAL_I2S_ErrorCallback>
}
 800185c:	bd08      	pop	{r3, pc}

0800185e <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800185e:	4770      	bx	lr

08001860 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001860:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001862:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001864:	1c9a      	adds	r2, r3, #2
 8001866:	6242      	str	r2, [r0, #36]	; 0x24
 8001868:	6802      	ldr	r2, [r0, #0]
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800186e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b29b      	uxth	r3, r3
 8001876:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001878:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800187a:	b29b      	uxth	r3, r3
 800187c:	b93b      	cbnz	r3, 800188e <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800187e:	6802      	ldr	r2, [r0, #0]
 8001880:	6853      	ldr	r3, [r2, #4]
 8001882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001886:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001888:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800188a:	b29b      	uxth	r3, r3
 800188c:	b103      	cbz	r3, 8001890 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800188e:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001890:	2301      	movs	r3, #1
 8001892:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001896:	f7ff ffe2 	bl	800185e <HAL_I2SEx_TxRxCpltCallback>
}
 800189a:	e7f8      	b.n	800188e <I2SEx_TxISR_I2S+0x2e>

0800189c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800189c:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800189e:	6802      	ldr	r2, [r0, #0]
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <I2SEx_RxISR_I2SExt+0x5c>)
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d01c      	beq.n	80018e0 <I2SEx_RxISR_I2SExt+0x44>
 80018a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80018ae:	1c99      	adds	r1, r3, #2
 80018b0:	62c1      	str	r1, [r0, #44]	; 0x2c
 80018b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80018b4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80018be:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b963      	cbnz	r3, 80018de <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018c4:	6802      	ldr	r2, [r0, #0]
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <I2SEx_RxISR_I2SExt+0x5c>)
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d00c      	beq.n	80018e6 <I2SEx_RxISR_I2SExt+0x4a>
 80018cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80018d0:	6853      	ldr	r3, [r2, #4]
 80018d2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80018d6:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80018d8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b12b      	cbz	r3, 80018ea <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80018de:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80018e0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80018e4:	e7e1      	b.n	80018aa <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <I2SEx_RxISR_I2SExt+0x60>)
 80018e8:	e7f2      	b.n	80018d0 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80018f0:	f7ff ffb5 	bl	800185e <HAL_I2SEx_TxRxCpltCallback>
}
 80018f4:	e7f3      	b.n	80018de <I2SEx_RxISR_I2SExt+0x42>
 80018f6:	bf00      	nop
 80018f8:	40003800 	.word	0x40003800
 80018fc:	40003400 	.word	0x40003400

08001900 <I2SEx_TxISR_I2SExt>:
{
 8001900:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001902:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001904:	1c9a      	adds	r2, r3, #2
 8001906:	6242      	str	r2, [r0, #36]	; 0x24
 8001908:	881a      	ldrh	r2, [r3, #0]
 800190a:	6801      	ldr	r1, [r0, #0]
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <I2SEx_TxISR_I2SExt+0x5c>)
 800190e:	4299      	cmp	r1, r3
 8001910:	d018      	beq.n	8001944 <I2SEx_TxISR_I2SExt+0x44>
 8001912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001916:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001918:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	b29b      	uxth	r3, r3
 8001920:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001922:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	b963      	cbnz	r3, 8001942 <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001928:	6802      	ldr	r2, [r0, #0]
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <I2SEx_TxISR_I2SExt+0x5c>)
 800192c:	429a      	cmp	r2, r3
 800192e:	d00c      	beq.n	800194a <I2SEx_TxISR_I2SExt+0x4a>
 8001930:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001934:	6853      	ldr	r3, [r2, #4]
 8001936:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800193a:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 800193c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800193e:	b29b      	uxth	r3, r3
 8001940:	b12b      	cbz	r3, 800194e <I2SEx_TxISR_I2SExt+0x4e>
}
 8001942:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001944:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001948:	e7e5      	b.n	8001916 <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <I2SEx_TxISR_I2SExt+0x60>)
 800194c:	e7f2      	b.n	8001934 <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 800194e:	2301      	movs	r3, #1
 8001950:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001954:	f7ff ff83 	bl	800185e <HAL_I2SEx_TxRxCpltCallback>
}
 8001958:	e7f3      	b.n	8001942 <I2SEx_TxISR_I2SExt+0x42>
 800195a:	bf00      	nop
 800195c:	40003800 	.word	0x40003800
 8001960:	40003400 	.word	0x40003400

08001964 <I2SEx_RxISR_I2S>:
{
 8001964:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001966:	6803      	ldr	r3, [r0, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800196c:	1c99      	adds	r1, r3, #2
 800196e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001970:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001972:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001974:	b29b      	uxth	r3, r3
 8001976:	3b01      	subs	r3, #1
 8001978:	b29b      	uxth	r3, r3
 800197a:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800197c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800197e:	b29b      	uxth	r3, r3
 8001980:	b93b      	cbnz	r3, 8001992 <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001982:	6802      	ldr	r2, [r0, #0]
 8001984:	6853      	ldr	r3, [r2, #4]
 8001986:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800198a:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 800198c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	b103      	cbz	r3, 8001994 <I2SEx_RxISR_I2S+0x30>
}
 8001992:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8001994:	2301      	movs	r3, #1
 8001996:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800199a:	f7ff ff60 	bl	800185e <HAL_I2SEx_TxRxCpltCallback>
}
 800199e:	e7f8      	b.n	8001992 <I2SEx_RxISR_I2S+0x2e>

080019a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80019a0:	b510      	push	{r4, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80019a6:	6803      	ldr	r3, [r0, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80019ac:	4a70      	ldr	r2, [pc, #448]	; (8001b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d06f      	beq.n	8001a92 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80019b2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80019b6:	6891      	ldr	r1, [r2, #8]
 80019b8:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80019be:	6853      	ldr	r3, [r2, #4]
 80019c0:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80019c2:	6863      	ldr	r3, [r4, #4]
 80019c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c8:	d001      	beq.n	80019ce <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d170      	bne.n	8001ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80019ce:	9b05      	ldr	r3, [sp, #20]
 80019d0:	f013 0f02 	tst.w	r3, #2
 80019d4:	d003      	beq.n	80019de <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80019d6:	9b03      	ldr	r3, [sp, #12]
 80019d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019dc:	d15c      	bne.n	8001a98 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80019de:	9b04      	ldr	r3, [sp, #16]
 80019e0:	f013 0f01 	tst.w	r3, #1
 80019e4:	d003      	beq.n	80019ee <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 80019e6:	9b02      	ldr	r3, [sp, #8]
 80019e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80019ec:	d158      	bne.n	8001aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80019ee:	9b04      	ldr	r3, [sp, #16]
 80019f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80019f4:	d024      	beq.n	8001a40 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 80019f6:	9b02      	ldr	r3, [sp, #8]
 80019f8:	f013 0f20 	tst.w	r3, #32
 80019fc:	d020      	beq.n	8001a40 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d050      	beq.n	8001aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8001a06:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a0a:	6853      	ldr	r3, [r2, #4]
 8001a0c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001a10:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	6853      	ldr	r3, [r2, #4]
 8001a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a1a:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	9200      	str	r2, [sp, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff fe92 	bl	8001764 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001a40:	9b05      	ldr	r3, [sp, #20]
 8001a42:	f013 0f08 	tst.w	r3, #8
 8001a46:	d022      	beq.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001a48:	9b03      	ldr	r3, [sp, #12]
 8001a4a:	f013 0f20 	tst.w	r3, #32
 8001a4e:	d01e      	beq.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	6853      	ldr	r3, [r2, #4]
 8001a54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a58:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d024      	beq.n	8001aac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001a62:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a66:	6853      	ldr	r3, [r2, #4]
 8001a68:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001a6c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff fe6b 	bl	8001764 <HAL_I2S_ErrorCallback>
}
 8001a8e:	b006      	add	sp, #24
 8001a90:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a92:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001a96:	e78e      	b.n	80019b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7ff fee1 	bl	8001860 <I2SEx_TxISR_I2S>
 8001a9e:	e79e      	b.n	80019de <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff fefb 	bl	800189c <I2SEx_RxISR_I2SExt>
 8001aa6:	e7a2      	b.n	80019ee <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aa8:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001aaa:	e7ae      	b.n	8001a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aac:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001aae:	e7da      	b.n	8001a66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001ab0:	9b04      	ldr	r3, [sp, #16]
 8001ab2:	f013 0f02 	tst.w	r3, #2
 8001ab6:	d003      	beq.n	8001ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8001ab8:	9b02      	ldr	r3, [sp, #8]
 8001aba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001abe:	d14a      	bne.n	8001b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001ac0:	9b05      	ldr	r3, [sp, #20]
 8001ac2:	f013 0f01 	tst.w	r3, #1
 8001ac6:	d003      	beq.n	8001ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8001ac8:	9b03      	ldr	r3, [sp, #12]
 8001aca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ace:	d146      	bne.n	8001b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ad0:	9b05      	ldr	r3, [sp, #20]
 8001ad2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ad6:	d01c      	beq.n	8001b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 8001ad8:	9b03      	ldr	r3, [sp, #12]
 8001ada:	f013 0f20 	tst.w	r3, #32
 8001ade:	d018      	beq.n	8001b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ae0:	6822      	ldr	r2, [r4, #0]
 8001ae2:	6853      	ldr	r3, [r2, #4]
 8001ae4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001ae8:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001aea:	6822      	ldr	r2, [r4, #0]
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d039      	beq.n	8001b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8001af2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001af6:	6853      	ldr	r3, [r2, #4]
 8001af8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001afc:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f7ff fe29 	bl	8001764 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001b12:	9b04      	ldr	r3, [sp, #16]
 8001b14:	f013 0f08 	tst.w	r3, #8
 8001b18:	d0b9      	beq.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8001b1a:	9b02      	ldr	r3, [sp, #8]
 8001b1c:	f013 0f20 	tst.w	r3, #32
 8001b20:	d0b5      	beq.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b22:	6822      	ldr	r2, [r4, #0]
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d01f      	beq.n	8001b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001b2a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b2e:	6853      	ldr	r3, [r2, #4]
 8001b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b34:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b36:	6822      	ldr	r2, [r4, #0]
 8001b38:	6853      	ldr	r3, [r2, #4]
 8001b3a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001b3e:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff fe08 	bl	8001764 <HAL_I2S_ErrorCallback>
}
 8001b54:	e79b      	b.n	8001a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff fed2 	bl	8001900 <I2SEx_TxISR_I2SExt>
 8001b5c:	e7b0      	b.n	8001ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff ff00 	bl	8001964 <I2SEx_RxISR_I2S>
 8001b64:	e7b4      	b.n	8001ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b66:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001b68:	e7c5      	b.n	8001af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b6a:	4a02      	ldr	r2, [pc, #8]	; (8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001b6c:	e7df      	b.n	8001b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8001b6e:	bf00      	nop
 8001b70:	40003800 	.word	0x40003800
 8001b74:	40003400 	.word	0x40003400

08001b78 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	f000 81df 	beq.w	8001f3c <HAL_RCC_OscConfig+0x3c4>
{
 8001b7e:	b570      	push	{r4, r5, r6, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b84:	6803      	ldr	r3, [r0, #0]
 8001b86:	f013 0f01 	tst.w	r3, #1
 8001b8a:	d03b      	beq.n	8001c04 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8c:	4ba6      	ldr	r3, [pc, #664]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d02c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b98:	4ba3      	ldr	r3, [pc, #652]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d021      	beq.n	8001be8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba4:	6863      	ldr	r3, [r4, #4]
 8001ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001baa:	d04f      	beq.n	8001c4c <HAL_RCC_OscConfig+0xd4>
 8001bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb0:	d052      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe0>
 8001bb2:	4b9d      	ldr	r3, [pc, #628]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc4:	6863      	ldr	r3, [r4, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d050      	beq.n	8001c6c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff f861 	bl	8000c90 <HAL_GetTick>
 8001bce:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd0:	4b95      	ldr	r3, [pc, #596]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bd8:	d114      	bne.n	8001c04 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bda:	f7ff f859 	bl	8000c90 <HAL_GetTick>
 8001bde:	1b40      	subs	r0, r0, r5
 8001be0:	2864      	cmp	r0, #100	; 0x64
 8001be2:	d9f5      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001be4:	2003      	movs	r0, #3
 8001be6:	e1b0      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be8:	4b8f      	ldr	r3, [pc, #572]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001bf0:	d0d8      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf2:	4b8d      	ldr	r3, [pc, #564]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bfa:	d003      	beq.n	8001c04 <HAL_RCC_OscConfig+0x8c>
 8001bfc:	6863      	ldr	r3, [r4, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 819e 	beq.w	8001f40 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	f013 0f02 	tst.w	r3, #2
 8001c0a:	d054      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0c:	4b86      	ldr	r3, [pc, #536]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f013 0f0c 	tst.w	r3, #12
 8001c14:	d03e      	beq.n	8001c94 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c16:	4b84      	ldr	r3, [pc, #528]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d033      	beq.n	8001c8a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c22:	68e3      	ldr	r3, [r4, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d067      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c28:	4b80      	ldr	r3, [pc, #512]	; (8001e2c <HAL_RCC_OscConfig+0x2b4>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f82f 	bl	8000c90 <HAL_GetTick>
 8001c32:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	4b7c      	ldr	r3, [pc, #496]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f013 0f02 	tst.w	r3, #2
 8001c3c:	d153      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff f827 	bl	8000c90 <HAL_GetTick>
 8001c42:	1b40      	subs	r0, r0, r5
 8001c44:	2802      	cmp	r0, #2
 8001c46:	d9f5      	bls.n	8001c34 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001c48:	2003      	movs	r0, #3
 8001c4a:	e17e      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	4a76      	ldr	r2, [pc, #472]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e7b5      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4c>
 8001c58:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e7ab      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f810 	bl	8000c90 <HAL_GetTick>
 8001c70:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	4b6d      	ldr	r3, [pc, #436]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c7a:	d0c3      	beq.n	8001c04 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff f808 	bl	8000c90 <HAL_GetTick>
 8001c80:	1b40      	subs	r0, r0, r5
 8001c82:	2864      	cmp	r0, #100	; 0x64
 8001c84:	d9f5      	bls.n	8001c72 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001c86:	2003      	movs	r0, #3
 8001c88:	e15f      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c92:	d1c6      	bne.n	8001c22 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c94:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f013 0f02 	tst.w	r3, #2
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x12e>
 8001c9e:	68e3      	ldr	r3, [r4, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	f040 814f 	bne.w	8001f44 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4a60      	ldr	r2, [pc, #384]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001ca8:	6813      	ldr	r3, [r2, #0]
 8001caa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cae:	6921      	ldr	r1, [r4, #16]
 8001cb0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cb4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	f013 0f08 	tst.w	r3, #8
 8001cbc:	d040      	beq.n	8001d40 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cbe:	6963      	ldr	r3, [r4, #20]
 8001cc0:	b363      	cbz	r3, 8001d1c <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc2:	4b5b      	ldr	r3, [pc, #364]	; (8001e30 <HAL_RCC_OscConfig+0x2b8>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7fe ffe2 	bl	8000c90 <HAL_GetTick>
 8001ccc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd2:	f013 0f02 	tst.w	r3, #2
 8001cd6:	d133      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7fe ffda 	bl	8000c90 <HAL_GetTick>
 8001cdc:	1b40      	subs	r0, r0, r5
 8001cde:	2802      	cmp	r0, #2
 8001ce0:	d9f5      	bls.n	8001cce <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	e131      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce6:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001ce8:	6813      	ldr	r3, [r2, #0]
 8001cea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cee:	6921      	ldr	r1, [r4, #16]
 8001cf0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e7de      	b.n	8001cb6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <HAL_RCC_OscConfig+0x2b4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cfe:	f7fe ffc7 	bl	8000c90 <HAL_GetTick>
 8001d02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d04:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f013 0f02 	tst.w	r3, #2
 8001d0c:	d0d3      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7fe ffbf 	bl	8000c90 <HAL_GetTick>
 8001d12:	1b40      	subs	r0, r0, r5
 8001d14:	2802      	cmp	r0, #2
 8001d16:	d9f5      	bls.n	8001d04 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8001d18:	2003      	movs	r0, #3
 8001d1a:	e116      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1c:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <HAL_RCC_OscConfig+0x2b8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7fe ffb5 	bl	8000c90 <HAL_GetTick>
 8001d26:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2c:	f013 0f02 	tst.w	r3, #2
 8001d30:	d006      	beq.n	8001d40 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d32:	f7fe ffad 	bl	8000c90 <HAL_GetTick>
 8001d36:	1b40      	subs	r0, r0, r5
 8001d38:	2802      	cmp	r0, #2
 8001d3a:	d9f5      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	e104      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f013 0f04 	tst.w	r3, #4
 8001d46:	d078      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001d50:	d10d      	bne.n	8001d6e <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d6a:	2501      	movs	r5, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_RCC_OscConfig+0x2bc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d78:	d021      	beq.n	8001dbe <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7a:	68a3      	ldr	r3, [r4, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d032      	beq.n	8001de6 <HAL_RCC_OscConfig+0x26e>
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d036      	beq.n	8001df2 <HAL_RCC_OscConfig+0x27a>
 8001d84:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001d86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d88:	f022 0201 	bic.w	r2, r2, #1
 8001d8c:	671a      	str	r2, [r3, #112]	; 0x70
 8001d8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d90:	f022 0204 	bic.w	r2, r2, #4
 8001d94:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d96:	68a3      	ldr	r3, [r4, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d034      	beq.n	8001e06 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7fe ff78 	bl	8000c90 <HAL_GetTick>
 8001da0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	f013 0f02 	tst.w	r3, #2
 8001daa:	d145      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7fe ff70 	bl	8000c90 <HAL_GetTick>
 8001db0:	1b80      	subs	r0, r0, r6
 8001db2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001db6:	4298      	cmp	r0, r3
 8001db8:	d9f3      	bls.n	8001da2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001dba:	2003      	movs	r0, #3
 8001dbc:	e0c5      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_RCC_OscConfig+0x2bc>)
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001dc8:	f7fe ff62 	bl	8000c90 <HAL_GetTick>
 8001dcc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_OscConfig+0x2bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001dd6:	d1d0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd8:	f7fe ff5a 	bl	8000c90 <HAL_GetTick>
 8001ddc:	1b80      	subs	r0, r0, r6
 8001dde:	2802      	cmp	r0, #2
 8001de0:	d9f5      	bls.n	8001dce <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001de2:	2003      	movs	r0, #3
 8001de4:	e0b1      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001de8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	e7d1      	b.n	8001d96 <HAL_RCC_OscConfig+0x21e>
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001df4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001df6:	f042 0204 	orr.w	r2, r2, #4
 8001dfa:	671a      	str	r2, [r3, #112]	; 0x70
 8001dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	671a      	str	r2, [r3, #112]	; 0x70
 8001e04:	e7c7      	b.n	8001d96 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe ff43 	bl	8000c90 <HAL_GetTick>
 8001e0a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	f013 0f02 	tst.w	r3, #2
 8001e14:	d010      	beq.n	8001e38 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7fe ff3b 	bl	8000c90 <HAL_GetTick>
 8001e1a:	1b80      	subs	r0, r0, r6
 8001e1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e20:	4298      	cmp	r0, r3
 8001e22:	d9f3      	bls.n	8001e0c <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8001e24:	2003      	movs	r0, #3
 8001e26:	e090      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	42470000 	.word	0x42470000
 8001e30:	42470e80 	.word	0x42470e80
 8001e34:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e38:	b9ed      	cbnz	r5, 8001e76 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3a:	69a3      	ldr	r3, [r4, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8083 	beq.w	8001f48 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e42:	4a49      	ldr	r2, [pc, #292]	; (8001f68 <HAL_RCC_OscConfig+0x3f0>)
 8001e44:	6892      	ldr	r2, [r2, #8]
 8001e46:	f002 020c 	and.w	r2, r2, #12
 8001e4a:	2a08      	cmp	r2, #8
 8001e4c:	d051      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d017      	beq.n	8001e82 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <HAL_RCC_OscConfig+0x3f4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe ff1a 	bl	8000c90 <HAL_GetTick>
 8001e5c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b42      	ldr	r3, [pc, #264]	; (8001f68 <HAL_RCC_OscConfig+0x3f0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e66:	d042      	beq.n	8001eee <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe ff12 	bl	8000c90 <HAL_GetTick>
 8001e6c:	1b00      	subs	r0, r0, r4
 8001e6e:	2802      	cmp	r0, #2
 8001e70:	d9f5      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001e72:	2003      	movs	r0, #3
 8001e74:	e069      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e76:	4a3c      	ldr	r2, [pc, #240]	; (8001f68 <HAL_RCC_OscConfig+0x3f0>)
 8001e78:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e80:	e7db      	b.n	8001e3a <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <HAL_RCC_OscConfig+0x3f4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e88:	f7fe ff02 	bl	8000c90 <HAL_GetTick>
 8001e8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_RCC_OscConfig+0x3f0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e96:	d006      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe fefa 	bl	8000c90 <HAL_GetTick>
 8001e9c:	1b40      	subs	r0, r0, r5
 8001e9e:	2802      	cmp	r0, #2
 8001ea0:	d9f5      	bls.n	8001e8e <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8001ea2:	2003      	movs	r0, #3
 8001ea4:	e051      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ea6:	69e3      	ldr	r3, [r4, #28]
 8001ea8:	6a22      	ldr	r2, [r4, #32]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001eae:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001eb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001eb4:	0852      	lsrs	r2, r2, #1
 8001eb6:	3a01      	subs	r2, #1
 8001eb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ebc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ebe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ec2:	4a29      	ldr	r2, [pc, #164]	; (8001f68 <HAL_RCC_OscConfig+0x3f0>)
 8001ec4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_RCC_OscConfig+0x3f4>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fee0 	bl	8000c90 <HAL_GetTick>
 8001ed0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed2:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_RCC_OscConfig+0x3f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe fed8 	bl	8000c90 <HAL_GetTick>
 8001ee0:	1b00      	subs	r0, r0, r4
 8001ee2:	2802      	cmp	r0, #2
 8001ee4:	d9f5      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	e02f      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001eea:	2000      	movs	r0, #0
 8001eec:	e02d      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
 8001eee:	2000      	movs	r0, #0
 8001ef0:	e02b      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d02b      	beq.n	8001f4e <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_RCC_OscConfig+0x3f0>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001efe:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f00:	4291      	cmp	r1, r2
 8001f02:	d126      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f08:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	428a      	cmp	r2, r1
 8001f0c:	d123      	bne.n	8001f56 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f10:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001f14:	401a      	ands	r2, r3
 8001f16:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001f1a:	d11e      	bne.n	8001f5a <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f1c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001f20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f22:	0852      	lsrs	r2, r2, #1
 8001f24:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f26:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001f2a:	d118      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f2c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001f30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f32:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001f36:	d114      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001f38:	2000      	movs	r0, #0
 8001f3a:	e006      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8001f3c:	2001      	movs	r0, #1
}
 8001f3e:	4770      	bx	lr
        return HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8001f44:	2001      	movs	r0, #1
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8001f48:	2000      	movs	r0, #0
}
 8001f4a:	b002      	add	sp, #8
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001f4e:	2001      	movs	r0, #1
 8001f50:	e7fb      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8001f52:	2001      	movs	r0, #1
 8001f54:	e7f9      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
 8001f56:	2001      	movs	r0, #1
 8001f58:	e7f7      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	e7f5      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
 8001f5e:	2001      	movs	r0, #1
 8001f60:	e7f3      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
 8001f62:	2001      	movs	r0, #1
 8001f64:	e7f1      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	42470060 	.word	0x42470060

08001f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f72:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d053      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0xb6>
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d153      	bne.n	800202a <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f90:	d028      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001f9a:	0158      	lsls	r0, r3, #5
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	1ac0      	subs	r0, r0, r3
 8001fa0:	f161 0100 	sbc.w	r1, r1, #0
 8001fa4:	018e      	lsls	r6, r1, #6
 8001fa6:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8001faa:	0187      	lsls	r7, r0, #6
 8001fac:	1a3c      	subs	r4, r7, r0
 8001fae:	eb66 0501 	sbc.w	r5, r6, r1
 8001fb2:	00e9      	lsls	r1, r5, #3
 8001fb4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8001fb8:	00e0      	lsls	r0, r4, #3
 8001fba:	18c0      	adds	r0, r0, r3
 8001fbc:	f141 0100 	adc.w	r1, r1, #0
 8001fc0:	024b      	lsls	r3, r1, #9
 8001fc2:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001fc6:	0244      	lsls	r4, r0, #9
 8001fc8:	4620      	mov	r0, r4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f7fe f8fb 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001fda:	3301      	adds	r3, #1
 8001fdc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001fde:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001fe2:	e023      	b.n	800202c <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001fec:	015c      	lsls	r4, r3, #5
 8001fee:	2500      	movs	r5, #0
 8001ff0:	1ae4      	subs	r4, r4, r3
 8001ff2:	f165 0500 	sbc.w	r5, r5, #0
 8001ff6:	01ae      	lsls	r6, r5, #6
 8001ff8:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001ffc:	01a7      	lsls	r7, r4, #6
 8001ffe:	1b38      	subs	r0, r7, r4
 8002000:	eb66 0105 	sbc.w	r1, r6, r5
 8002004:	00cc      	lsls	r4, r1, #3
 8002006:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800200a:	00c5      	lsls	r5, r0, #3
 800200c:	18e8      	adds	r0, r5, r3
 800200e:	f144 0100 	adc.w	r1, r4, #0
 8002012:	028b      	lsls	r3, r1, #10
 8002014:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002018:	0284      	lsls	r4, r0, #10
 800201a:	4620      	mov	r0, r4
 800201c:	4619      	mov	r1, r3
 800201e:	2300      	movs	r3, #0
 8002020:	f7fe f8d2 	bl	80001c8 <__aeabi_uldivmod>
 8002024:	e7d5      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 8002026:	4803      	ldr	r0, [pc, #12]	; (8002034 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002028:	e000      	b.n	800202c <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202a:	4803      	ldr	r0, [pc, #12]	; (8002038 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800202c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	007a1200 	.word	0x007a1200
 8002038:	00f42400 	.word	0x00f42400

0800203c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800203c:	2800      	cmp	r0, #0
 800203e:	f000 809b 	beq.w	8002178 <HAL_RCC_ClockConfig+0x13c>
{
 8002042:	b570      	push	{r4, r5, r6, lr}
 8002044:	460d      	mov	r5, r1
 8002046:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b4f      	ldr	r3, [pc, #316]	; (8002188 <HAL_RCC_ClockConfig+0x14c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	428b      	cmp	r3, r1
 8002052:	d208      	bcs.n	8002066 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002054:	b2cb      	uxtb	r3, r1
 8002056:	4a4c      	ldr	r2, [pc, #304]	; (8002188 <HAL_RCC_ClockConfig+0x14c>)
 8002058:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	6813      	ldr	r3, [r2, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	428b      	cmp	r3, r1
 8002062:	f040 808b 	bne.w	800217c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	f013 0f02 	tst.w	r3, #2
 800206c:	d017      	beq.n	800209e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206e:	f013 0f04 	tst.w	r3, #4
 8002072:	d004      	beq.n	800207e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002074:	4a45      	ldr	r2, [pc, #276]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 8002076:	6893      	ldr	r3, [r2, #8]
 8002078:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800207c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	f013 0f08 	tst.w	r3, #8
 8002084:	d004      	beq.n	8002090 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002086:	4a41      	ldr	r2, [pc, #260]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 8002088:	6893      	ldr	r3, [r2, #8]
 800208a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800208e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002090:	4a3e      	ldr	r2, [pc, #248]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 8002092:	6893      	ldr	r3, [r2, #8]
 8002094:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002098:	68a1      	ldr	r1, [r4, #8]
 800209a:	430b      	orrs	r3, r1
 800209c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	f013 0f01 	tst.w	r3, #1
 80020a4:	d032      	beq.n	800210c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	6863      	ldr	r3, [r4, #4]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d021      	beq.n	80020f0 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ac:	1e9a      	subs	r2, r3, #2
 80020ae:	2a01      	cmp	r2, #1
 80020b0:	d925      	bls.n	80020fe <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b2:	4a36      	ldr	r2, [pc, #216]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	f012 0f02 	tst.w	r2, #2
 80020ba:	d061      	beq.n	8002180 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020bc:	4933      	ldr	r1, [pc, #204]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 80020be:	688a      	ldr	r2, [r1, #8]
 80020c0:	f022 0203 	bic.w	r2, r2, #3
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80020c8:	f7fe fde2 	bl	8000c90 <HAL_GetTick>
 80020cc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	6862      	ldr	r2, [r4, #4]
 80020d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020dc:	d016      	beq.n	800210c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe fdd7 	bl	8000c90 <HAL_GetTick>
 80020e2:	1b80      	subs	r0, r0, r6
 80020e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80020e8:	4298      	cmp	r0, r3
 80020ea:	d9f0      	bls.n	80020ce <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80020ec:	2003      	movs	r0, #3
 80020ee:	e042      	b.n	8002176 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f0:	4a26      	ldr	r2, [pc, #152]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80020f8:	d1e0      	bne.n	80020bc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80020fa:	2001      	movs	r0, #1
 80020fc:	e03b      	b.n	8002176 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4a23      	ldr	r2, [pc, #140]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002106:	d1d9      	bne.n	80020bc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002108:	2001      	movs	r0, #1
 800210a:	e034      	b.n	8002176 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_RCC_ClockConfig+0x14c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	42ab      	cmp	r3, r5
 8002116:	d907      	bls.n	8002128 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002118:	b2ea      	uxtb	r2, r5
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_ClockConfig+0x14c>)
 800211c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	42ab      	cmp	r3, r5
 8002126:	d12d      	bne.n	8002184 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	f013 0f04 	tst.w	r3, #4
 800212e:	d006      	beq.n	800213e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 8002132:	6893      	ldr	r3, [r2, #8]
 8002134:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002138:	68e1      	ldr	r1, [r4, #12]
 800213a:	430b      	orrs	r3, r1
 800213c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	f013 0f08 	tst.w	r3, #8
 8002144:	d007      	beq.n	8002156 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 8002148:	6893      	ldr	r3, [r2, #8]
 800214a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800214e:	6921      	ldr	r1, [r4, #16]
 8002150:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002154:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002156:	f7ff ff0b 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCC_ClockConfig+0x150>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x154>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	40d8      	lsrs	r0, r3
 8002168:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x158>)
 800216a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_RCC_ClockConfig+0x15c>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	f7fe fd42 	bl	8000bf8 <HAL_InitTick>
  return HAL_OK;
 8002174:	2000      	movs	r0, #0
}
 8002176:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002178:	2001      	movs	r0, #1
}
 800217a:	4770      	bx	lr
      return HAL_ERROR;
 800217c:	2001      	movs	r0, #1
 800217e:	e7fa      	b.n	8002176 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
 8002182:	e7f8      	b.n	8002176 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002184:	2001      	movs	r0, #1
 8002186:	e7f6      	b.n	8002176 <HAL_RCC_ClockConfig+0x13a>
 8002188:	40023c00 	.word	0x40023c00
 800218c:	40023800 	.word	0x40023800
 8002190:	08002cd0 	.word	0x08002cd0
 8002194:	20000000 	.word	0x20000000
 8002198:	20000008 	.word	0x20000008

0800219c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800219c:	4b01      	ldr	r3, [pc, #4]	; (80021a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000

080021a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021aa:	f7ff fff7 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80021b6:	4a03      	ldr	r2, [pc, #12]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80021ba:	40d8      	lsrs	r0, r3
 80021bc:	bd08      	pop	{r3, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	08002ce0 	.word	0x08002ce0

080021c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021ca:	f7ff ffe7 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80021d6:	4a03      	ldr	r2, [pc, #12]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
}
 80021da:	40d8      	lsrs	r0, r3
 80021dc:	bd08      	pop	{r3, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	08002ce0 	.word	0x08002ce0

080021e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e8:	b530      	push	{r4, r5, lr}
 80021ea:	b083      	sub	sp, #12
 80021ec:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80021ee:	6803      	ldr	r3, [r0, #0]
 80021f0:	f013 0f05 	tst.w	r3, #5
 80021f4:	d106      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	f013 0f02 	tst.w	r3, #2
 80021fc:	d12e      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80021fe:	2000      	movs	r0, #0
}
 8002200:	b003      	add	sp, #12
 8002202:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002204:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800220a:	f7fe fd41 	bl	8000c90 <HAL_GetTick>
 800220e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002210:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002218:	d006      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800221a:	f7fe fd39 	bl	8000c90 <HAL_GetTick>
 800221e:	1b43      	subs	r3, r0, r5
 8002220:	2b02      	cmp	r3, #2
 8002222:	d9f5      	bls.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8002224:	2003      	movs	r0, #3
 8002226:	e7eb      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002228:	6862      	ldr	r2, [r4, #4]
 800222a:	68a3      	ldr	r3, [r4, #8]
 800222c:	071b      	lsls	r3, r3, #28
 800222e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002232:	4a3f      	ldr	r2, [pc, #252]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002234:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002238:	4b3c      	ldr	r3, [pc, #240]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800223e:	f7fe fd27 	bl	8000c90 <HAL_GetTick>
 8002242:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002244:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800224c:	d1d3      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800224e:	f7fe fd1f 	bl	8000c90 <HAL_GetTick>
 8002252:	1b43      	subs	r3, r0, r5
 8002254:	2b02      	cmp	r3, #2
 8002256:	d9f5      	bls.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002258:	2003      	movs	r0, #3
 800225a:	e7d1      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 800225c:	2300      	movs	r3, #0
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002264:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002274:	4a2f      	ldr	r2, [pc, #188]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002276:	6813      	ldr	r3, [r2, #0]
 8002278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800227e:	f7fe fd07 	bl	8000c90 <HAL_GetTick>
 8002282:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002284:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f413 7f80 	tst.w	r3, #256	; 0x100
 800228c:	d106      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7fe fcff 	bl	8000c90 <HAL_GetTick>
 8002292:	1b43      	subs	r3, r0, r5
 8002294:	2b02      	cmp	r3, #2
 8002296:	d9f5      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8002298:	2003      	movs	r0, #3
 800229a:	e7b1      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022a4:	d012      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80022a6:	68e2      	ldr	r2, [r4, #12]
 80022a8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d00d      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80022b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80022b8:	491f      	ldr	r1, [pc, #124]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80022ba:	2001      	movs	r0, #1
 80022bc:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022be:	2000      	movs	r0, #0
 80022c0:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 80022c2:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	f013 0f01 	tst.w	r3, #1
 80022ca:	d113      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022cc:	68e3      	ldr	r3, [r4, #12]
 80022ce:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80022d2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80022d6:	d01e      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80022d8:	4a15      	ldr	r2, [pc, #84]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80022da:	6893      	ldr	r3, [r2, #8]
 80022dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022e0:	6093      	str	r3, [r2, #8]
 80022e2:	4913      	ldr	r1, [pc, #76]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80022e4:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80022e6:	68e2      	ldr	r2, [r4, #12]
 80022e8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80022ec:	4313      	orrs	r3, r2
 80022ee:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 80022f0:	2000      	movs	r0, #0
 80022f2:	e785      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 80022f4:	f7fe fccc 	bl	8000c90 <HAL_GetTick>
 80022f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	f013 0f02 	tst.w	r3, #2
 8002302:	d1e3      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7fe fcc4 	bl	8000c90 <HAL_GetTick>
 8002308:	1b40      	subs	r0, r0, r5
 800230a:	f241 3388 	movw	r3, #5000	; 0x1388
 800230e:	4298      	cmp	r0, r3
 8002310:	d9f3      	bls.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x112>
            return HAL_TIMEOUT;
 8002312:	2003      	movs	r0, #3
 8002314:	e774      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002316:	4906      	ldr	r1, [pc, #24]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002318:	688a      	ldr	r2, [r1, #8]
 800231a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800231e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
 800232a:	e7da      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800232c:	42470068 	.word	0x42470068
 8002330:	40023800 	.word	0x40023800
 8002334:	40007000 	.word	0x40007000
 8002338:	42470e40 	.word	0x42470e40

0800233c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 800233c:	2801      	cmp	r0, #1
 800233e:	d001      	beq.n	8002344 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8002340:	2000      	movs	r0, #0
 8002342:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002344:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002346:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8002348:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 800234c:	d003      	beq.n	8002356 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
 800234e:	2b01      	cmp	r3, #1
 8002350:	d123      	bne.n	800239a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8002352:	4814      	ldr	r0, [pc, #80]	; (80023a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8002354:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800235e:	d014      	beq.n	800238a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002368:	480f      	ldr	r0, [pc, #60]	; (80023a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 800236a:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800236e:	4a0c      	ldr	r2, [pc, #48]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002370:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002374:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002378:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800237c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002380:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002384:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8002388:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002392:	4806      	ldr	r0, [pc, #24]	; (80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8002394:	fbb0 f0f3 	udiv	r0, r0, r3
 8002398:	e7e9      	b.n	800236e <HAL_RCCEx_GetPeriphCLKFreq+0x32>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800239a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	00bb8000 	.word	0x00bb8000
 80023a8:	007a1200 	.word	0x007a1200
 80023ac:	00f42400 	.word	0x00f42400

080023b0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80023b0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b2:	f102 030c 	add.w	r3, r2, #12
 80023b6:	e853 3f00 	ldrex	r3, [r3]
 80023ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023be:	320c      	adds	r2, #12
 80023c0:	e842 3100 	strex	r1, r3, [r2]
 80023c4:	2900      	cmp	r1, #0
 80023c6:	d1f3      	bne.n	80023b0 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023c8:	2320      	movs	r3, #32
 80023ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80023ce:	4770      	bx	lr

080023d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d2:	f102 030c 	add.w	r3, r2, #12
 80023d6:	e853 3f00 	ldrex	r3, [r3]
 80023da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023de:	320c      	adds	r2, #12
 80023e0:	e842 3100 	strex	r1, r3, [r2]
 80023e4:	2900      	cmp	r1, #0
 80023e6:	d1f3      	bne.n	80023d0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ea:	f102 0314 	add.w	r3, r2, #20
 80023ee:	e853 3f00 	ldrex	r3, [r3]
 80023f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	3214      	adds	r2, #20
 80023f8:	e842 3100 	strex	r1, r3, [r2]
 80023fc:	2900      	cmp	r1, #0
 80023fe:	d1f3      	bne.n	80023e8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002400:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002406:	2320      	movs	r3, #32
 8002408:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800240c:	2300      	movs	r3, #0
 800240e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002410:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002412:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	f102 030c 	add.w	r3, r2, #12
 8002418:	e853 3f00 	ldrex	r3, [r3]
 800241c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002420:	320c      	adds	r2, #12
 8002422:	e842 3100 	strex	r1, r3, [r2]
 8002426:	2900      	cmp	r1, #0
 8002428:	d1f3      	bne.n	8002412 <UART_EndRxTransfer+0x42>
 800242a:	e7ec      	b.n	8002406 <UART_EndRxTransfer+0x36>

0800242c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800242c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b21      	cmp	r3, #33	; 0x21
 8002434:	d001      	beq.n	800243a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002436:	2002      	movs	r0, #2
  }
}
 8002438:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800243a:	6883      	ldr	r3, [r0, #8]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002440:	d017      	beq.n	8002472 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002442:	6a03      	ldr	r3, [r0, #32]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	6202      	str	r2, [r0, #32]
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	6803      	ldr	r3, [r0, #0]
 800244c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800244e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29b      	uxth	r3, r3
 8002456:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002458:	b94b      	cbnz	r3, 800246e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800245a:	6802      	ldr	r2, [r0, #0]
 800245c:	68d3      	ldr	r3, [r2, #12]
 800245e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002462:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002464:	6802      	ldr	r2, [r0, #0]
 8002466:	68d3      	ldr	r3, [r2, #12]
 8002468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800246e:	2000      	movs	r0, #0
 8002470:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002472:	6903      	ldr	r3, [r0, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e4      	bne.n	8002442 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002478:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	6802      	ldr	r2, [r0, #0]
 800247e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002482:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002484:	6a03      	ldr	r3, [r0, #32]
 8002486:	3302      	adds	r3, #2
 8002488:	6203      	str	r3, [r0, #32]
 800248a:	e7e0      	b.n	800244e <UART_Transmit_IT+0x22>

0800248c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002490:	6802      	ldr	r2, [r0, #0]
 8002492:	6913      	ldr	r3, [r2, #16]
 8002494:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002498:	68c1      	ldr	r1, [r0, #12]
 800249a:	430b      	orrs	r3, r1
 800249c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800249e:	6883      	ldr	r3, [r0, #8]
 80024a0:	6902      	ldr	r2, [r0, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	6942      	ldr	r2, [r0, #20]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	69c2      	ldr	r2, [r0, #28]
 80024aa:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80024ac:	6801      	ldr	r1, [r0, #0]
 80024ae:	68cb      	ldr	r3, [r1, #12]
 80024b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80024b4:	f023 030c 	bic.w	r3, r3, #12
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024bc:	6802      	ldr	r2, [r0, #0]
 80024be:	6953      	ldr	r3, [r2, #20]
 80024c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c4:	6981      	ldr	r1, [r0, #24]
 80024c6:	430b      	orrs	r3, r1
 80024c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024ca:	6803      	ldr	r3, [r0, #0]
 80024cc:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <UART_SetConfig+0x114>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d006      	beq.n	80024e0 <UART_SetConfig+0x54>
 80024d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d002      	beq.n	80024e0 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024da:	f7ff fe65 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 80024de:	e001      	b.n	80024e4 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024e0:	f7ff fe72 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024e4:	69e3      	ldr	r3, [r4, #28]
 80024e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ea:	d02a      	beq.n	8002542 <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ec:	2600      	movs	r6, #0
 80024ee:	1805      	adds	r5, r0, r0
 80024f0:	eb46 0106 	adc.w	r1, r6, r6
 80024f4:	182d      	adds	r5, r5, r0
 80024f6:	eb46 0101 	adc.w	r1, r6, r1
 80024fa:	00cb      	lsls	r3, r1, #3
 80024fc:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002500:	00ea      	lsls	r2, r5, #3
 8002502:	4615      	mov	r5, r2
 8002504:	4619      	mov	r1, r3
 8002506:	6863      	ldr	r3, [r4, #4]
 8002508:	009a      	lsls	r2, r3, #2
 800250a:	0f9b      	lsrs	r3, r3, #30
 800250c:	1828      	adds	r0, r5, r0
 800250e:	eb46 0101 	adc.w	r1, r6, r1
 8002512:	f7fd fe59 	bl	80001c8 <__aeabi_uldivmod>
 8002516:	4d23      	ldr	r5, [pc, #140]	; (80025a4 <UART_SetConfig+0x118>)
 8002518:	fba5 3200 	umull	r3, r2, r5, r0
 800251c:	0951      	lsrs	r1, r2, #5
 800251e:	2364      	movs	r3, #100	; 0x64
 8002520:	fb03 0311 	mls	r3, r3, r1, r0
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	3332      	adds	r3, #50	; 0x32
 8002528:	fba5 2303 	umull	r2, r3, r5, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002532:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	6821      	ldr	r1, [r4, #0]
 800253c:	4413      	add	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
  }
}
 8002540:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002542:	2600      	movs	r6, #0
 8002544:	1805      	adds	r5, r0, r0
 8002546:	eb46 0106 	adc.w	r1, r6, r6
 800254a:	182d      	adds	r5, r5, r0
 800254c:	eb46 0101 	adc.w	r1, r6, r1
 8002550:	00cb      	lsls	r3, r1, #3
 8002552:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002556:	00ea      	lsls	r2, r5, #3
 8002558:	4615      	mov	r5, r2
 800255a:	4619      	mov	r1, r3
 800255c:	6862      	ldr	r2, [r4, #4]
 800255e:	4633      	mov	r3, r6
 8002560:	1892      	adds	r2, r2, r2
 8002562:	eb46 0303 	adc.w	r3, r6, r3
 8002566:	1828      	adds	r0, r5, r0
 8002568:	eb46 0101 	adc.w	r1, r6, r1
 800256c:	f7fd fe2c 	bl	80001c8 <__aeabi_uldivmod>
 8002570:	4d0c      	ldr	r5, [pc, #48]	; (80025a4 <UART_SetConfig+0x118>)
 8002572:	fba5 3200 	umull	r3, r2, r5, r0
 8002576:	0951      	lsrs	r1, r2, #5
 8002578:	2364      	movs	r3, #100	; 0x64
 800257a:	fb03 0311 	mls	r3, r3, r1, r0
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	3332      	adds	r3, #50	; 0x32
 8002582:	fba5 2303 	umull	r2, r3, r5, r3
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	005a      	lsls	r2, r3, #1
 800258a:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800258e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	6821      	ldr	r1, [r4, #0]
 8002598:	4413      	add	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
 800259c:	e7d0      	b.n	8002540 <UART_SetConfig+0xb4>
 800259e:	bf00      	nop
 80025a0:	40011000 	.word	0x40011000
 80025a4:	51eb851f 	.word	0x51eb851f

080025a8 <HAL_UART_Init>:
  if (huart == NULL)
 80025a8:	b358      	cbz	r0, 8002602 <HAL_UART_Init+0x5a>
{
 80025aa:	b510      	push	{r4, lr}
 80025ac:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80025ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025b2:	b30b      	cbz	r3, 80025f8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80025b4:	2324      	movs	r3, #36	; 0x24
 80025b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80025ba:	6822      	ldr	r2, [r4, #0]
 80025bc:	68d3      	ldr	r3, [r2, #12]
 80025be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025c2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80025c4:	4620      	mov	r0, r4
 80025c6:	f7ff ff61 	bl	800248c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	6913      	ldr	r3, [r2, #16]
 80025ce:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80025d2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d4:	6822      	ldr	r2, [r4, #0]
 80025d6:	6953      	ldr	r3, [r2, #20]
 80025d8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80025dc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80025de:	6822      	ldr	r2, [r4, #0]
 80025e0:	68d3      	ldr	r3, [r2, #12]
 80025e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025e6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e8:	2000      	movs	r0, #0
 80025ea:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025ec:	2320      	movs	r3, #32
 80025ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80025f6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80025f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80025fc:	f7fe f9f8 	bl	80009f0 <HAL_UART_MspInit>
 8002600:	e7d8      	b.n	80025b4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
}
 8002604:	4770      	bx	lr
	...

08002608 <HAL_UART_Transmit_DMA>:
{
 8002608:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800260a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b20      	cmp	r3, #32
 8002612:	d138      	bne.n	8002686 <HAL_UART_Transmit_DMA+0x7e>
 8002614:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002616:	2900      	cmp	r1, #0
 8002618:	d037      	beq.n	800268a <HAL_UART_Transmit_DMA+0x82>
 800261a:	2a00      	cmp	r2, #0
 800261c:	d037      	beq.n	800268e <HAL_UART_Transmit_DMA+0x86>
    __HAL_LOCK(huart);
 800261e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d035      	beq.n	8002692 <HAL_UART_Transmit_DMA+0x8a>
 8002626:	2301      	movs	r3, #1
 8002628:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 800262c:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800262e:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8002630:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	2500      	movs	r5, #0
 8002634:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002636:	2321      	movs	r3, #33	; 0x21
 8002638:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800263c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800263e:	4816      	ldr	r0, [pc, #88]	; (8002698 <HAL_UART_Transmit_DMA+0x90>)
 8002640:	63d8      	str	r0, [r3, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002644:	4815      	ldr	r0, [pc, #84]	; (800269c <HAL_UART_Transmit_DMA+0x94>)
 8002646:	6418      	str	r0, [r3, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002648:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800264a:	4815      	ldr	r0, [pc, #84]	; (80026a0 <HAL_UART_Transmit_DMA+0x98>)
 800264c:	64d8      	str	r0, [r3, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 800264e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002650:	651d      	str	r5, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002652:	6820      	ldr	r0, [r4, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	1d02      	adds	r2, r0, #4
 8002658:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800265a:	f7fe fc6f 	bl	8000f3c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002664:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002666:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800266a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266c:	f102 0314 	add.w	r3, r2, #20
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002678:	3214      	adds	r2, #20
 800267a:	e842 3100 	strex	r1, r3, [r2]
 800267e:	2900      	cmp	r1, #0
 8002680:	d1f3      	bne.n	800266a <HAL_UART_Transmit_DMA+0x62>
    return HAL_OK;
 8002682:	2000      	movs	r0, #0
 8002684:	e000      	b.n	8002688 <HAL_UART_Transmit_DMA+0x80>
    return HAL_BUSY;
 8002686:	2002      	movs	r0, #2
}
 8002688:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800268a:	2001      	movs	r0, #1
 800268c:	e7fc      	b.n	8002688 <HAL_UART_Transmit_DMA+0x80>
 800268e:	2001      	movs	r0, #1
 8002690:	e7fa      	b.n	8002688 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8002692:	2002      	movs	r0, #2
 8002694:	e7f8      	b.n	8002688 <HAL_UART_Transmit_DMA+0x80>
 8002696:	bf00      	nop
 8002698:	080026a5 	.word	0x080026a5
 800269c:	0800270d 	.word	0x0800270d
 80026a0:	08002719 	.word	0x08002719

080026a4 <UART_DMATransmitCplt>:
{
 80026a4:	b508      	push	{r3, lr}
 80026a6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026b2:	d11a      	bne.n	80026ea <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	84c3      	strh	r3, [r0, #38]	; 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026b8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ba:	f102 0314 	add.w	r3, r2, #20
 80026be:	e853 3f00 	ldrex	r3, [r3]
 80026c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c6:	3214      	adds	r2, #20
 80026c8:	e842 3100 	strex	r1, r3, [r2]
 80026cc:	2900      	cmp	r1, #0
 80026ce:	d1f3      	bne.n	80026b8 <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	f102 030c 	add.w	r3, r2, #12
 80026d6:	e853 3f00 	ldrex	r3, [r3]
 80026da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026de:	320c      	adds	r2, #12
 80026e0:	e842 3100 	strex	r1, r3, [r2]
 80026e4:	2900      	cmp	r1, #0
 80026e6:	d1f3      	bne.n	80026d0 <UART_DMATransmitCplt+0x2c>
}
 80026e8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80026ea:	f7fe fa7b 	bl	8000be4 <HAL_UART_TxCpltCallback>
}
 80026ee:	e7fb      	b.n	80026e8 <UART_DMATransmitCplt+0x44>

080026f0 <UART_EndTransmit_IT>:
{
 80026f0:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026f2:	6801      	ldr	r1, [r0, #0]
 80026f4:	68ca      	ldr	r2, [r1, #12]
 80026f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026fa:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026fc:	2220      	movs	r2, #32
 80026fe:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8002702:	f7fe fa6f 	bl	8000be4 <HAL_UART_TxCpltCallback>
}
 8002706:	2000      	movs	r0, #0
 8002708:	bd08      	pop	{r3, pc}

0800270a <HAL_UART_TxHalfCpltCallback>:
}
 800270a:	4770      	bx	lr

0800270c <UART_DMATxHalfCplt>:
{
 800270c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800270e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002710:	f7ff fffb 	bl	800270a <HAL_UART_TxHalfCpltCallback>
}
 8002714:	bd08      	pop	{r3, pc}

08002716 <HAL_UART_ErrorCallback>:
}
 8002716:	4770      	bx	lr

08002718 <UART_DMAError>:
{
 8002718:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002720:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b21      	cmp	r3, #33	; 0x21
 8002728:	d010      	beq.n	800274c <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002732:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b22      	cmp	r3, #34	; 0x22
 800273a:	d011      	beq.n	8002760 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800273c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8002744:	4620      	mov	r0, r4
 8002746:	f7ff ffe6 	bl	8002716 <HAL_UART_ErrorCallback>
}
 800274a:	bd10      	pop	{r4, pc}
 800274c:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002750:	2a00      	cmp	r2, #0
 8002752:	d0ea      	beq.n	800272a <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002754:	2300      	movs	r3, #0
 8002756:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002758:	4620      	mov	r0, r4
 800275a:	f7ff fe29 	bl	80023b0 <UART_EndTxTransfer>
 800275e:	e7e4      	b.n	800272a <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002760:	2a00      	cmp	r2, #0
 8002762:	d0eb      	beq.n	800273c <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8002764:	2300      	movs	r3, #0
 8002766:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002768:	4620      	mov	r0, r4
 800276a:	f7ff fe31 	bl	80023d0 <UART_EndRxTransfer>
 800276e:	e7e5      	b.n	800273c <UART_DMAError+0x24>

08002770 <UART_DMAAbortOnError>:
{
 8002770:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002772:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002774:	2300      	movs	r3, #0
 8002776:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002778:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800277a:	f7ff ffcc 	bl	8002716 <HAL_UART_ErrorCallback>
}
 800277e:	bd08      	pop	{r3, pc}

08002780 <HAL_UARTEx_RxEventCallback>:
}
 8002780:	4770      	bx	lr

08002782 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002782:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b22      	cmp	r3, #34	; 0x22
 800278a:	d167      	bne.n	800285c <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800278c:	6883      	ldr	r3, [r0, #8]
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002792:	d04d      	beq.n	8002830 <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002794:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279a:	d004      	beq.n	80027a6 <UART_Receive_IT+0x24>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d154      	bne.n	800284a <UART_Receive_IT+0xc8>
 80027a0:	6903      	ldr	r3, [r0, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d151      	bne.n	800284a <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027a6:	6803      	ldr	r3, [r0, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80027ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80027ae:	3301      	adds	r3, #1
 80027b0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80027b2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d14f      	bne.n	8002860 <UART_Receive_IT+0xde>
{
 80027c0:	b500      	push	{lr}
 80027c2:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027c4:	6802      	ldr	r2, [r0, #0]
 80027c6:	68d3      	ldr	r3, [r2, #12]
 80027c8:	f023 0320 	bic.w	r3, r3, #32
 80027cc:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027ce:	6802      	ldr	r2, [r0, #0]
 80027d0:	68d3      	ldr	r3, [r2, #12]
 80027d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027d8:	6802      	ldr	r2, [r0, #0]
 80027da:	6953      	ldr	r3, [r2, #20]
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80027e2:	2320      	movs	r3, #32
 80027e4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d133      	bne.n	8002856 <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ee:	2300      	movs	r3, #0
 80027f0:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	f102 030c 	add.w	r3, r2, #12
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002800:	320c      	adds	r2, #12
 8002802:	e842 3100 	strex	r1, r3, [r2]
 8002806:	2900      	cmp	r1, #0
 8002808:	d1f3      	bne.n	80027f2 <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800280a:	6803      	ldr	r3, [r0, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	f012 0f10 	tst.w	r2, #16
 8002812:	d006      	beq.n	8002822 <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002814:	2200      	movs	r2, #0
 8002816:	9201      	str	r2, [sp, #4]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	9201      	str	r2, [sp, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002822:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002824:	f7ff ffac 	bl	8002780 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8002828:	2000      	movs	r0, #0
}
 800282a:	b003      	add	sp, #12
 800282c:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002830:	6902      	ldr	r2, [r0, #16]
 8002832:	2a00      	cmp	r2, #0
 8002834:	d1ae      	bne.n	8002794 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002836:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002838:	6803      	ldr	r3, [r0, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002840:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002842:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002844:	3302      	adds	r3, #2
 8002846:	6283      	str	r3, [r0, #40]	; 0x28
 8002848:	e7b3      	b.n	80027b2 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800284a:	6803      	ldr	r3, [r0, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002852:	7013      	strb	r3, [r2, #0]
 8002854:	e7aa      	b.n	80027ac <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8002856:	f7fe f9ab 	bl	8000bb0 <HAL_UART_RxCpltCallback>
 800285a:	e7e5      	b.n	8002828 <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 800285c:	2002      	movs	r0, #2
 800285e:	4770      	bx	lr
    return HAL_OK;
 8002860:	2000      	movs	r0, #0
}
 8002862:	4770      	bx	lr

08002864 <HAL_UART_IRQHandler>:
{
 8002864:	b530      	push	{r4, r5, lr}
 8002866:	b083      	sub	sp, #12
 8002868:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800286a:	6802      	ldr	r2, [r0, #0]
 800286c:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800286e:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002870:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8002872:	f013 050f 	ands.w	r5, r3, #15
 8002876:	d105      	bne.n	8002884 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002878:	f013 0f20 	tst.w	r3, #32
 800287c:	d002      	beq.n	8002884 <HAL_UART_IRQHandler+0x20>
 800287e:	f010 0f20 	tst.w	r0, #32
 8002882:	d119      	bne.n	80028b8 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002884:	b12d      	cbz	r5, 8002892 <HAL_UART_IRQHandler+0x2e>
 8002886:	f011 0101 	ands.w	r1, r1, #1
 800288a:	d119      	bne.n	80028c0 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800288c:	f410 7f90 	tst.w	r0, #288	; 0x120
 8002890:	d116      	bne.n	80028c0 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002892:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002894:	2901      	cmp	r1, #1
 8002896:	d07d      	beq.n	8002994 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002898:	f013 0f80 	tst.w	r3, #128	; 0x80
 800289c:	d003      	beq.n	80028a6 <HAL_UART_IRQHandler+0x42>
 800289e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80028a2:	f040 8115 	bne.w	8002ad0 <HAL_UART_IRQHandler+0x26c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80028aa:	d003      	beq.n	80028b4 <HAL_UART_IRQHandler+0x50>
 80028ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028b0:	f040 8112 	bne.w	8002ad8 <HAL_UART_IRQHandler+0x274>
}
 80028b4:	b003      	add	sp, #12
 80028b6:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff ff62 	bl	8002782 <UART_Receive_IT>
      return;
 80028be:	e7f9      	b.n	80028b4 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028c0:	f013 0f01 	tst.w	r3, #1
 80028c4:	d006      	beq.n	80028d4 <HAL_UART_IRQHandler+0x70>
 80028c6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80028ca:	d003      	beq.n	80028d4 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d4:	f013 0f04 	tst.w	r3, #4
 80028d8:	d004      	beq.n	80028e4 <HAL_UART_IRQHandler+0x80>
 80028da:	b119      	cbz	r1, 80028e4 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028de:	f042 0202 	orr.w	r2, r2, #2
 80028e2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028e4:	f013 0f02 	tst.w	r3, #2
 80028e8:	d004      	beq.n	80028f4 <HAL_UART_IRQHandler+0x90>
 80028ea:	b119      	cbz	r1, 80028f4 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028ee:	f042 0204 	orr.w	r2, r2, #4
 80028f2:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028f4:	f013 0f08 	tst.w	r3, #8
 80028f8:	d007      	beq.n	800290a <HAL_UART_IRQHandler+0xa6>
 80028fa:	f010 0f20 	tst.w	r0, #32
 80028fe:	d100      	bne.n	8002902 <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002900:	b119      	cbz	r1, 800290a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002902:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002904:	f042 0208 	orr.w	r2, r2, #8
 8002908:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800290a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800290c:	2a00      	cmp	r2, #0
 800290e:	d0d1      	beq.n	80028b4 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002910:	f013 0f20 	tst.w	r3, #32
 8002914:	d002      	beq.n	800291c <HAL_UART_IRQHandler+0xb8>
 8002916:	f010 0f20 	tst.w	r0, #32
 800291a:	d129      	bne.n	8002970 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002924:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002926:	f012 0f08 	tst.w	r2, #8
 800292a:	d100      	bne.n	800292e <HAL_UART_IRQHandler+0xca>
 800292c:	b363      	cbz	r3, 8002988 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 800292e:	4620      	mov	r0, r4
 8002930:	f7ff fd4e 	bl	80023d0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f013 0f40 	tst.w	r3, #64	; 0x40
 800293c:	d020      	beq.n	8002980 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800293e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002940:	f102 0314 	add.w	r3, r2, #20
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294c:	3214      	adds	r2, #20
 800294e:	e842 3100 	strex	r1, r3, [r2]
 8002952:	2900      	cmp	r1, #0
 8002954:	d1f3      	bne.n	800293e <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 8002956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002958:	b173      	cbz	r3, 8002978 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800295a:	4a61      	ldr	r2, [pc, #388]	; (8002ae0 <HAL_UART_IRQHandler+0x27c>)
 800295c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800295e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002960:	f7fe fb6b 	bl	800103a <HAL_DMA_Abort_IT>
 8002964:	2800      	cmp	r0, #0
 8002966:	d0a5      	beq.n	80028b4 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002968:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800296a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800296c:	4798      	blx	r3
 800296e:	e7a1      	b.n	80028b4 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8002970:	4620      	mov	r0, r4
 8002972:	f7ff ff06 	bl	8002782 <UART_Receive_IT>
 8002976:	e7d1      	b.n	800291c <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8002978:	4620      	mov	r0, r4
 800297a:	f7ff fecc 	bl	8002716 <HAL_UART_ErrorCallback>
 800297e:	e799      	b.n	80028b4 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff fec8 	bl	8002716 <HAL_UART_ErrorCallback>
 8002986:	e795      	b.n	80028b4 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff fec4 	bl	8002716 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298e:	2300      	movs	r3, #0
 8002990:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8002992:	e78f      	b.n	80028b4 <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002994:	f013 0f10 	tst.w	r3, #16
 8002998:	f43f af7e 	beq.w	8002898 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800299c:	f010 0f10 	tst.w	r0, #16
 80029a0:	f43f af7a 	beq.w	8002898 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029a4:	2300      	movs	r3, #0
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	6853      	ldr	r3, [r2, #4]
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b2:	6953      	ldr	r3, [r2, #20]
 80029b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029b8:	d050      	beq.n	8002a5c <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029bc:	6813      	ldr	r3, [r2, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f43f af76 	beq.w	80028b4 <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029c8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80029ca:	4299      	cmp	r1, r3
 80029cc:	f67f af72 	bls.w	80028b4 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 80029d0:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029d2:	69d3      	ldr	r3, [r2, #28]
 80029d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d8:	d037      	beq.n	8002a4a <HAL_UART_IRQHandler+0x1e6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029dc:	f102 030c 	add.w	r3, r2, #12
 80029e0:	e853 3f00 	ldrex	r3, [r3]
 80029e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e8:	320c      	adds	r2, #12
 80029ea:	e842 3100 	strex	r1, r3, [r2]
 80029ee:	2900      	cmp	r1, #0
 80029f0:	d1f3      	bne.n	80029da <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	f102 0314 	add.w	r3, r2, #20
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	3214      	adds	r2, #20
 8002a02:	e842 3100 	strex	r1, r3, [r2]
 8002a06:	2900      	cmp	r1, #0
 8002a08:	d1f3      	bne.n	80029f2 <HAL_UART_IRQHandler+0x18e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	f102 0314 	add.w	r3, r2, #20
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a18:	3214      	adds	r2, #20
 8002a1a:	e842 3100 	strex	r1, r3, [r2]
 8002a1e:	2900      	cmp	r1, #0
 8002a20:	d1f3      	bne.n	8002a0a <HAL_UART_IRQHandler+0x1a6>
          huart->RxState = HAL_UART_STATE_READY;
 8002a22:	2320      	movs	r3, #32
 8002a24:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	f102 030c 	add.w	r3, r2, #12
 8002a32:	e853 3f00 	ldrex	r3, [r3]
 8002a36:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	320c      	adds	r2, #12
 8002a3c:	e842 3100 	strex	r1, r3, [r2]
 8002a40:	2900      	cmp	r1, #0
 8002a42:	d1f3      	bne.n	8002a2c <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a46:	f7fe faae 	bl	8000fa6 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a4a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002a4c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	1ac9      	subs	r1, r1, r3
 8002a52:	b289      	uxth	r1, r1
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7ff fe93 	bl	8002780 <HAL_UARTEx_RxEventCallback>
      return;
 8002a5a:	e72b      	b.n	80028b4 <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a5c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002a5e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	1ac9      	subs	r1, r1, r3
 8002a64:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002a66:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f43f af22 	beq.w	80028b4 <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 8002a70:	2900      	cmp	r1, #0
 8002a72:	f43f af1f 	beq.w	80028b4 <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a76:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	f102 030c 	add.w	r3, r2, #12
 8002a7c:	e853 3f00 	ldrex	r3, [r3]
 8002a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a84:	320c      	adds	r2, #12
 8002a86:	e842 3000 	strex	r0, r3, [r2]
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d1f3      	bne.n	8002a76 <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	f102 0314 	add.w	r3, r2, #20
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9c:	3214      	adds	r2, #20
 8002a9e:	e842 3000 	strex	r0, r3, [r2]
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d1f3      	bne.n	8002a8e <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aac:	2300      	movs	r3, #0
 8002aae:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab2:	f102 030c 	add.w	r3, r2, #12
 8002ab6:	e853 3f00 	ldrex	r3, [r3]
 8002aba:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	320c      	adds	r2, #12
 8002ac0:	e842 3000 	strex	r0, r3, [r2]
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d1f3      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x24c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff fe59 	bl	8002780 <HAL_UARTEx_RxEventCallback>
      return;
 8002ace:	e6f1      	b.n	80028b4 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff fcab 	bl	800242c <UART_Transmit_IT>
    return;
 8002ad6:	e6ed      	b.n	80028b4 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff fe09 	bl	80026f0 <UART_EndTransmit_IT>
    return;
 8002ade:	e6e9      	b.n	80028b4 <HAL_UART_IRQHandler+0x50>
 8002ae0:	08002771 	.word	0x08002771

08002ae4 <UART_Start_Receive_IT>:
{
 8002ae4:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8002ae6:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ae8:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002aea:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aec:	2000      	movs	r0, #0
 8002aee:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002af0:	2222      	movs	r2, #34	; 0x22
 8002af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8002af6:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002afa:	6819      	ldr	r1, [r3, #0]
 8002afc:	68ca      	ldr	r2, [r1, #12]
 8002afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b02:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	694a      	ldr	r2, [r1, #20]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68d3      	ldr	r3, [r2, #12]
 8002b12:	f043 0320 	orr.w	r3, r3, #32
 8002b16:	60d3      	str	r3, [r2, #12]
}
 8002b18:	4770      	bx	lr

08002b1a <HAL_UART_Receive_IT>:
{
 8002b1a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b1c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d10d      	bne.n	8002b42 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8002b26:	b171      	cbz	r1, 8002b46 <HAL_UART_Receive_IT+0x2c>
 8002b28:	b17a      	cbz	r2, 8002b4a <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8002b2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d00d      	beq.n	8002b4e <HAL_UART_Receive_IT+0x34>
 8002b32:	2301      	movs	r3, #1
 8002b34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b3c:	f7ff ffd2 	bl	8002ae4 <UART_Start_Receive_IT>
 8002b40:	e000      	b.n	8002b44 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8002b42:	2002      	movs	r0, #2
}
 8002b44:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8002b46:	2001      	movs	r0, #1
 8002b48:	e7fc      	b.n	8002b44 <HAL_UART_Receive_IT+0x2a>
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	e7fa      	b.n	8002b44 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8002b4e:	2002      	movs	r0, #2
 8002b50:	e7f8      	b.n	8002b44 <HAL_UART_Receive_IT+0x2a>
	...

08002b54 <__errno>:
 8002b54:	4b01      	ldr	r3, [pc, #4]	; (8002b5c <__errno+0x8>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <__libc_init_array>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4d0d      	ldr	r5, [pc, #52]	; (8002b98 <__libc_init_array+0x38>)
 8002b64:	4c0d      	ldr	r4, [pc, #52]	; (8002b9c <__libc_init_array+0x3c>)
 8002b66:	1b64      	subs	r4, r4, r5
 8002b68:	10a4      	asrs	r4, r4, #2
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	42a6      	cmp	r6, r4
 8002b6e:	d109      	bne.n	8002b84 <__libc_init_array+0x24>
 8002b70:	4d0b      	ldr	r5, [pc, #44]	; (8002ba0 <__libc_init_array+0x40>)
 8002b72:	4c0c      	ldr	r4, [pc, #48]	; (8002ba4 <__libc_init_array+0x44>)
 8002b74:	f000 f8a0 	bl	8002cb8 <_init>
 8002b78:	1b64      	subs	r4, r4, r5
 8002b7a:	10a4      	asrs	r4, r4, #2
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	42a6      	cmp	r6, r4
 8002b80:	d105      	bne.n	8002b8e <__libc_init_array+0x2e>
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
 8002b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b88:	4798      	blx	r3
 8002b8a:	3601      	adds	r6, #1
 8002b8c:	e7ee      	b.n	8002b6c <__libc_init_array+0xc>
 8002b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b92:	4798      	blx	r3
 8002b94:	3601      	adds	r6, #1
 8002b96:	e7f2      	b.n	8002b7e <__libc_init_array+0x1e>
 8002b98:	08002cf8 	.word	0x08002cf8
 8002b9c:	08002cf8 	.word	0x08002cf8
 8002ba0:	08002cf8 	.word	0x08002cf8
 8002ba4:	08002cfc 	.word	0x08002cfc

08002ba8 <malloc>:
 8002ba8:	4b02      	ldr	r3, [pc, #8]	; (8002bb4 <malloc+0xc>)
 8002baa:	4601      	mov	r1, r0
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	f000 b80b 	b.w	8002bc8 <_malloc_r>
 8002bb2:	bf00      	nop
 8002bb4:	2000000c 	.word	0x2000000c

08002bb8 <memset>:
 8002bb8:	4402      	add	r2, r0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <memset+0xa>
 8002bc0:	4770      	bx	lr
 8002bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bc6:	e7f9      	b.n	8002bbc <memset+0x4>

08002bc8 <_malloc_r>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	1ccd      	adds	r5, r1, #3
 8002bcc:	f025 0503 	bic.w	r5, r5, #3
 8002bd0:	3508      	adds	r5, #8
 8002bd2:	2d0c      	cmp	r5, #12
 8002bd4:	bf38      	it	cc
 8002bd6:	250c      	movcc	r5, #12
 8002bd8:	2d00      	cmp	r5, #0
 8002bda:	4606      	mov	r6, r0
 8002bdc:	db01      	blt.n	8002be2 <_malloc_r+0x1a>
 8002bde:	42a9      	cmp	r1, r5
 8002be0:	d903      	bls.n	8002bea <_malloc_r+0x22>
 8002be2:	230c      	movs	r3, #12
 8002be4:	6033      	str	r3, [r6, #0]
 8002be6:	2000      	movs	r0, #0
 8002be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bea:	f000 f857 	bl	8002c9c <__malloc_lock>
 8002bee:	4921      	ldr	r1, [pc, #132]	; (8002c74 <_malloc_r+0xac>)
 8002bf0:	680a      	ldr	r2, [r1, #0]
 8002bf2:	4614      	mov	r4, r2
 8002bf4:	b99c      	cbnz	r4, 8002c1e <_malloc_r+0x56>
 8002bf6:	4f20      	ldr	r7, [pc, #128]	; (8002c78 <_malloc_r+0xb0>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b923      	cbnz	r3, 8002c06 <_malloc_r+0x3e>
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	4630      	mov	r0, r6
 8002c00:	f000 f83c 	bl	8002c7c <_sbrk_r>
 8002c04:	6038      	str	r0, [r7, #0]
 8002c06:	4629      	mov	r1, r5
 8002c08:	4630      	mov	r0, r6
 8002c0a:	f000 f837 	bl	8002c7c <_sbrk_r>
 8002c0e:	1c43      	adds	r3, r0, #1
 8002c10:	d123      	bne.n	8002c5a <_malloc_r+0x92>
 8002c12:	230c      	movs	r3, #12
 8002c14:	6033      	str	r3, [r6, #0]
 8002c16:	4630      	mov	r0, r6
 8002c18:	f000 f846 	bl	8002ca8 <__malloc_unlock>
 8002c1c:	e7e3      	b.n	8002be6 <_malloc_r+0x1e>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	1b5b      	subs	r3, r3, r5
 8002c22:	d417      	bmi.n	8002c54 <_malloc_r+0x8c>
 8002c24:	2b0b      	cmp	r3, #11
 8002c26:	d903      	bls.n	8002c30 <_malloc_r+0x68>
 8002c28:	6023      	str	r3, [r4, #0]
 8002c2a:	441c      	add	r4, r3
 8002c2c:	6025      	str	r5, [r4, #0]
 8002c2e:	e004      	b.n	8002c3a <_malloc_r+0x72>
 8002c30:	6863      	ldr	r3, [r4, #4]
 8002c32:	42a2      	cmp	r2, r4
 8002c34:	bf0c      	ite	eq
 8002c36:	600b      	streq	r3, [r1, #0]
 8002c38:	6053      	strne	r3, [r2, #4]
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	f000 f834 	bl	8002ca8 <__malloc_unlock>
 8002c40:	f104 000b 	add.w	r0, r4, #11
 8002c44:	1d23      	adds	r3, r4, #4
 8002c46:	f020 0007 	bic.w	r0, r0, #7
 8002c4a:	1ac2      	subs	r2, r0, r3
 8002c4c:	d0cc      	beq.n	8002be8 <_malloc_r+0x20>
 8002c4e:	1a1b      	subs	r3, r3, r0
 8002c50:	50a3      	str	r3, [r4, r2]
 8002c52:	e7c9      	b.n	8002be8 <_malloc_r+0x20>
 8002c54:	4622      	mov	r2, r4
 8002c56:	6864      	ldr	r4, [r4, #4]
 8002c58:	e7cc      	b.n	8002bf4 <_malloc_r+0x2c>
 8002c5a:	1cc4      	adds	r4, r0, #3
 8002c5c:	f024 0403 	bic.w	r4, r4, #3
 8002c60:	42a0      	cmp	r0, r4
 8002c62:	d0e3      	beq.n	8002c2c <_malloc_r+0x64>
 8002c64:	1a21      	subs	r1, r4, r0
 8002c66:	4630      	mov	r0, r6
 8002c68:	f000 f808 	bl	8002c7c <_sbrk_r>
 8002c6c:	3001      	adds	r0, #1
 8002c6e:	d1dd      	bne.n	8002c2c <_malloc_r+0x64>
 8002c70:	e7cf      	b.n	8002c12 <_malloc_r+0x4a>
 8002c72:	bf00      	nop
 8002c74:	20000094 	.word	0x20000094
 8002c78:	20000098 	.word	0x20000098

08002c7c <_sbrk_r>:
 8002c7c:	b538      	push	{r3, r4, r5, lr}
 8002c7e:	4d06      	ldr	r5, [pc, #24]	; (8002c98 <_sbrk_r+0x1c>)
 8002c80:	2300      	movs	r3, #0
 8002c82:	4604      	mov	r4, r0
 8002c84:	4608      	mov	r0, r1
 8002c86:	602b      	str	r3, [r5, #0]
 8002c88:	f7fd fe6e 	bl	8000968 <_sbrk>
 8002c8c:	1c43      	adds	r3, r0, #1
 8002c8e:	d102      	bne.n	8002c96 <_sbrk_r+0x1a>
 8002c90:	682b      	ldr	r3, [r5, #0]
 8002c92:	b103      	cbz	r3, 8002c96 <_sbrk_r+0x1a>
 8002c94:	6023      	str	r3, [r4, #0]
 8002c96:	bd38      	pop	{r3, r4, r5, pc}
 8002c98:	200001ec 	.word	0x200001ec

08002c9c <__malloc_lock>:
 8002c9c:	4801      	ldr	r0, [pc, #4]	; (8002ca4 <__malloc_lock+0x8>)
 8002c9e:	f000 b809 	b.w	8002cb4 <__retarget_lock_acquire_recursive>
 8002ca2:	bf00      	nop
 8002ca4:	200001f4 	.word	0x200001f4

08002ca8 <__malloc_unlock>:
 8002ca8:	4801      	ldr	r0, [pc, #4]	; (8002cb0 <__malloc_unlock+0x8>)
 8002caa:	f000 b804 	b.w	8002cb6 <__retarget_lock_release_recursive>
 8002cae:	bf00      	nop
 8002cb0:	200001f4 	.word	0x200001f4

08002cb4 <__retarget_lock_acquire_recursive>:
 8002cb4:	4770      	bx	lr

08002cb6 <__retarget_lock_release_recursive>:
 8002cb6:	4770      	bx	lr

08002cb8 <_init>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	bf00      	nop
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr

08002cc4 <_fini>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	bf00      	nop
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr
